1 Directory Organization, Packaging, Other Criteria
An MPD is a logical set of electronic files aggregated and organized to fulfill a specific purpose in NIEM.  Directory organization and packaging of an MPD should be designed around major themes in NIEM:  reuse, sharing, interoperability, and efficiency.  
This rule is also applicable to all MPDs:
[Rule 6-1]  An MPD is packaged as a single compressed archive of files that represents a sub-tree of a file system in standard [PK-ZIP] format.  This archive MUST preserve and store the logical directory structure intended by its author.
MPD NIEM schema artifacts must be valid for both XML Schema and NIEM:
[Rule 6-2]  Within an MPD archive, all XSD and XML artifacts MUST be valid against and follow all rules for their respective [NIEM-NDR] conformance targets (i.e., subset, constraint, extension, exchange, reference schemas, and XML instances); this includes being well-formed and valid XML Schema documents.
NIEM releases, core updates, and domain updates follow a relatively consistent approach to directory organization [NIEM-DomainUpdate].  But there are many ways to organize IEPD and EIEM directories that may depend on a number of factors including (not limited to) business purpose and complexity.  For this reason, strict rules for IEPD and EIEM directory structure are difficult to establish.  Therefore, IEPD and EIEM authors may create their own logical directory structures.  However, for consistency and efficiency:
Definition:  MPD root directory – The top level file directory relative to all MPD artifacts and subdirectories.  

[Rule 6-3]  An MPD archive MUST uncompress (unzip) to a one and only one MPD root directory.
[Rule 6-3] ensures that:
• Unpacking an MPD archive will not scatter its contents on a storage device.
• A common starting point always exists to explore or use any MPD.
• mpd-catalog and change log artifacts will always be found in the MPD root directory (as a result of [Rule 4-1] and [Rule 4-12]). 
1.1 MPD File Name Syntax
As previously stated, the MPD Specification is intended to facilitate tool support for processing MPDs.  Given a tool must process an MPD, providing it basic information about the MPD as early as possible will help to reduce processing time and complexity.  So, if the class and version of an MPD archive could be easily identified by its file name, then a tool would not have to immediately open the archive and process the mpd-catalog just to determine this information.  Of course, ultimately, to do anything useful, a tool will have to open the MPD archive and process its mpd-catalog.  However, a standard file name syntax would allow a tool to search through a set of MPD archives to find a particular MPD name, version, or class without having to open (unzip) each.  The following rules apply:
[Rule 6-4]  An MPD archive file MUST use file name syntax defined by the regular expression:
   mpd-filename ::= name '-' version '.' class '.zip'       
      Where: 
   name  ::= alphanum ((alphanum | special)* alphanum)?
   alphanum ::= [a-zA-Z0-9]
   special  ::= '.' | '-' | '_'
   version  ::= digit+ ('.' digit+)* (status digit+)?
   digit    ::= [0-9]
   status   ::= 'alpha' | 'beta' | 'rc' | 'rev'
   class    ::= 'rel' | 'cu' | 'du' | 'iepd' | 'eiem' 
All alpha characters SHOULD be lower case to reduce the risk of complications across various file systems.  See [Rule 4-3] for an explanation of the status options.
(The regular expression notation used above is from XML 1.0 (Fifth Edition):
http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation)  
Obviously, the set of class values corresponds to release, core update, domain update, IEPD, and EIEM respectively.  A valid IEPD file name corresponding to the example in Appendix C: Sample MPD Catalog Instance would be:  Planning_Order-1.0.3rev2.iepd.zip
Checking this Appendix you will find that this example obeys the following two rules:
[Rule 6-5][Rule 6-5]  Within an MPD, the <name> and <version> substrings in the file name MUST match exactly the values for attributes mpdName and mpdVersionID within its mpd-catalog.xml artifact.

[Rule 6-6]  Within an MPD, the <class> substring in the file name MUST correctly correspond to the value for the attribute mpdClassCode within mpd-catalog.xml.  Correct correspondence is: 
IF file name <class> =	THEN mpd-catalog.xml mpdClassCode =
rel				release
cu				core-update
du				domain-update
iepd				iepd
eiem				eiem 
In HTTP-based Web Services environments, the MIME type designation of a MPD archive is important to facilitate processing by service consumers.  
[Rule 6-7]  When represented on the Internet, an MPD archive SHOULD use the following MIME Type:  
  application/zip+<class>    where
     <class> is one member from the set {rel, cu, du, iepd, eiem}
Use of the generic zip MIME type application/zip is allowed, but discouraged.  No other MIME types are allowed when representing MPD archives.
1.2 Artifact Links to Other Resources
The [NIEM-NDR] requires that each xsd:import in a NIEM schema contain a schemaLocation attribute with either an absolute or relative path reference that resolves to the correct imported schema.  However, this specification restricts an MPD import to a relative path reference that resolves to the correct schema within the MPD itself.  It is important to understand that the URI scheme previously discussed in Section 4.2.3 URI Scheme for MPD Artifacts should be used only to identify relationships among and provide source links to external schemas being reused.  It is not sufficient to allow references or links to such schemas stand in for a physical copy.  
Regardless of references to external sources or internal MPD directory organization, each schema xsd:import must adhere to the following rule:
[Rule 6-8]  Within an MPD archive, the value of each xsd:import schemaLocation attribute MUST be a relative path reference that resolves to the correct schema within the sub-tree.
The implication of this rule is a guarantee that all schema artifacts necessary to define, validate, and use an MPD are physically present within that MPD without requiring modifications to xsd:import schemaLocation attributes within schemas.  In accordance with the [NIEM-NDR], if MPD schemas are moved to an operational environment for implementation, validation, or other purposes, then absolute references may replace relative path references when needed.  When absolute references to Internet resources are required:
[Rule 6-9]  Absolute references to Internet resources MUST use a well-known transfer protocol (http, https, ftp, ftps) and MUST resolve (If applicable, documentation that describes how to resolve with security, account, and/or password issues MUST be included).
Releases, core updates, and domain updates must adhere to packaging rules primarily to enable development tools to process them consistently and efficiently.  The NIEM PMO controls the format and documentation for these MPDs and publishes them at http://release.niem.gov/niem/.  However, many different organizations author IEPDs and EIEMs.  As such, they may be distributed, published in repositories (possibly to a limited community), and reused by others.  Furthermore, EIEMs are the basis for families of IEPDs.  Therefore, it is important that both of these MPD classes are well documented for understanding and use.  
[Rule 6-10]  A published IEPD MUST contain all documents necessary to understand it and allow it to be implemented correctly.  Within an MPD, the <class> substring in the file name MUST correctly correspond to the value for the attribute mpdClassCode within mpd-catalog.xml.  Correct correspondence is: 
IF file name <class> =	THEN mpd-catalog.xml mpdClassCode =
rel				release
cu				core-update
du				domain-update
iepd				iepd
eiem				eiem 

[Rule 6-11]  A published IEPD MUST link (through its mpd-catalog) to any EIEM it is based on.  When represented on the Internet, an MPD archive SHOULD use the following MIME Type:  
  application/zip+<class>    where
     <class> is one member from the set {rel, cu, du, iepd, eiem}
Use of the generic zip MIME type application/zip is allowed, but discouraged.  No other MIME types are allowed when representing MPD archives.
The [NIEM-NDR] explains how NIEM employs a special type adaption mechanism to encapsulate and use other standards (e.g., geospatial and emergency management standards) in their native forms that are not NIEM-conformant.  Other standards may use xsd:import without requiring schemaLocation attributes (instead, relying only on the namespace).  These standards may also use xsd:include which is disallowed by NIEM.  When standards external to NIEM are required within NIEM MPDs, the following rule applies:
[Rule 6-12]  Within an MPD archive, if non-NIEM-conformant schemas from other standards are used and referenced within an MPD, then all xsd:import, xsd:include, and xsd:redefine constructs used within those schemas MUST be modified as needed to have a value for the schemaLocation attribute that is a relative path reference that resolves to the correct schema within the sub-tree.
For the case of non-NIEM-conformant schemas, this rule ensures that all schemas (or corresponding artifacts and namespaces) from other standards required for definition, validation, and use of the MPD are present within the archive.
XML schemas are the heart of MPDs since they formally specify normative structure and semantics for data components.  However, in general, an MPD is a closed set of artifacts.  This means that all hyperlink references within artifacts should resolve to the appropriate artifact.  
[Rule 6-13]  Within any artifact of an MPD archive, any direct reference to another resource (i.e., another artifact such as an image, schema, stylesheet, etc.) that is required to process or display an artifact SHOULD exist within the archive at the location specified by that reference.
This means that MPD artifacts, including documentation artifacts, should be complete.  For example, if an HTML document contains a hyperlink reference (href) to a schema (xsd) or stylesheet (xsl) that is part of the MPD, then the schema file associated with that hyperlink should be present within the MPD; likewise for a sourced (src) image.  Authors should exercise good judgment with this rule.  For example, it does not require an MPD to contain copies of all cited documents from a table of references if it contains hyperlinks to those documents.  The key operating words in this rule are:  "another resource … required to process or display an artifact SHOULD exist within the archive."
1.3 Duplication of Artifacts
Within an MPD, the replication of files or entire file sets should be avoided.  However, replication is allowed when a reasonable rationale exists.  In some cases, file replication may make it easier to use, validate, implement, or automatically process an MPD.  For example, multiple subsets may overlap with many identical schemas.  Yet, it may be easier or even necessary to allow this form of duplication to accommodate a validation tool, rather than removing duplicate schemas, and forcing the tool to use the mpd-catalog to identify required artifacts.  mpd-catalog-1.0.xsd is designed to track duplicate artifacts (File or FileSet), as well as, reference a single File artifact from multiple FileSet artifacts. 
1.4 Non-normative Guidance for Directories
Aside from the rules above, this specification does not impose additional constraints on an IEPD or EIEM author’s freedom to organize directory structure.  This is why the mpd-catalog is required to list every artifact, along with its locally unique identifier, relative path name, nature, and purpose.  This enables a machine to find every artifact regardless of its location in an MPD archive and know exactly what it is.  The mpd-catalog artifact always takes precedence over the directory structure of an IEPD or EIEM. 
Non-normative guidance for directory structuring may be useful to authors for a relatively simple IEPD or EIEM with a single subset, extension set, constraint set, and exchange schema set.  The following general guidance has been common practice for IEPD directories: 
• Create a root directory for the IEPD from the name and version identifier of the IEPD.  For example "my-iepd-3.2.4rev2".
• Per [Rule 4-1] and [Rule 4-12], mpd-catalog.xml and the change log (XML file format is not required for IEPD or EIEM change logs) must reside in the root directory.  
• Maintain XML stylesheets used with the mpd-catalog and change log in the MPD root directory.
• Maintain each subset organized as generated by the Schema Subset Generation Tool (SSGT).  The reason for maintaining the SSGT grouping is that the SSGT ensures that all xsd:import schemaLocation attributes contain relative path names that are correctly coordinated with the directory structure. 
• If derived from a schema subset, maintain the constraint schema set grouped as the subset from which it was derived (for the same reason as above). 
• Establish a subdirectory of the MPD root directory with the name "XMLschemas".   Within this subdirectory:
o Maintain each subset in a subdirectory with a name that contains the substring "subset".  Maintain and correlate a wantlist with the subset it represents.  To do so, change a wantlist filename if appropriate. 
o Maintain each constraint schema set (or all constraint schemas if appropriate) in a subdirectory with a name that contains the substring "constraint".
o Maintain each extension schema set (or all extension schemas if appropriate) in a subdirectory with a name that contains the substring "extension".
o Maintain each exchange schema in a subdirectory with a name that contains the substring "exchange".
• Maintain all documentation in a subdirectory of the MPD root directory with a name that contains the substring "documentation".   Create additional documentation subdirectories inside this one as needed. 
• Maintain all sample XML instances that validate to the schemas in a subdirectory of the MPD root directory with a name that contains the substring "XMLsamples".  This subdirectory can also contain any XML stylesheets (XSL) used with the sample instances. 
• Maintain tool specific files (inputs and outputs) in a subdirectory of the MPD root directory with a name that contains the substring "library".  
The guidance above results in an IEPD directory structure illustrated below in Figure 61.  Obviously, there are many other ways to organize for more complex business requirements in which multiple releases, subsets, constraint sets, core updates, and domain updates are employed in a single IEPD. 

Figure 61.  IEPD sample directory structure.




NIEM		Model Package Description (MPD) Specification







