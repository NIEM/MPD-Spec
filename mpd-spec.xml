<?xml version="1.0" encoding="US-ASCII"?>
<document
   xmlns="https://iead.ittl.gtri.org/wr24/doc/2011-09-30-2258"
   xmlns:ct="http://release.niem.gov/niem/conformanceTargets/3.0/"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:appinfo="http://release.niem.gov/niem/appinfo/3.0/"
   xmlns:doc="https://iead.ittl.gtri.org/wr24/doc/2011-09-30-2258"
   xmlns:j="http://release.niem.gov/niem/domains/jxdm/5.0/"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:sch="http://purl.oclc.org/dsdl/schematron"
   xmlns:structures="http://release.niem.gov/niem/structures/3.0/"
   xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:er="urn:oasis:names:tc:entity:xmlns:xml:catalog"
   xmlns:c="http://reference.niem.gov/niem/resource/mpd/catalog/3.0/"
   xmlns:nc="http://release.niem.gov/niem/3.0/">
 
   <title>National Information Exchange Model <char name="mdash"/> Model Package Description Specification</title>
   <version>3.0rc1</version>
   <date>2014-08-06</date>
   <author>NIEM Technical Architecture Committee (NTAC)</author>
 
  <subsection>
  	<title>Contents</title>
  	<tableOfContents/>
  </subsection>
  
  <subsection>
	<title>Abstract</title>
	<p>This document specifies normative rules and non-normative guidance for building Model Package Descriptions (MPDs) that conform to the National Information Exchange Model (NIEM) version 3.0.</p>
  </subsection>


  <subsection>
    	<title>Status</title>
	<p>This document is the normative specification for NIEM Model Package Descriptions (MPDs).  Although some Schematron rules that implement corresponding English rules are included in <ref idref="MPD-Schematron-Rules"/>, these Schematron rules are incomplete and untested.  They are considered examples only and subject to change.  At some time in the future NTAC will design, test, and publish a more complete set of Schematron rules for this specification.</p>  
	<p>The MPD Specification represents a design that has evolved from the collaborative work of the NIEM Business Architecture Committee (NBAC), the NIEM Technical Architecture Committee (NTAC), and their predecessors.  It is a product of the NIEM Program Management Office (PMO).</p>
    	<p>Email comments on this specification to <link href="mailto:niem-comments%40lists.gatech.edu?subject=NIEM%20MPD%20Specification%20Version%203.0">niem-comments@lists.gatech.edu</link>.</p>
	</subsection>


<!-- ########################### FINAL 3.0 ########################### -->

<subsection><title>Remaining</title>
	<pre>
		- N-IEPD or IEPD?
		- refs to NDR terms?
		- refs to sections?
		- validate mpd-catalog
		- Check ruleSections for rationales that should be inside this tag.
		- Review rules and conformance targets (CT)
		- TBDs: pub dates on new specs <ref idref="References"/>.
		- Final QA/validity: MPD cat XSD, cat subset, MPD Toolkit, CoT/HW IEPD, appendices, etc.
		- Final QA: typos, spell, punct, acros, abbrevs, format, missing refs or termRefs, etc.
	</pre>
</subsection>


<!-- ######################## Introduction ############################ -->


<section id="Introduction">
	<title>Introduction</title>

	<p>This specification assumes familiarity with the National Information Exchange Model (NIEM), its basic concepts, architecture, processes, design rules, and general conformance rules.  For novices to NIEM, the recommended reading list includes:</p>
	<ul>
		<li><p>Introduction to the National Information Exchange Model <ref idref="NIEM-Intro"/></p></li>
		<li><p><ref idref="NIEM-ConOps"/></p></li>
		<li><p><ref idref="NIEM-Conformance"/></p></li>
		<li><p><ref idref="NIEM-CTAS"/></p></li>
		<li><p>NIEM Naming and Design Rules <ref idref="NIEM-NDR"/></p></li>
		<li><p><ref idref="NIEM-HLVA"/></p></li>
		<li><p><ref idref="NIEM-HLTA"/></p></li>
		<li><p><ref idref="NIEM-UserGuide"/></p></li>
		<li><p>NIEM Business Information Exchange Components <ref idref="NIEM-BIEC"/></p></li>
		<li><p><ref idref="NIEM-Implementation"/></p></li>
	</ul>

	<p>Even those already knowledgeable of NIEM should be familiar with <ref idref="NIEM-Conformance"/>, <ref idref="NIEM-NDR"/>, <ref idref="NIEM-CTAS"/>, <ref idref="NIEM-HLVA"/> and <ref idref="NIEM-BIEC"/>.</p>

	<p>The NIEM documents listed above are available at <link>http://reference.niem.gov/niem/</link>.  See <ref idref="NIEM-Implementation"/> for the NIEM implementation guidelines Web page.</p>

	<p>Note that a few of these documents are relatively old, in particular the <ref idref="NIEM-ConOps"/> and the <ref idref="NIEM-UserGuide"/>.  These documents are listed because they still provide a great deal of useful information for understanding NIEM.  Just realize that some of the techniques and processes in these documents have changed since they were published.  To date, updates have not been issued.</p>

	<p><ref idref="NIEM-MPD-3.0"/> uses and is a peer to the NIEM Naming and Design Rules <ref idref="NIEM-NDR"/>.  It supersedes <ref idref="NIEM-MPD-1.0"/> and <ref idref="NIEM-MPD-1.1"/>, as well as IEPD guidance previously published in <ref idref="NIEM-IEPD"/>.  As implied above, <ref idref="NIEM-MPD-3.0"/> also supersedes some of the information about IEPDs in the <ref idref="NIEM-UserGuide"/>.  That said, the <ref idref="NIEM-UserGuide"/> still remains a good source for understanding the process of building <termRef>Information Exchange Package Documentation</termRef> (IEPD).</p>


<section id="Background">
	<title>Background</title>

	<p>Many fundamental concepts, processes, and products in the NIEM generally involve aggregating electronic files into logical sets that serve a specific purpose.  Examples of such sets include, but are not necessarily limited to, a NIEM release, core update (CU), domain update (DU), <termRef>Information Exchange Package Documentation</termRef> (IEPD), and Enterprise Information Exchange Model (EIEM).  Each of these is an example of a NIEM <termRef>Model Package Description</termRef> (MPD).</p>

	<definition term="Model Package Description">
		<p>A set of logically cohesive W3C XML Schema documents and other supporting files that represents a reusable or implementable NIEM-conformant information model.  An MPD is packaged as a single <ref idref="PKZIP"/> archive file.</p>
	</definition>

	<p>A key NIEM concept used throughout this specification is <em>data component</em>.</p>
		
	<definition term="data component">
		<p>An XML Schema type or attribute group definition; or an XML Schema element or attribute declaration.</p>
	</definition>

	<p>An MPD is a normative specification for XML data components in the format of the World Wide Web Consortium (W3C) XML Schema Definition Language <ref idref="W3-XML-Schema-Datatypes"/>, <ref idref="W3-XML-Schema-Structures"/>.  MPD schema documents either (1) define the semantics and structure for NIEM reusable data components, or (2) define implementable NIEM exchange instance XML documents in W3C Extensible Markup Language (XML) <ref idref="W3-XML"/>.</p>

	<p>An MPD is ready to publish and use when it conforms to NIEM specifications, and has been properly packaged with the schemas, documentation, and supplemental files needed to implement or reuse it.  MPD content design, development, and assembly may be difficult and time-consuming, especially if done manually.  Software tools can significantly reduce the complexity of designing, constructing, changing, and managing MPDs.  In order to reduce ambiguity and to facilitate interoperable and effective tool support, this baseline specification imposes some degree of consistency on the terminology, syntax, semantics, and composition of MPDs.</p>

</section>

<section id="Purpose">
	<title>Purpose</title>

	<p>This document is a normative specification for NIEM MPDs in general, and NIEM <termRef>Information Exchange Package Documentation</termRef> (IEPD) specifically.  The rules and guidance herein are designed to encourage and facilitate NIEM use and tools by balancing consistency, simplicity, and flexibility.  Consistency and simplicity make MPDs easy to design correctly, build rapidly, and find easily (for reuse or adaptation).  Consistency also facilitates tool support.  Flexibility enables more latitude to design and tailor MPDs for complex data exchange requirements.  As such, this document does not necessarily prescribe mandates or rules for all possible situations or organizational needs.  If an organization desires to impose additional requirements or constraints on its MPDs beyond those specified in this document (for example, mandate that an IEPD contain a normative set of business requirements or a domain model), then it is free to do so, as long as no conflicts exist with this <ref idref="NIEM-MPD-3.0"/> or the <ref idref="NIEM-NDR"/>.</p>

	<p>This document defines terminology; identifies required and optional (but common) artifacts; defines metadata; specifies normative constraints, schemes, syntax, and processes as rules; provides non-normative guidance; and as needed, refers to other related NIEM specifications for more detail.</p>

</section>

<section id="Scope">
	<title>Scope</title>

	<p>This specification applies to all NIEM <termRef term="Model Package Description">Model Package Descriptions</termRef> (MPD).  Currently, MPDs include the following:</p> 
	<ul>
		<li><p>A NIEM <termRef>Information Exchange Package Documentation</termRef> (IEPD) that defines a NIEM data exchange.</p></li>
		<li><p>A NIEM release (including a major, minor, or micro release) <ref idref="NIEM-HLVA"/>.</p></li>
		<li><p>A NIEM domain update <ref idref="NIEM-DomainUpdate"/>.  (Note these are NOT the same as a NIEM domain schema document that ois a part of a NIEM release).</p></li>
		<li><p>A NIEM core update to a NIEM release.</p></li>
		<li><p>A NIEM Enterprise Information Exchange Model (EIEM) on which one or more NIEM IEPDs can be based.</p></li>
	</ul>

	<p>This document is the baseline specification for all MPDs, and in particular, it focuses on the normative rules for IEPDs.  In the future, detailed rules that apply to other MPDs (listed above) will be published in other NIEM specifications.  Also in the future, other types of MPDs may be added to this list.</p>

	<p>This specification is designed to be useful for developing MPDs iteratively so that many stages of conformance to this specification exist on the path to completeness.  This enables a tool to check and verify conformance at many discrete, rational states during development, rather than at the end of development.  Thus, tool vendors should be able to build, adapt, and/or integrate software tools that will assist in MPD development and assembly from raw parts to finished product.</p>

	<p>NIEM is a data layer for an information architecture.  Files in an MPD generally define XML Schema types and declare XML elements and attributes to use in payloads for information exchanges.  While an MPD may also contain files from layers beyond the data layer, this specification is not intended to define details of other architectural layers.  Such files are generally present only to provide additional context, understanding, or assistance for implementing the exchange of payloads.</p>

	<p>Authoritative sources are not required to revise MPDs that exist before this specification becomes effective.  However, they are always encouraged to consider revising MPDs to meet this specification, especially when making other significant changes.</p>

</section>

<section id="Audience">
	<title>Audience</title>

<p>The following groups should review and be familiar with this specification:</p>
<ul>
	<li><p>NIEM MPD developers, reviewers, and individuals or groups responsible for approving MPDs.</p></li>
	<li><p>NIEM IEPD developers, reviewers, and implementers.</p></li>
	<li><p>NIEM-aware tool developers.</p></li>  
</ul>

</section>
</section>


<!-- ####################### Concepts and Terminology ########################### -->


<section id="Concepts-and-Terminology">
	<title>Basic Concepts and Terminology</title>

	<p>The section defines and discusses baseline terms and concepts that will be used throughout this document.  Presentation in this section is sequenced for understanding.  Each subsection builds upon previous ones.  The section concludes with a more detailed discussion of MPDs and more specifically, IEPDs.</p>

<section id="Key-Words-for-Requirements-Levels">
	<title>Key Words for Requirement Levels</title>

	<p>Within normative content rules and definitions, the key words MUST, MUST NOT, SHALL, SHALL NOT, SHOULD, SHOULD NOT, MAY, RECOMMENDED, REQUIRED, and OPTIONAL in this document are to be interpreted as described in <ref idref="RFC2119-KeyWords"/>.</p>

</section>

<section id="Character-Case-Sensitivity">
	<title>Character Case Sensitivity</title>

	<p>This specification imposes many constraints on the syntax for identifiers, names, labels, strings, etc.  In all cases, unless otherwise explicitly noted, syntax is case sensitive.  In particular, XML files in appendices that define particular artifacts, transformations, and examples are case sensitive.</p>

	<p>Also, note that as a general principle, lower case characters are used whenever such will not conflict with the <ref idref="NIEM-NDR"/>.</p>

</section>


<section id="Artifacts">
	<title>Artifacts</title>

	<p>MPDs are generally composed of files and file sets grouped for a particular purpose.  Each file is referred to as an <termRef>artifact</termRef>, and each logical set of such files is called an <termRef>artifact set</termRef>.</p>

	<definition term="artifact">
		<p>A single file with a defined purpose.</p>
	</definition>

	<definition term="artifact set">
		<p>A collection of artifacts logically grouped for a defined purpose.</p>
	</definition>

	<p>An MPD is itself an <termRef>artifact set</termRef>, the purpose for which is to define and document the intended use of the MPD.  While the key MPD artifacts are its <termRef>XML schema document</termRef> artifacts, there are also other kinds of MPD artifacts.  These may include (but are not limited to) HTML, XSLT, text, or graphic files used for human-readable documentation.  An MPD may also have artifacts intended to help assist in or accelerate the use and implementation of the MPD.  For example, these may be XML, UML, or binary files that are inputs to or outputs from software tools used to build, generate, or edit the MPD or its schema document artifacts.  <ref idref="MPD-Artifacts"/> contains a listing of mandatory and common optional artifacts for the five types of MPDs.  Common types of artifacts are described in more detail in subsequent sections.  <ref idref="Artifact-Sets"/> discusses the different methods for grouping MPD artifacts into sets.</p>

</section>


<section id="Schema-Namespace-Correspondence-in-NIEM">
	<title>Schema Document and Namespace Correspondence in NIEM</title>

	<p>To simplify automatic schema processing and reduce the potential for confusion and error, <ref idref="NIEM-NDR"/> principles state that each NIEM-conformant namespace SHOULD be defined by exactly one reference or extension schema document.  To support this concept, the <ref idref="NIEM-NDR"/> disallows the use of <code>xs:include</code>, and mandates the use of the <code>xs:schema/@targetNamespace</code> attribute in NIEM-conformant schema documents.</p>

	<p>So, (1) each NIEM namespace is defined by a single NIEM-conformant schema document, and (2) each NIEM-conformant schema document declares a target namespace.  NIEM does not permit schema documents without target namespaces, unless they are from sources outside of NIEM (e.g., an <termRef>external schema document</termRef>).</p>

</section>



<section id="Namespaces">
	<title>Namespaces Used in this Specification</title>

	<p>The following namespaces are referenced and used in this specification:</p>

	<figure>
		<title>Namespaces Used</title>
		<pre>
	appinfo		http://release.niem.gov/niem/appinfo/3.0/
	c		http://reference.niem.gov/niem/resource/mpd/catalog/3.0/
	ct		http://release.niem.gov/niem/conformanceTargets/3.0/
	er		urn:oasis:names:tc:entity:xmlns:xml:catalog
	html		http://www.w3.org/1999/xhtml
	j		http://release.niem.gov/niem/domains/jxdm/5.0/
	nc		http://release.niem.gov/niem/3.0/
	sch		http://purl.oclc.org/dsdl/schematron
	structures	http://release.niem.gov/niem/structures/3.0/
	xs		http://www.w3.org/2001/XMLSchema
	xsi		http://www.w3.org/2001/XMLSchema-instance
		</pre>
	</figure>

</section>



<section id="Harmonization">
	<title>Harmonization</title>

	<p><em>Harmonization</em> is a process that NIEM governance committees and domain stewards iteratively apply to NIEM content (specifically, its semantics, structure, and relationships) during the preparation of a NIEM major or minor release.  On a more restricted scale a domain steward harmonizes his/her own content (schema documents) in preparation for a domain update MPD.  Multiple domain stewards may collaborate in a coordinated domain update.  In this case, to the extent possible, harmonization may be applied across the content of all the collaborating domains.  Harmonization results in model change and evolution with the intent of removing semantic duplication and overlap while improving representational quality and usability.</p>

	<definition term="harmonization">
		<p>The process of reviewing a data model's existing data definitions and declarations; reviewing how it structures and represents data; integrating new data components; and refactoring data components as necessary to remove (or reduce to the maximum extent) semantic duplication and/or overlap among all data structures and definitions resulting in quality improvements to representation and usability.</p>
	</definition>

</section>


<section id="XML-Validation">
	<title>XML Validation</title>

	<p>A discussion of XML validation requires an understanding of basic XML terminology.  The following definitions are necessary.</p>

	<definition term="XML document">
		<p>A document in XML format.</p> 
		<p>(as defined by <ref idref="W3-XML"/>, <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#dt-xml-doc"> <char name="sect"/>2, <q>Documents</q></a>)</p>
	</definition>

        <definition term="schema component">
		<p>The generic term for the building blocks that comprise the abstract data model of a schema.</p>
		<p>(as defined by <ref idref="W3-XML-Schema-Structures"/>, <a href="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/#key-schema"> <char name="sect"/>2.2, <q>XML Schema Abstract Data Model</q></a>)</p>
        </definition>

        <definition term="XML Schema">
		<p>A set of schema components.</p>
		<p>(as defined by <ref idref="W3-XML-Schema-Structures"/>, <a href="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/#key-schema"> <char name="sect"/>2.2, <q>XML Schema Abstract Data Model</q></a>)</p>
        </definition>

	<definition term="XML schema validation">
		<p>The process of checking an <termRef>XML document</termRef> to confirm that it is both <em>well-formed</em> (as defined by <ref idref="W3-XML"/>, <a href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-well-formed"> <char name="sect"/>2.1, <q>Well-Formed XML Documents</q></a>) and <em>valid</em> (as defined by <ref idref="W3-XML-Schema-Structures"/>, <a href="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/#concepts-schemaConstraints"> <char name="sect"/>2.3, <q>Constraints and Validation Rules</q></a>), in that it follows the structure defined by an associated <termRef>XML Schema</termRef>.  A well-formed document follows the syntactic rules of XML, which are the same for all XML documents.</p>
	</definition>

	<definition term="XML schema document">
		<p>A physical (file) representation of part or all of an <termRef>XML Schema</termRef>.  One or more <em>XML schema documents</em> are used to assemble <termRef term="schema component">schema components</termRef> into an <termRef>XML Schema</termRef>.</p>
	</definition>

	<definition term="XML schema assembly">
		<p>A process that uses <termRef term="XML schema document">XML schema documents</termRef> to identify the constituent <termRef term="schema component">schema components</termRef> for an <termRef>XML Schema</termRef>, and correctly sequences and structures these components to construct a single entity, the <termRef>XML Schema</termRef>.</p>
	</definition>

	<p>In other words, an <termRef>XML Schema</termRef> is the result of <termRef>XML schema assembly</termRef>, i.e., processing a set of one or more <termRef term="XML schema document">XML schema documents</termRef> into a single entity.  That entity is most commonly an electronic image in the memory of a computer.</p>

	<p>This specification often refers to the process of <termRef>XML schema validation</termRef>, that is, validation of an instance XML document to confirm it adheres to the structure defined by a particular <termRef>XML Schema</termRef>.  Generally, this should occur periodically during and after design time to ensure the conformance and quality of an information exchange definition (i.e., <termRef term="XML schema document">XML schema documents</termRef>) and associated instance XML documents.  However, local architecture or policy may dictate the need to validate more often, and in some cases may require runtime validation.</p>

	<p>XML schema document sets that define a NIEM information exchange must be authoritative.  Application developers may use other schemas (e.g., constraint or Schematron schema documents) for various purposes, but for the purposes of determining NIEM conformance, the authoritative reference schema documents (NIEM releases) are relevant.  This does not mean that XML validation must be performed on all instance XML documents as they are served or consumed; only that the instance XML documents validate if and when XML validation is performed.  Therefore, even when validation is not performed, instance XML documents must be valid against the XML schema that is assembled from XML schema document sets that specify these instance XML documents.</p>

</section>


<section id="Reference-Schema-Document">
	<title>Reference Schema Documents</title>
		
	<definition term="reference schema document">
		<p>As defined by <ref idref="NIEM-NDR"/>:</p>
			<blockquote>
				<p>An <termRef>XML schema document</termRef> that is intended to provide the authoritative definitions of broadly reusable <termRef term="schema component">schema components</termRef>.  It is a <termRef>conformance target</termRef> of <ref idref="NIEM-NDR"/>.  A reference schema document MUST conform to all rules of <ref idref="NIEM-NDR"/> that apply to this conformance target.  An <termRef>instance XML document</termRef> with a <termRef>conformance target identifier</termRef> of <code>http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0/#ReferenceSchemaDocument</code> MUST be a conformant reference schema document.</p>
			</blockquote>
	</definition>

	<p>A NIEM <termRef>reference schema document</termRef> is an <termRef>XML schema document</termRef> that is intended to be the authoritative definition of business semantics for components within its target namespace.  Reference schema documents include the NIEM Core schema documents, NIEM domain schema documents, and NIEM domain update schema documents.  A reference schema document meets all of the following criteria:</p>
	<ul>
		<li><p>It is a NIEM conformant schema document.</p></li>
		<li><p>It is explicitly designated as a reference schema document (by its own conformance targets attribute).  This can be declared by an <termRef>MPD catalog document</termRef>or by a tool-specific mechanism outside the schema document.</p></li> 
		<li><p>It provides the broadest, most fundamental definitions of data components in its namespace.</p></li> 
		<li><p>It provides the authoritative definition of business semantics for data components in its namespace.</p></li> 
		<li><p>It is intended to serve as a basis for components in IEPD schema documents, including <termRef term="schema document subset">schema document subsets</termRef>, <termRef term="constraint schema document set">constraint schema document sets</termRef>, and <termRef term="extension schema document">extension schema documents</termRef>.</p></li> 
	</ul>

	<definition term="reference schema document set">
		<p>A set of related reference schema documents, such as a NIEM release.</p>
	</definition>

	<p>The <ref idref="NIEM-NDR"/> conformance rules for reference schema documents are generally stricter than those for other classes of NIEM-conformant schema documents.  For example, they are not allowed to employ particular XML Schema model groups such as <code>xs:choice</code> or <code>xs:any</code> that other schema documents may contain.</p>

	<p>NIEM reference schemas are very uniform in their structure.  As they are the primary definitions for data components, they do not need to restrict other data definitions, and they are not allowed to use XML Schema's complex type restriction mechanisms.</p>

</section>



<section id="MPD-General">
	<title>Model Package Descriptions</title>

	<p>The concept of <termRef>Model Package Description</termRef> provides a common framework for classes of NIEM file sets, each with a specific purpose.  A NIEM <em>release</em> is a harmonized <termRef>reference schema document</termRef> set that defines and declares all content for a single (major, minor, or micro) version of NIEM (See <ref idref="NIEM-HLVA"/>).  A <em>domain update</em> is a <termRef>reference schema document</termRef> set that represents changes to one or more domains in a NIEM release.  A <em>core update</em> is a <termRef>reference schema document</termRef> set of changes that supplement the core of a NIEM <em>release</em>.  An <em>Enterprise Information Exchange Model</em> (EIEM) is a <termRef>XML schema document</termRef> set that may contain one or more <termRef term="subset schema document">subset schema documents</termRef>, <termRef term="extension schema document">extension schema documents</termRef>, and <termRef term="external schema document">external schema documents</termRef> that are employed to construct IEPDs.</p>

	<p>All MPDs share several commonalities:</p>
	<ul>
		<li><p>Principal content is <termRef term="XML schema document">XML schema documents</termRef> (XSD), the purpose for which is to define and declare reusable data components for information exchanges or to define the exchanges themselves.</p></li>
		<li><p>Requires a self-documenting <code>mpd-catalog.xml</code> artifact containing metadata and a listing of its key artifacts.  This artifact establishes identification metadata, <termRef term="conformance target">conformance targets</termRef>, purpose, general content, lineage, and other metadata.</p></li>
		<li><p>Requires a Uniform Resource Identifier (URI).</p></li>
		<li><p>Requires a name.</p></li>
		<li><p>Requires a version number.</p></li>
		<li><p>Requires the <termRef>conformance target identifier</termRef> <code>http://reference.niem.gov/niem/specification/model-package-description/3.0/#MPD</code>.</p></li>
		<li><p>Packaged as <ref idref="PKZIP"/> archive.</p></li>
		<li><p>Has a copy of (not just URLs or references to) all schema documents needed to validate any <termRef>instance XML document</termRef> class it defines.</p></li>
		<li><p>May contain optional alternate representations in addition to XML Schema (e.g., generic diagram, UML/XMI, database format, spreadsheet, etc.).</p></li>
		<li><p>May contain miscellaneous other documentation or file artifacts for assisting with usage or implementation.</p></li>
	</ul>



<section id="Information-Exchange-Package-Documentation">
	<title>Information Exchange Package Documentation (IEPD)</title>

	<p>This section only applies to an MPD that is an IEPD.</p>

	<definition term="Information Exchange Package Documentation">
		<p>An MPD that defines one or more recurring data or information exchanges, each in the form of an <termRef>Information Exchange Package</termRef>.</p>
	</definition>

	<definition term="instance XML document">
		<p>(of an <termRef>XML Schema</termRef> is) an <termRef>XML document</termRef> that is valid against an <termRef>XML Schema</termRef>.</p>
	</definition>

	<p>A NIEM IEPD contains a NIEM-conformant <termRef>XML schema document</termRef> set that may include portions of a NIEM Core schema document (and updates), portions of NIEM Domain schema documents (and updates), enterprise-specific or IEPD-specific extension schema documents.   Furthermore, a NIEM IEPD declares at least one <termRef>IEP conformance target</termRef> within its <termRef>MPD catalog document</termRef> (See <ref idref="MPD-Catalog"/>).  The XML schema documents contained in an IEPD work together to define one or more classes of <termRef term="instance XML document">instance XML documents</termRef> that consistently encapsulate data for meaningful information exchanges.  Furthermore, any instance XML document that is valid for an XML schema document set (in the IEPD) and an associated <termRef>IEP conformance target</termRef> (declared in the IEPD's MPD catalog) is considered a member of that <termRef>IEP conformance target</termRef> class.  XML schema documents in a NIEM IEPD conform to the <ref idref="NIEM-NDR"/> and may use or extend data component definitions drawn from NIEM.  An IEPD may also incorporate and use XML schema documents from other standards that do not conform to NIEM. (See <ref idref="NIEM-NDR"/> for details.)</p>

	<p>An IEPD consists of a set of artifacts (XML schema documents, documentation, sample <termRef term="instance XML document">instance XML documents</termRef>, etc.) that together define and describe an implementable NIEM information exchange.  An IEPD should contain an <termRef>XML schema document</termRef> set and instructional material necessary to:</p>
	<ul>
		<li><p>Understand information exchange context, content, semantics, and structure.</p></li> 
		<li><p>Create and validate XML documents defined by the IEPD, and used for information exchanges.</p></li>
		<li><p>Identify the lineage of the IEPD itself and optionally its artifacts.</p></li>
	</ul>

	<p>A NIEM IEPD defines one or more classes of <termRef term="instance XML document">instance XML documents</termRef>.  In NIEM each of these instances is called an <termRef>Information Exchange Package</termRef> (or IEP) that satisfies all validity constraints for its class as defined by the IEPD.  An IEP is an information message payload serialized as XML and transmitted in some way, for example over a communications network.  (<ref idref="FEA-DRM"/> and <ref idref="GJXDM-IEPD"/> are the original sources of the terms <em>information exchange package</em> and <em>information exchange package documentation</em>, respectively).</p>

	<definition id="IEP" term="Information Exchange Package">
		<p>An <termRef>XML document</termRef> that satisfies all the validity constraints for its class as defined by a NIEM IEPD.  (abbreviated IEP)</p>
	</definition>

	<p>The following rule specifies an IEPD as a <termRef>conformance target</termRef>:</p>

	<ruleSection>
		<title>Information Exchange Package Documentation</title>
		<rule id="IEPD" applicability="N-IEPD" class="Constraint">
		<p>An MPD that defines one or more Information Exchange Packages (<termRef term="instance XML document">instance XML documents</termRef>.  It is a <termRef>conformance target</termRef> of this specification.  An IEPD MUST conform to all rules of this specification that apply to this conformance target.  An MPD with a <termRef>conformance target identifier</termRef> of <code>http://reference.niem.gov/niem/specification/model-package-description/3.0/#IEPD</code> MUST be an <termRef>Information Exchange Package Documentation</termRef> MPD.</p>
		</rule>
	</ruleSection>

	<p>How to declare validity constraints for one or more IEP classes within an IEPD will be covered in more depth in <ref idref="Information-Exchange-Packages"/>.</p>

	<p>Note that NIEM conformance does not require that an IEP be native XML on the transmission medium.  A NIEM-conformant IEP may be encrypted, compressed (e.g., using <ref idref="PKZIP"/>, <ref idref="RAR"/>, <ref idref="W3-EXI"/>, etc.), or wrapped within an envelope mechanism, as long as its original native XML form can be retrieved by the receiver.</p>

	<p>Common to IEPD MPDs:</p>
	<ul>
		<li><p>Requires a <code>readme</code> artifact.</p></li>
		<li><p>Its <termRef>XML schema document</termRef> set defines data exchanges (<termRef term="Information Exchange Package">Information Exchange Packages</termRef> or IEPs).</p></li>
		<li><p>Can contain subset, extension, external, or constraint schema documents.</p></li>
		<li><p>Must declare at least one or more <termRef term="IEP conformance target">IEP conformance targets</termRef>.</p></li>
        	<li><p>Contains sample instance XML documents that validate to XML schema document set.</p></li>
	</ul>

</section>
</section>


<!-- ###################### Rules ############################ -->


<section id="Rules">
	<title>Rules</title>

          <p>Rules define specific constraints on artifacts or on the interpretation of artifacts.  The classes of artifacts are identified by <termRef term="conformance target">conformance targets</termRef> that are enumerated by this document in <ref idref="Conformance-Target-Concepts"/>.  Rules are normative.</p>

          <bogusRule section="&lt;section&gt;" number="&lt;number&gt;" applicability="&lt;applicability&gt;" class="&lt;class&gt;">
            <p>An enforceable rule for NIEM.</p>
          </bogusRule>

          <p>Each rule has a classification, which is either <em>Constraint</em> or <em>Interpretation</em>.  These terms are defined below:</p>
 
          <definition term="constraint rule">
		<p>A rule that sets a requirement on an artifact with respect to its conformance 
		to a <termRef>conformance target</termRef>.</p>
          </definition>

          <definition term="interpretation rule">
		<p>A rule that sets the methodology, pattern, or procedure for understanding 
		or using some aspect of an instance of a conformance target.</p>
          </definition>

	  <p>Each rule may apply to one or more <termRef term="conformance target">conformance targets</termRef>.  Each rule lists its applicable <termRef term="conformance target">conformance target(s)</termRef> encoded according to <ref idref="conformance-target-codes"/>.  The conformance targets for this specification are summarized in <ref idref="Conformance-Target-Concepts"/>.  <ref idref="Conformance-Targets"/> provides additional conformance target definitions, explanations, and rules.</p>

          <p>Rules are numbered according to the section in which they appear and the order in which they appear within that section.  For example, Rule 4-1 is the first rule in Section 4.</p>

</section>



<section id="Conformance-Target-Concepts">
	<title>Conformance Target Concepts</title>

	<p>This section introduces the concept of <termRef>conformance target</termRef>, a concept fundamental to understanding the normative rules defined in this specification.  <ref idref="Conformance-Targets"/> defines and discusses rules for specific <termRef term="conformance target">conformance targets</termRef> established for MPDs.</p>



      <section>
        <title>Conformance Targets Attribute Specification terminology</title>
	<p>The <ref idref="NIEM-CTAS"/> defines several terms used normatively within this specification.</p>

	<definition term="conformance target">
	  <p>As defined by <ref idref="NIEM-CTAS"/>:</p>
          <blockquote>
		<p>A class of artifact, such as an interface, protocol, document, platform, process or service, that is the subject of conformance clauses and normative statements.  There may be several conformance targets defined within a specification, and these targets may be diverse so as to reflect different aspects of a specification. For example, a protocol message and a protocol engine may be different conformance targets.</p>
	  </blockquote>	  
        </definition>

        <definition term="conformance target identifier">
	  <p>As defined by <ref idref="NIEM-CTAS"/>:</p>
          <blockquote>
		<p>An internationalized resource identifier <ref idref="RFC3987-IRI"/> that uniquely identifies a conformance target.</p>
          </blockquote>
        </definition>

</section>



<!-- ####################### Conformance Targets for MPDs ########################### -->



<section id="CT-Codes">
	<title>Conformance Target Codes</title>

	<p>There are several purposes for defining conformance targets in NIEM specifications.  A <termRef>conformance target</termRef> establishes and identifies a class of artifact associated with a set of rules.  Based on these rules, tools and operations may be developed.  However, a conformance target has other purposes.</p>

	<p>Conformance targets satisfy a need to ensure developers do not conform to NIEM in name only.  Once committed to using NIEM, developers and organizations need well-defined conformance targets and rules to know exactly how to conform to NIEM.  Funding agencies require conformance targets that correspond to interoperability goals.  An agency funding development of a set of systems will need to ensure it funds development of NIEM-conformant IEPDs that support the exchange of NIEM-conformant IEPs.  Tools and system developers need conformance targets that identify real world requirements corresponding to their use cases and tool capabilities.  Many of these tools are not yet developed.  And so, this specification attempts to cover a broad range of general use cases.  <ref idref="Conformance-Targets"/> defines MPD Specification conformance targets and associated rules in more detail.  Here, we simply present a table of <termRef>conformance target</termRef> codes used in this specification.</p>

	<table id="conformance-target-codes">
		<title>Conformance Target Codes</title>
	        <theadr>
		    <th>Conformance Target</th>
		    <th>Code</th>
        	</theadr>
		<tr>
		    <td><termRef>well-formed MPD</termRef></td>
		    <td>WF-MPD</td>
		</tr><tr>
		    <td><termRef>NIEM IEPD</termRef></td>
		    <td>N-IEPD</td>
		</tr><tr>
		    <td><termRef>Information Exchange Package</termRef></td>
		    <td>IEP</td>
		</tr><tr>
		    <td><termRef term="full NIEM information exchange package">full NIEM IEP</termRef></td>
		    <td>FN-IEP</td>
		</tr><tr>
		    <td><termRef>schema document subset</termRef></td>
		    <td>Schema-subset</td>
		</tr><tr>
		    <td><termRef>subset schema document</termRef></td>
		    <td>Subset-schema</td>
	        </tr><tr>
		    <td><termRef>MPD catalog document</termRef></td>
		    <td>MPD-Cat</td>
		</tr><tr>
		    <td><termRef>XML catalog document</termRef></td>
		    <td>XML-Cat</td>
		</tr><tr>
		    <td>MPD <termRef>change log</termRef></td>
		    <td>MPD-ChLg</td>
	        </tr>
	</table>

	<p>The codes above represent conformance targets used in this specification.  An IEPD author can also declare and assign identifiers to IEP conformance targets within the <termRef>MPD catalog document</termRef> for an IEPD.</p>

</section>
</section>
</section>


<!-- ####################### MPD XML Schema Document Artifacts ########################### -->


<section id="MPD-XML-Schema-Artifacts">
	<title>MPD XML Schema Document Artifacts</title>

	<p><termRef>XML schema document</termRef> artifacts are the essential content of MPDs because they normatively define and declare data components.  The purpose of an MPD is determined by the <termRef>XML schema document</termRef> or document set(s) it contains; furthermore, each <termRef> XML schema document</termRef> may have a different purpose.  The <ref idref="NIEM-NDR"/> addresses some schema documents as <termRef term="conformance target">conformance targets</termRef> including reference schema documents, extension schema documents, and schema document sets.  Each conformance target may adhere to a different (though possibly overlapping) set of conformance rules.  Consult the <ref idref="NIEM-NDR"/> for these rules.  NIEM also employs a special technique that relies on <termRef term="constraint schema document set">constraint schema document sets</termRef> (See <ref idref="Constraint-Schemas"/>).</p>

	<p>The following subsections define each type of NIEM schema document and document set, and identify the types of MPDs that contain them.</p>


	<section id="Reference-Schemas">
	<title>Reference Schema Documents</title>

	<p>This section generally applies to NIEM releases, core updates, and domain updates.  Though not common, it is also valid to use a <termRef>reference schema document</termRef> or document set within an IEPD or EIEM.  The <termRef>reference schema document</termRef> and <termRef>reference schema document set</termRef> were defined earlier in <ref idref="Reference-Schema-Document"/>.</p>

	<p>A NIEM <termRef>reference schema document</termRef> is intended to be the authoritative definition schema document for a NIEM target namespace, therefore, all NIEM releases, core updates, and domain updates are composed of a reference schema document set and associated namespaces.   As a standalone artifact set, a reference schema document set is always harmonized such that all types and properties are semantically unique (i.e., multiple versions of semantically identical types or properties do not exist within the set).</p>

	<p>As authoritative definitions, NIEM reference schema document sets satisfy more rigorous documentation requirements.  The <ref idref="NIEM-NDR"/> requires that each type definition, and element and attribute declaration in a reference schema document contain an <code>xs:annotation</code> element that defines its semantic meaning.  As will be explained later, <termRef term="extension schema document">extension schema documents</termRef> are also authoritative definitions, but in a local sense.  They are authoritative within a given IEPD, and therefore, must also satisfy the same rigorous documentation rules as reference schema documents.</p>

	<p>Typically reference schema documents contain data components with the most relaxed cardinality (<code>0</code> to <code>unbounded</code>).  However, this is not an absolute requirement.  If necessary, cardinality in reference schema documents may be constrained to model reality.  For example, in NIEM 3.0 a <code>nc:Location2DGeospatialCoordinateType</code> contains both a <code>nc:GeographicCoordinateLatitude</code> element and a <code>nc:GeographicCoordinateLongitude</code> element.  Each of these elements has cardinality <code>minOccurs="1"</code> and <code>maxOccurs="1"</code>.  Any other cardinality for these elements has no meaning.  On the other hand, one might claim that NIEM should constrain <code>PersonType</code> to a single occurrence of the element <code>PersonBirthDate</code>.  Every person has one and only one birth date.  Unfortunately, also in reality, criminal persons often present multiple identities with multiple birth dates; and so the capability to represent such is an important data requirement for NIEM.</p>

</section>



<section id="Subset-Schemas">
	<title>Subset Document Schemas</title>

	<p>This section applies to IEPDs, which are generally designed with <termRef term="schema document subset">schema document subsets</termRef>.</p>


<section id="Basic-Subset-Concepts">
	<title>Basic Subset Concepts</title>

	<p>A NIEM <em>schema document subset</em> is a set of XML schema documents that constitutes a reduced set of components derived from a NIEM reference schema document or document set associated with a given numbered release or domain update.</p>  

	<definition term="schema document subset">
		<p>An XML schema document set based on a reference schema document set intended to ensure that any <termRef>instance XML document</termRef> valid to the schema document subset is also valid to the reference schema document set.</p>
	</definition>

	<p>The primary purpose for a schema document subset is to reduce and constrain the scope and size of a full NIEM reference schema document set for use within an IEPD.  A schema document subset is derived from a reference schema document set (such as a NIEM release) by applying subset operations (See <ref idref="Constructing-Subsets"/>).  Also, note that employing a subset of a reference schema document set within an IEPD is optional; it is completely valid to reuse NIEM reference schema documents as-is within IEPDs.</p>

	<p>The fundamental rule for a valid NIEM schema document subset is formally stated follows:</p>

<ruleSection><title>Fundamental NIEM Subset Rule</title>
	<rule id="r-subset" applicability="Schema-subset" class="Constraint">
		<p>A schema document subset (<code>$SUBSET</code>) for a given reference schema document set (<code>$REFERENCE</code>) MUST be defined such that for all instance XML documents (<code>$XML</code>), where <code>$XML</code> is valid to <code>$SUBSET</code>, <code>$XML</code> is valid to <code>$REFERENCE</code>.</p>
	</rule>
</ruleSection>

	<p>A <termRef>schema document subset</termRef> is composed of <termRef term="XML schema document">XML schema documents</termRef>.  A <termRef>schema document subset</termRef> can essentially be a <termRef>reference schema document set</termRef> (i.e., a NIEM release) that has been modified by applying subset operations to support business requirements represented in an IEPD.  A subset derived from a reference schema document set may differ from that reference such that its content has been reduced and/or constrained.</p>

	<definition term="subset schema document">
		<p>An XML schema document that meets all of the following criteria:</p>
		<ul>
			<li><p>It is built from a reference schema document set where one or more reference schema documents have been substituted by corresponding subset schema documents.</p></li>
			<li><p>It is built from a reference schema document by applying subset operations to the XML schema statements in a reference schema document.</p></li>
			<li><p>It is explicitly designated as a subset schema document.  This is accomplished by declaration in the relevant MPD catalog or by a tool-specific mechanism outside the subset schema document.</p></li>
			<li><p>It has a target namespace previously defined by a reference schema document.  That is, it does not provide original definitions and declarations for schema components, but instead provides an alternate schema representation of components that are defined by a reference schema document.</p></li>
			<li><p>It does not alter the business semantics of components in its namespace.  The reference schema document defines these business semantics.</p></li>
			<li><p>It is intended to express the limited vocabulary necessary for an IEPD or EIEM and to support XML Schema validation for an IEPD.</p></li>
		</ul>
	</definition>

</section>



<section id="Constructing-Subsets">
	<title>Constructing a Schema Document Subset</title>

	<p>This section is non-normative.  It is intended to be useful.  Nonetheless, use the subset operations in this section with caution.</p>
	
	<p>NIEM subset operations are essentially reduction operations that remove or constrain portions of a reference schema document set, thereby building a profile of the set.  They do not expand the scope (i.e., relax constraints) or change the semantics of reference schema document set content.</p>

	<p>Because NIEM adopts an optional and over-inclusive data representation strategy, most elements in a NIEM reference schema have zero to unbounded cardinality.  So, elements with cardinality <code>minOccurs="0"</code> are optional and may be omitted from a subset schema document if not needed for business reasons.  It is also valid to constrain element cardinality within a subset schema document, as long as doing so does not break the subset relationship with the reference schema document set.  For example, a reference schema document element with cardinality (<code>minOccurs="0"</code>, <code>maxOccurs="unbounded"</code>) may be constrained to (<code>0</code>,<code>1</code>) or (<code>1</code>,<code>1</code>) in a subset schema document.  However, if a reference schema document element's cardinality is (<code>1</code>,<code>unbounded</code>), it may not be constrained to (<code>0</code>,<code>1</code>) since this breaks the subset relationship.  The interval (<code>0</code>,<code>1</code>) is not contained within, and instead, overlaps the interval (<code>1</code>,<code>unbounded</code>).</p>

	<p>The following list describes valid subset operations that are considered non-normative and informative only.  In most cases, they can be applied to a schema document set and result in a corresponding <termRef>schema document subset</termRef>.  However, it is possible to apply them in combinations that will break the subset relationship, or even result in invalid schemas.  Apply these operations carefully and thoughtfully!</p>
	<ol>
		<li><p>Remove an XML comment.</p></li>
		<li><p>Remove an <code>xs:annotation</code> and its children <code>xs:documentation</code> and <code>xs:appinfo</code>.</p></li>
		<li><p>Increase the value of an <code>xs:element/@minOccurs</code> as long as it remains less than or equal to its corresponding <code>@maxOccurs</code> value).</p></li>
		<li><p>Decrease the value of an <code>xs:element/@maxOccurs</code> as long as it remains greater than or equal to its corresponding <code>@minOccurs</code> value.</p></li>
		<li><p>Remove an <code>xs:element</code> if its <code>@minOccurs="0"</code>.</p></li>
		<li><p>Remove an <code>xs:complexType</code> or <code>xs:simpleType</code> if not supporting an <code>xs:element</code> or <code>xs:attribute</code> declaration, or another <code>xs:complexType</code> or <code>xs:simpleType</code> definition.</p></li>
		<li><p>Remove an <code>xs:attribute</code> with <code>@use="optional"</code> from an <code>xs:complexType</code>.</p></li>
		<li><p>Change an <code>xs:attribute/@use="optional"</code> to <code>@use="prohibited"</code>.</p></li>
		<li><p>Change an <code>xs:attribute/@use="optional"</code> to <code>@use="required"</code>.</p></li>
		<li><p>Remove an <code>xs:element</code> declaration if it is not supporting an element use.</p></li>
		<li><p>Remove an <code>xs:enumeration</code> from an <code>xs:simpleType</code> as long as it is not the only remaining <code>xs:enumeration</code>.</p></li>
		<li><p>Remove an element with representation term <code>AugmentationPoint</code> if it is not being used for element substitution.</p></li>
		<li><p>Add or apply a constraining facet to an <code>xs:simpleType</code>.</p></li>
		<li><p>Remove an <code>xs:import</code> and its associated schema document if the schema document is not used within the document set.</p></li>
		<li><p>Change a concrete <code>xs:element</code> declaration to <code>@abstract="true"</code>.</p></li>
		<li><p>Change an <code>xs:element/@nillable="true"</code> to <code>@nillable="false"</code>.</p></li>
		<li><p>Substitute an <code>xs:element/@substitutionGroup</code> member for its associated substitution group head.</p></li>
		<li><p>Substitute a composition of <code>xs:element/@substitutionGroup</code> members for their associated substitution head (subject to cardinality and unique particle attribution (UPA) constraints <ref idref="W3-XML-Schema-Structures"/>, <a href="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/#cos-nonambig"> <char name="sect"/> <q>Schema Component Constraint: Unique Particle Attribution</q></a>).  The composition is an ordered sequence of the <code>@substitutionGroup</code> member elements.  Each substitute element may bound its cardinality such that the total cardinality sum is within the bounds of the <code>@substitutionGroup</code> head cardinality.  Order and cardinality of the replacement sequence must conform to XML Schema UPA constraints.</p></li>
		<li><p>Replace a wildcard (subject to cardinality, UPA, and namespace constraints) with a composition, i.e., an ordered sequence of elements.  Each element may further bound cardinality within the bounds of the wildcard.  Order and cardinality of replacement sequence must conform to XML Schema UPA constraints.  The namespace of each element must conform with namespace constraints specified by the wildcard (if any).</p></li>
</ol>

</section>
</section>


<section id="Extension-Schemas">
	<title>Extension Schema Documents</title>

	<definition term="extension schema document">
		<p>As defined by <ref idref="NIEM-NDR"/>:</p>
		<blockquote>
			<p>An <termRef>XML schema document</termRef> that is intended to provide definitions of <termRef term="schema component">schema components</termRef> that are intended for reuse within a more narrow scope than those defined by a <termRef>reference schema document</termRef>.  It is a <termRef>conformance target</termRef> of <ref idref="NIEM-NDR"/>.  An extension schema document MUST conform to all rules of <ref idref="NIEM-NDR"/> that apply to this conformance target.  An XML document with a <termRef>conformance target identifier</termRef> of <code>http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0/#ExtensionSchemaDocument</code> MUST be an extension schema document.</p>
	  	</blockquote>
	</definition>

	<p>In general, an <termRef>extension schema document</termRef> contains components that use or are derived from the components in reference schema documents.  It is intended to express additional vocabulary above and beyond the vocabulary available from reference schema documents.</p>

	<p>A developer who determines that NIEM is missing elements required for a given information exchange has several options to account for such requirement shortfalls.  Using rules and techniques defined in the <ref idref="NIEM-NDR"/>:</p>
	<ul>
		<li><p>Extend an existing NIEM data component (if possible).</p></li>
		<li><p>Augment an existing NIEM data type (through NIEM Type Augmentation).</p></li>
		<li><p>Build a new NIEM-conformant data component.</p></li>
		<li><p>Employ NIEM adapter types for components from an external standard that does not conform to NIEM.</p></li>
	</ul>

	<p>A NIEM extension schema document may contain data components built from any of the options above.  Employment of extension schema documents in an IEPD is entirely optional.</p>

	<p>Multiple extension schema documents are allowed in a single IEPD.  Developers will likely want to reuse many of their extension schema documents in other IEPDs.  Therefore, the best practice for extension is to group all data components designed to be reused into one extension schema document or document set, and group IEPD-specific data components into another.  Then the reusable extension components can be more easily redeployed in other IEPDs as needed.</p> 

	<p>Extension schema documents generally contain new data component declarations that may (though not necessarily) be derived from or reference existing NIEM data components.  This being the case, reference schema documents do not exist for new data components found within extension schema documents.  Therefore, extension schema documents must satisfy the more rigorous documentation requirements of reference schema documents.  Per the <ref idref="NIEM-NDR"/>, the definition or declaration of each new data component in an extension schema document must include an <code>xs:annotation</code> element that provides its semantics and NIEM-specific relationships.</p>

</section>



<section id="External-Schemas">
	<title>External Schema Documents</title>

	<definition term="external schema document">
			<p>As defined by <ref idref="NIEM-NDR"/>:</p>
		<blockquote>
			<p>Any <termRef>XML schema document</termRef> that is not one of:</p>
			<ul>
              <li><p>a <termRef>reference schema document</termRef>,</p></li>
              <li><p>an <termRef>extension schema document</termRef>, or</p></li>
	      <li><p>an <termRef>XML schema document</termRef> that has the <code>structures</code> namespace as its target namespace.</p></li>
			</ul>
		</blockquote>
          </definition>

	  <p>All MPD classes may contain <em>external schema documents</em> that do not conform to NIEM.  Data components declared and defined in external schema documents require NIEM <em>external adapter types</em> to identify the fact they do not conform to NIEM.</p>

	  <definition term="external adapter type">
		  <p>As defined by <ref idref="NIEM-NDR"/>:</p>
		  <blockquote>
			  <p>A NIEM-conformant type that adapts external components for use within NIEM.  An external adapter type creates a new class of object that embodies a single concept composed of external components.  A NIEM-conformant schema defines an external adapter type.</p>
		  </blockquote>
 	 </definition>

	<p>Refer to the <ref idref="NIEM-NDR"/> for details about external schema documents, external adapter types, and the rules defining their use.</p> 

</section>



<section id="Constraint-Schemas">
	<title>Constraint Schema Document Sets</title>

	<definition term="constraint schema document set">
		<p>A set of related constraint schema documents that work together, such as a constraint schema document set built by adding constraints to a schema document subset.</p>
	</definition>

	<p>A <termRef>constraint schema document set</termRef> is an <termRef>XML schema document</termRef> sset that is used to express business rules for a class of <termRef term="instance XML document">instance XML documents</termRef>, and is not assumed to be a definition for the semantics of the components it contains and describes.  Instead, a constraint schema document set uses the XML Schema Definition Language to add constraints to components defined or declared by other schema documents, usually a <termRef>schema document subset</termRef>; but they can be applied to <termRef term="extension schema document">extension schema documents</termRef> as well.</p>
	
	<p>A <termRef>constraint schema document set</termRef> validates additional constraints imposed on an <termRef>instance XML document</termRef> only after it is known to be NIEM-conformant (i.e., has been validated with a <termRef>reference schema document set</termRef>, or <termRef>schema document subset</termRef>, and applicable <termRef term="extension schema document">extension schema documents</termRef>).</p>  

	<p>To use a <termRef>constraint schema document set</termRef> to tighten constraints on an IEP, a two-pass validation technique is employed.  In the first pass, an IEP is validated against the schema document subset and extension schema documents.  This pass ensures that IEP semantics and structure conform to the NIEM model and <ref idref="NIEM-NDR"/>.  In the second pass, an IEP is checked against a constraint schema document set, which may contain constrained versions of the <termRef term="subset schema document">subset schema documents</termRef> and <termRef term="extension schema document">extension schema documents</termRef>.  This pass ensures that the IEP also satisfies the additional constraints (i.e., business rules that the first pass was unable to validate).  A constraint schema document set need not validate constraints that are applied by other schema documents.</p>

	<p>Constraint schema document sets are generally useful when it is necessary to impose restrictions that are more complex than cardinality.  If only cardinality restrictions are needed, then it is easier and more efficient to set these directly in the subset schema documents and avoid the use of a constraint schema document set.  Otherwise, a constraint schema document set may be necessary.</p>  

	<p>Use of a constraint schema document set is one option for tightening constraints on NIEM IEPs beyond what NIEM itself provides.  This particular technique uses the XML Schema Definition Language <ref idref="W3-XML-Schema-Datatypes"/>, <ref idref="W3-XML-Schema-Structures"/>.  NIEM also allows other methods that do not use XML Schema.  For example, the use of <ref idref="ISO-Schematron"/> is the preferred method for applying business rules.  However, other constraint or business rule methods are also acceptable.  That said, at this time there are no normative rules for how these business rule techniques should be employed in NIEM IEPDs.  Therefore, if other techniques are used, it is a developer responsibility to incorporate appropriate artifacts and clear documentation.</p>

	<p>Note that one disadvantage to use of constraint schema document sets is that they do not provide clear visibility or explanation of the constraints they enforce; nor do they provide clear validation failure messages.  On the other hand, a standard business rule language such as <ref idref="ISO-Schematron"/> provides facilities for better understanding of the business rules, their intent, and error handling of failures.</p>
	
	<p>A common practice for creating an IEPD constraint schema document set is to start with a valid NIEM schema document subset and modify it to further restrict the class of instance XML documents (IEPs) that will validate with this constraint schema set.  However, an extension schema document can also be used to derive a constraint schema document.  Using this technique, the namespace of that schema document would reuse the target namespace of the schema document from which it is derived.</p>

	<p>There is no restriction on the number of constraint schema document sets (and passes) that an IEPD can employ.  As in other advanced situations, developers must clearly document their intentions for and use of multiple constraint schema document sets.</p>

	<p>In general, constraint schema documents in a <termRef>constraint schema document set</termRef> have far fewer requirements than other classes of NIEM schema documents.  Since they work in tandem with NIEM normative schema documents, these schema documents are allowed to use the XML Schema Definition language in any way necessary to express business rules.  This means that to constrain instance XML documents, these schema document can employ XML Schema constructs that are not allowed in NIEM conformant schema documents.</p>

</section>
</section>


<!-- ###################### MPD Documentation Artifacts ############################ -->


<section id="MPD-Documentation-Artifacts">
	<title>MPD Documentation Artifacts</title>
	
	<p>XML schema documents (and the schemas that result from them) are the essence of a NIEM MPD.  However, a variety of documentation files may be incorporated into a NIEM MPD.  However, in addition to XML schema documents, there is one mandatory documentation artifact required by every MPD:  the <termRef>MPD catalog document</termRef>.  An <code>mpd-catalog.xml</code>) contains basic metadata, relationship and lineage data, <termRef>conformance target</termRef> specifications, and validation information.</p>

	<p>A <termRef>readme artifact</termRef> (formerly known as a <em>master document</em>) is mandatory for IEPDs.  This MPD class may be built by different developers, and may be registered into a repository for reuse by many other users, developers, and implementers; therefore, a minimal form of documentation is absolutely necessary.  An IEPD readme file is the primary source and starting point for human readable documentation, and should reference (and describe) any other separate documentation artifacts.  This requirement ensures that baseline documentation is consistently rooted in a clearly visible artifact within each MPD.</p>

	<p>The following subsections address these documentation artifacts and the concepts, metadata, and content each supports.</p>



<section id="MPD-Catalog">
	<title>NIEM MPD Catalog</title>

	<definition term="MPD catalog document">
		<p>An XML document that is Schema valid to <code>mpd-catalog-3.0.xsd</code> in <ref idref="MPD-Catalog-XSD"/>.  The <em>MPD catalog document</em> contains metadata that describes:</p>
	<ul>
		<li><p>Unique identification</p></li>
		<li><p>MPD conformance targets</p></li>
		<li><p>Basic characteristics and properties</p></li>
		<li><p>Key artifacts and directory structure</p></li>
		<li><p>Relationships to other MPDs and their artifacts</p></li>
		<li><p><termRef term="IEP conformance target">IEP conformance targets</termRef></p></li>
	</ul>
	</definition>

	<p>Each MPD class may have somewhat different catalog requirements.  The catalog metadata are formally defined by the XML Schema document in <ref idref="MPD-Catalog-XSD"/>.  MPD catalog metadata are designed to be the minimal needed to facilitate human understanding, tool support, and machine processing.  The metadata can support a number of MPD uses and functions including (but not limited to):</p>
	<ul>
		<li><p>Identification of key artifacts</p></li>
		<li><p>Generation of a hyperlinked content display using XSLT</p></li>
		<li><p>Browsing and understanding of artifacts and their content</p></li>
		<li><p>Automatic registration into a registry/repository</p></li>
		<li><p>Search, discovery, retrieval of MPDs (through metadata and relationships)</p></li>
		<li><p>Reuse of MPDs and their artifacts</p></li>
		<li><p>Reuse of BIECs and associated EIEMs</p></li>
		<li><p>Tracing and analysis of MPD lineage</p></li>
		<li><p>General conformance and validation of the MPD itself</p></li>
		<li><p>Definition, identification, and validation of IEP conformance targets</p></li>
	</ul>

<ruleSection><title>MPD Has an <code>mpd-catalog.xml</code> in its Root Directory</title>
	<rule id="r-wf-mpd" applicability="WF-MPD" class="Constraint">
		<p>Within its <termRef term="MPD root directory">root directory</termRef>, an MPD MUST contain an <termRef>MPD catalog document</termRef> artifact with name <code>mpd-catalog.xml</code>.</p>
	</rule>
</ruleSection>

<ruleSection><title>MPD Catalog Document Valid to <code>mpd-catalog-3.0.xsd</code></title>
	<rule id="r1-mpd-cat" applicability="MPD-Cat" class="Constraint">
		<p>An <termRef>MPD catalog document</termRef> MUST be valid to <code>mpd-catalog-3.0.xsd</code> <ref idref="MPD-Catalog-XSD"/>.</p>
	</rule>
</ruleSection>

	<p>This rule requires validation with <code>mpd-catalog-3.0.xsd</code>, which also imports a NIEM schema subset.  So, validation of the MPD catalog XML document must be done in the context of the catalog schema document, its associated NIEM subset, and <code>mpd-catalog.xml</code>.  This does not require the MPD to contain copies of the catalog schema document or the schema subset (since these are standard for all MPDs).  However, a validation tool must have access to all three XML documents.</p>

	<p>The XML schema documents required to validate an MPD catalog XML document are available in the <ref idref="NIEM-MPD-Toolkit"/>.  Note that validators often require references to schemas and their imports.  This may be done through a command line instruction or by adding a <code>schemaLocation</code> attribute to <qName>xs:import</qName> statements.</p>



<section id="MPD-Catalog-TOC">
	<title>MPD Catalog as a Table of Contents</title>

	<p>One function of the MPD catalog is to serve as a table of contents that identifies, locates, and classifies key artifacts and artifact sets.  For that purpose <ref idref="MPD-Catalog-XSD"/> provides a number of classifier elements for most common artifacts and artifact sets in MPDs.  For other less common or generic artifacts two general classifiers exist:  <qName>c:Documentation</qName> and <qName>c:ApplicationInfo</qName>.  These elements loosely correspond to the meaning of the XML Schema <qName>xs:annotation</qName> child elements, <qName>xs:documentation</qName> and <qName>xs:appinfo</qName>.  General visual, audio, and textual explanatory documentation should be classified as <qName>c:Documentation</qName>, while tool-specific artifacts (such as imports, exports, executables, etc.) should be classified as <qName>c:ApplicationInfo</qName>.</p>

	<p>The classifier elements are designed to identify, categorize, and describe any artifacts and artifact sets (including its <termRef>path name</termRef>, dependencies, and lineage).  Employing XSLT, <code>mpd-catalog.xml</code> can be transformed into an <code>index.html</code> artifact that displays a hyperlinked MPD table of contents and metadata summary in a browser.</p>

	<p>In general, only an IEPD would contain <code>c:Documentation</code> and <code>c:ApplicationInfo</code> artifacts.  So, for an IEPD, a best practice is to use the <code>readme</code> artifact (i.e., the <termRef>readme artifact</termRef> required in the <termRef>MPD root directory</termRef>) to reference <code>c:Documentation</code> and <code>c:ApplicationInfo</code> artifacts whether or not they have been classified in the MPD catalog.</p>

	<p>An IEPD's MPD catalog is not required to record all its artifacts.  The IEPD author decides which artifacts (both files and sets) are important enough to explicitly include in the MPD catalog.  The author may choose to classify all, some, or none in the catalog.</p>

	<p>The MPD catalog provides a supplement or an alternative to organizing MPD artifacts and sets with a standard file directory.  An author can use it to identify, classify, and describe particular artifacts or sets, instead of having to do so with only file names and directory structure.  An author can also employ the guidance in <ref idref="Guidance-IEPD-Directories"/>.</p>

</section>



<section id="Extending-an-MPD-Catalog">
	<title>Extending an MPD Catalog</title>

	<p>An MPD Catalog may be extended to accommodate new or additional metadata, artifact classifiers, or validity constraints that are not already defined in <ref idref="MPD-Catalog-XSD"/>.</p>

	<p>To extend the MPD catalog, an MPD author must provide both an XML catalog extension document (XML) and one or more MPD extension schema documents (XSD).  The XML catalog extension identifies that one or more MPD catalog extensions are present, and resolves their namespaces to local URIs.  The MPD catalog extension is a schema that defines and declares the new data components for metadata, classifiers, and/or constraints.  Both general <ref idref="NIEM-Conformance"/> and specific <ref idref="NIEM-NDR"/> conformance rules apply to these components.  The XML catalog extension document must reside in the <termRef>MPD root directory</termRef>.  The MPD extension schema documents may bear any file name and reside anywhere in the MPD.  This is because the XML catalog is expected to <termRef term="resolve URI">resolve</termRef> all local URIs.  MPD processing tools are expected to look for and recognize the XML catalog (that identifies MPD catalog extensions exist) by its file name.</p>

	<p>The following rules specify the requirements for an MPD catalog extension XML catalog document:</p>

<ruleSection>
	<title>MPD Catalog Extension XML Catalog Document in Root Directory</title>
	<rule id="r1-mpd-cat-ext-xml-cat" applicability="MPD-Cat" class="Constraint">
		<p>An MPD catalog extension XML catalog document MUST reside in the same relative directory as the <code>mpd-catalog.xml</code> artifact (normally in the <termRef>MPD root directory</termRef>)</p>
	</rule>
</ruleSection>

<ruleSection>
	<title>MPD Catalog Extension XML Catalog Document Name Is <code>mpd-catalog-extension-xml-catalog.xml</code></title>
	<rule id="r2-mpd-cat-ext-xml-cat" applicability="MPD-Cat" class="Constraint">
		<p>An MPD catalog extension XML catalog document MUST bear the file name (and type) <code>mpd-catalog-extension-xml-catalog.xml</code>.</p>
	</rule>
</ruleSection>

<ruleSection>
	<title>MPD Catalog Extension XML Catalog Document Resolves Namespaces to URIs</title>
	<rule id="r3-mpd-cat-ext-xml-cat" applicability="MPD-Cat" class="Constraint">
		<p>An MPD catalog extension XML catalog document MUST <termRef term="resolve URI">resolve</termRef> all MPD catalog schema extension document namespaces to the correct corresponding local URIs in the MPD.</p>
	</rule>
</ruleSection>

	<p>So, when a processor identifies a file named <code>mpd-catalog-extension-xml-catalog.xml</code> in the <termRef>MPD root directory</termRef>, it can assume that it contains references to one or more MPD catalog extension schema documents that adhere to the following rules:</p>

<ruleSection>
	<title>MPD Catalog Extension Schema Document Conforms to NDR Extension Rules</title>
	<rule id="r1-mpd-cat-ext-xsd" applicability="MPD-Cat" class="Constraint">
		<p>An MPD catalog extension schema document MUST conform to the <ref idref="NIEM-NDR"/> extension schema conformance target rules.</p>
	</rule>
</ruleSection>

<ruleSection>
	<title>MPD Catalog Schema and Its Extensions Conform to NDR Schema Set Rules</title>
	<rule id="r2-mpd-cat-ext-xsd" applicability="MPD-Cat" class="Constraint">
		<p>Within an MPD, the schema set formed by <code>mpd-catalog-3.0.xsd</code> and all MPD catalog extension schema documents MUST conform to the <ref idref="NIEM-NDR"/> schema set conformance target rules.</p>
	</rule>
</ruleSection>

	<p>Whether extending an MPD catalog with new metadata elements, artifact classifier elements, or validity constraint elements, <ref idref="MPD-Catalog-XSD"/> provides an abstract element as a substitution group head in each case.  The user simply derives a new type (through extension or restriction), or reuses an existing type, then declares a new element (of that type), and identifies it with the appropriate substitution group.  Whenever possible, the user should reuse types, elements, and attributes that are already defined/declared within the <ref idref="MPD-Catalog-XSD"/>.</p>

	<p>If an MPD catalog schema document extension uses NIEM data components that are not already contained in the NIEM Core subset provided with <ref idref="NIEM-MPD-Toolkit"/>, then the additional components must be additive.  In other words:</p>

<ruleSection>
	<title>MPD Schema Document Extension Support Schemas Are Supersets of Spec Subsets</title>
	<rule id="r3-mpd-cat-ext-xsd" applicability="MPD-Cat" class="Constraint">
		<p>Subset schema documents provided to support an MPD schema document extension MUST be a superset of the subset schema documents provided with this specification to support the MPD catalog schema document.</p>
	</rule>
</ruleSection>

</section>
</section>



<section id="Metadata-Concepts">
	<title>Metadata Concepts</title>

	<p>The MPD catalog also contains both required and optional metadata for the MPD and its artifacts and artifact sets.  The following subsections specify the syntax, formats, and semantics for that metadata.</p>



<section id="Name-Syntax">
	<title>MPD Name Syntax (<code>c:mpdName</code>)</title>

	<p>Note that syntax for <code>c:mpdName</code> detailed in this section is not applicable to MPD file name syntax presented in <ref idref="MPD-File-Name-Syntax"/>.  MPD file name syntax is constrained only by the file system in which an MPD resides.</p>

	<p>An MPD's official name is the value of the <code>c:mpdName</code> attribute owned by the <code>c:MPD</code> element in the MPD's catalog document.  This value is constrained by the regular expression pattern on <code>c:mpdName</code> within the MPD catalog schema <ref idref="MPD-Catalog-XSD"/>:</p>
	<blockquote><p><code>[A-Za-z]([-_ ]?[A-Za-z0-9]+)*</code></p></blockquote>

	<p>The regular expression above indicates that an MPD name:</p>
	<ul>
		<li><p>Begins with an alpha character (upper or lower case).</p></li>
		<li><p>Ends with an alphanumeric character (upper or lower case).</p></li>
		<li><p>May contain alphanumeric characters.</p></li>
		<li><p>May contain single spaces, single dashes, and single underscores as separators.</p></li>
	</ul>

	<p>IEPD author's often like to reuse the official MPD name in metadata within the file name.  Note that <code>c:mpdName</code> is of <code>xs:token</code> type and allows single spaces and upper case alpha characters.  That said, be sure to consider differences in operating system / file system treatment of spaces and character case within file and directory names.  This is the reason that releases, domain updates, and core updates restrict use of spaces and upper case characters within both <code>c:mpdName</code> and MPD file names 
(See <ref idref="r-name-syntax"/> and <ref idref="r-mpd-match"/>.).</p>

</section>



<section id="mpdClass">
	<title>MPD Class (<qName>c:mpdClassURIList</qName>)</title>

	<p>An MPD class is a <termRef>conformance target</termRef> identifier to which the given MPD conforms.  The MPD catalog <qName>c:mpdClassURIList</qName>attribute declares a list of conformance target identifiers, identifying the conformance targets to which the MPD claims to conform.</p>
	
	<p>The rules below defines two basic conformance target identifiers.  The first is common to all MPDs:</p>

	<ruleSection>
		<title>MPD Conformance Target Identifier</title>
		<rule id="r-ct-mpd" applicability="WF-MPD" class="Constraint">
			<p>An MPD MUST have the conformance target identifier <code>http://reference.niem.gov/niem/specification/model-package-description/3.0/#MPD</code> as a value in its MPD Catalog <qName>c:mpdClassURIList</qName> attribute.</p>
		</rule>
	</ruleSection>

	<p>The second identifier is used for an IEPD:</p>

	<ruleSection>
		<title>IEPD Conformance Target Identifier</title>
		<rule id="r-ct-iepd" applicability="N-IEPD" class="Constraint">
			<p>An IEPD MUST have the conformance target identifier  <code>http://reference.niem.gov/niem/specification/model-package-description/3.0/#IEPD</code> as a value of its <qName>c:mpdClassURIList</qName> attribute.</p>
		</rule>
	</ruleSection>

	<p>It should be clear that an MPD that is an IEPD should have a value for its <code>c:mpdClassURIList</code> attribute that contains both <termRef>conformance target</termRef> identifiers above.  In the future, additional conformance target identifiers will be assigned by other appropriate NIEM specifications that specialize MPDs.</p>

	<p>The <code>c:mpdClassURIList</code> attribute is an XML list type that may declare that an MPD conforms to multiple conformance targets.  An MPD developer can establish a new MPD <termRef>conformance target</termRef> identifier in addition to those provided by this and other NIEM specifications.  The identifier represents the new conformance target which should be associated with one or more rules or constraints to which an MPD must conform if it is assigned that identifier.</p>

	<p>For example, an author might use another classification system for IEPDs.  Use of the IEPD conformance target identifier (i.e., <code>http://reference.niem ... /#IEPD</code>) and an identifier representing the author's conformance target would indicate the MPD conforms to both.</p>

</section>



<section id="Version-Numbering-Scheme">
	<title>MPD Version Numbering Scheme (<code>c:mpdVersionID</code>)</title>

	<p>Published MPDs may be periodically revised and updated; therefore, versioning is required to clearly indicate changes have occurred.  In order to maintain some consistency while allowing reasonable flexibility to authors, this specification establishes a simple version numbering scheme that is consistent with most common practices.  This is the same version numbering scheme that is used for NIEM releases.</p>

	<p>An MPD version number is the value of the <code>c:mpdVersionID</code> attribute owned by the <code>c:MPD</code> element within its <termRef>MPD catalog document</termRef>.  A consistent version number syntax is enforced by the MPD catalog schema <ref idref="MPD-Catalog-XSD"/>.  The syntax rule is as follows:</p>

<ruleSection>
	<title>MPD Version Number Syntax</title>
	<rule id="r-mpd-vers-syntax" applicability="WF-MPD" class="Constraint">
		<p>An MPD MUST be assigned a version number that adheres to the regular expression:</p>
	<pre>	version ::= digit+ ('.' digit+)* (status digit+)?
	Where:	
		digit   ::= [0-9]
		status  ::= 'alpha' | 'beta' | 'rc' | 'rev'</pre>

	<p>The meaning of the <code>status</code> values are as follows:</p>
		<ul>
			<li><p><code>alpha</code> indicates early development; changing significantly.</p></li>
			<li><p><code>beta</code> indicates late development; but changing or incomplete.</p></li>
			<li><p><code>rc</code> indicates release candidate; complete but not approved as operational.</p></li>
			<li><p><code>rev</code> indicates very minor revision that does not impact schema validation.</p></li>
		</ul>
	</rule>
</ruleSection>

	<p>The regular expression notation used above is from <ref idref="W3-XML"/> <link href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation">#sec-notation</link>.</p>

	<p>Note that the absence of a <code>status</code> string in the version number indicates that the version has been baselined and published.</p>

	<p>The following examples are valid MPD version numbers:</p>
		<ul>
			<li><p><code>1</code></p></li>
			<li><p><code>1.2</code></p></li>
			<li><p><code>1.3.1.0</code></p></li>
			<li><p><code>1.2alpha13</code></p></li>
			<li><p><code>199.88.15rev6</code></p></li>
		</ul>

	<p>There are two implications in <ref idref="r-mpd-vers-syntax"/>.  The first is that in some cases this version scheme implies and confirms a chronology of releases.  For example, a given product labeled version 2.3 must have been released before the same product labeled 2.3.1.  Therefore, version 2.3.1 is more current than version 2.3.</p>

	<p>However, this is a multi-series version scheme, and chronological relationships exist only within a given series.  So, for example, nothing can be said about a chronological relationship between versions 2.2.4 and 2.3.  This is because version 2.2.4 is in a different series (i.e., 2.2) and could actually have been released after 2.3.  <ref idref="version-sys"/> illustrates a system of versions that uses the numbering scheme of <ref idref="r-mpd-vers-syntax"/>.</p>

<figure id="version-sys">
	<title>Example versioning system</title>
	<image src="img/version-sys.png"/>
</figure>

	<p><ref idref="version-sys"/> illustrates eight different version series.  Within this illustration these are the only sequences that have chronological relationships that can be identified through version numbers.</p>
	<ul>
		<li><p>Series 2 is {2.2, 2.3, 2.4}</p></li>
		<li><p>Series 3 is {3.0, 3.1, 3.2}</p></li>
		<li><p>Series 2.2 is {2.2, 2.2.1, 2.2.2, 2.2.3, 2.2.4}</p></li>
		<li><p>Series 2.3 is {2.3, 2.3.1}</p></li>
		<li><p>Series 2.4 is {2.4, 2.4.1}</p></li>
		<li><p>Series 3.0 is {3.0, 3.0.1, 3.0.2}</p></li>
		<li><p>Series 3.1 is {3.1, 3.1.1}</p></li>
		<li><p>Series 3.2 is {3.2, 3.2.1, 3.2.2}</p></li>
	</ul>

	<p>The second implication of <ref idref="r-mpd-vers-syntax"/> is that pre-releases are easily identified by the strings <code>alpha</code>, <code>beta</code>, and <code>rc</code>.  These strings are simple visible indicators of MPD status or stage of development.</p>

	<p>This specification places no further restrictions or meaning (implied or otherwise) on a version number.  Authors have the option to use integers between dots to indicate degree of compatibility or other relationships between versions as needed.  For example, for a given MPD, the author may declare that if an instance validates to version 4.2.3, then it will also validate to version 4.2.  Such a claim is acceptable.  However, this specification does not imply any such relationships.  Any meaning assigned to version sequence by an authoritative source should be unambiguously documented within the MPD.</p>

	<p>MPD version numbers within a version series do NOT imply compatibility between versions.  Compatibility between or among MPD versions MUST be explicitly stated in documentation.</p>

	<p>Note that an author who updates an existing MPD to a new version may choose the version number based on its previous version number or not, as long as it follows the version number syntax. </p>

	<p>Version number syntax applies to MPDs only; there is no requirement to apply this syntax to artifact versioning.</p>  

</section>



<section id="URI-Schemes">
	<title>URI Schemes</title>

	<p>All MPDs use Uniform Resource Identifiers (URIs) to identify artifacts and other resources.  Several kinds of URIs are employed by MPDs to reference other MPDs, MPD artifacts (internally and externally), conformance targets, documents, and other resources.  For each type of URI used in an MPD catalog document, this section describes its purpose, options, and syntax based on <ref idref="RFC3986-URI"/>.</p>

	<p>The following definitions will be useful to understanding MPD rules defined in later subsections that involve various kinds of URIs.</p>

<definition term="path name">
	<p>A general form of the name of a file or directory that specifies a unique location in a file system.  A path name points to a file system location by following the directory tree hierarchy expressed in a string of characters in which path components, separated by a delimiting character, represent each subdirectory.  If a path name terminates in a file name, then it specifies the location of that file (Paraphrased from <link href="http://en.wikipedia.org/wiki/Pathname"><em>Wikipedia: Path (computing)</em>).</link></p>
</definition>

<definition term="resolve URI">
	<p>A function (or action) that takes a URI string of the form <code>xs:anyURI</code> and returns the resource it identifies.  If the URI is local (i.e., within an MPD) and the resource does not exist, then this function fails.  If a URI is remote or of unknown location (e.g., a URN), then this function (or action) may require human assistance to determine if a resource associated with the URI exists (pass) or not (fail).</p>
</definition>



<section id="mpdURI">
	<title>MPD URI Scheme (<code>mpdURI</code>)</title>

	<p>To facilitate MPD sharing and reuse, the assignment of a URI (Uniform Resource Identifier) to an MPD is essential.  This is enforced by the MPD catalog schema document <ref idref="MPD-Catalog-XSD"/>.  It is also important to ensure that an MPD URI is absolute.</p>

<ruleSection><title>MPD URI Is Absolute</title>
	<rule id="r-mpduri" applicability="WF-MPD" class="Constraint">
		<p>In an MPD catalog document, the value of a <code>c:mpdURI</code> attribute of type <code>xs:anyURI</code> MUST match the production &lt;absolute-URI&gt; as defined by <ref idref="RFC3986-URI"/>, <a href="http://tools.ietf.org/html/rfc3986#section-4.3"> <char name="sect"/>4.3, <q>Absolute URI</q></a>.</p>
	</rule>
</ruleSection>

	<p>This rule implies that a URI assigned to an MPD must be valid.  Furthermore, the entity (person or organization) assigning the MPD URI either (1) <em>is</em> the registrant of the domain name or namespace identifier, or (2) <em>has</em> authority from the registrant to assign this URI.</p>

	<p>Examples of valid MPD URIs:</p>
	<ul>
		<li><p><code>http://example.gov/niem-iepd/prescription-monitoring-info-exchange/3.0/</code></p></li>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0/</code></p></li>
		<li><p><code>http://release.niem.gov/niem/niem-core/3.0/</code></p></li>
		<li><p><code>http://niem.gov/niem/domains/cyfs/2.1/1</code></p></li>
	</ul>

	<p>This specification does not mandate that basic MPD catalog metadata be designed into an MPD URI.  However, including such can obviously provide convenient visual recognition.  That said, an author should ensure any metadata embedded in the URI accurately reflect the MPD catalog metadata (in particular, the values of <code>c:mpdURI, c:mpdName, c:mpdVersionID, </code>and<code> c:mpdClassURIList</code> defined in the MPD catalog document).</p>

</section>



<section id="externalURI">
	<title>URI Scheme for MPD Artifacts (<code>externalURI</code>)</title>

	<p>Artifacts in other MPDs can be referenced from within an MPD to identify equivalence (signify reuse, one aspect of lineage).  To support this concept, the following MPD URI rules are necessary:</p>

<ruleSection><title>MPD URI Supports Fragment</title>
	<rule id="r-uri-frag" applicability="WF-MPD" class="Constraint">
		<p>A valid MPD URI MUST support the inclusion of a <em>fragment identifier</em> (as a suffix) <ref idref="RFC3986-URI"/>.</p>
	</rule>
	<p>This rule ensures that an MPD can always uniquely identify and refer to each artifact within another MPD.  This MPD specification follows <ref idref="RFC3986-URI"/> which forbids a URI to contain more than a single fragment identifier.  To construct an MPD artifact URI, add a fragment (that locally identifies the artifact) to an MPD URI, and therefore, an MPD URI cannot already contain a fragment.</p>
</ruleSection>

<ruleSection><title>MPD URI Has No Fragment</title>
	<rule id="r-uri-nofrag" applicability="WF-MPD" class="Constraint">
		<p>A valid MPD URI MUST NOT contain a <em>fragment identifier</em> <ref idref="RFC3986-URI"/>.</p>
	</rule>
	<p>Rationale:  If a URI for an MPD (do NOT confuse this with a URI for an MPD artifact) already contains a fragment identifier, then that URI cannot be employed as an MPD artifact URI, because <ref idref="RFC3986-URI"/> only allows a single fragment identifier.</p>
</ruleSection>

	<p>By the following rule, each file artifact or artifact set is uniquely identified by its <termRef>path name</termRef> relative to the <termRef>MPD root directory</termRef>.</p>

<ruleSection><title>MPD Artifact URI Syntax</title>
	<rule id="r-mpd-uri-syntax" applicability="WF-MPD" class="Interpretation">
		<p>Within an MPD a URI reference to an artifact in another external MPD (i.e., an MPD artifact URI) is the concatenation of:</p>
		<ul>
			<li><p>The URI of the MPD that contains the artifact.</p></li>
			<li><p>A pound-sign character ("#" <char name="mdash"/> also known as a hashtag character).</p></li>
			<li><p>An identifier that is the artifact's locally unique <termRef>path name</termRef> relative to the <termRef>MPD root directory</termRef>.</p></li>
		</ul>
	</rule>
</ruleSection>

	<p>An artifact set has a locally unique <termRef>path name</termRef>.  An artifact has a path name that terminates with its file name which is unique to the directory it resides in.</p>

	<p>The following are examples of valid MPD artifact URIs:</p>
	<ul>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0/#subset/niem-core.xsd</code> (a file artifact)</p></li>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0beta2/#extension/ext-1.1.xsd</code> (a file artifact)</p></li>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0/#application-info</code> (a set artifact)</p></li>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0/#iep-sample/query</code> (a set artifact)</p></li>
	</ul>

	<p><ref idref="RFC2141-URN-Syntax"/> appears to preclude the use of a Uniform Resource Name (URN) as an MPD URI.  URN syntax violates <ref idref="r-uri-frag"/> because it does not support fragment identifiers.</p>

	<p>Artifact URIs are used as values for the <code>c:externalURI</code> attribute in the MPD catalog XML document to declare equivalence relationships between artifacts (See <ref idref="MPD-Catalog-XSD"/>).  A simple scenario follows.  Consider two different IEPDs with the following URIs:</p>
		<ol>
			<li><p><code>http://example.gov/niem-iepd/pmix/3.0/</code></p></li>
			<li><p><code>http://www.abc.org/niem-iepd/order/2.1.2rev3/</code></p></li>
		</ol>
		
	<p>The author of IEPD (2) has decided to reuse the <code>base-xsd/extension/req1.xsd</code> artifact in IEPD (1) as-is.  He/she can optionally create an MPD catalog <code>c:ExtensionSchemaDocument</code> entry for this artifact (assuming it is an extension schema document), and add the attribute:</p> 
		<blockquote>
			<p><code>c:externalURI="http://example.org/niem-iepd/pmix/3.0/#base-xsd/extension/req1.xsd"</code></p>
		</blockquote>

	<p>Additional <code>c:externalURI</code> attributes may be added to this entry if the author knows of other uses of this same artifact in other MPDs and wishes to acknowledge them.</p>

	<p>A URI does not have the same meaning as namespace.  NIEM namespaces cannot be used as MPD artifact URIs.  Recall that the target namespace used in a subset schema document derived from a NIEM release schema document is identical to the target namespace of that release schema document.  Furthermore, an IEPD or an EIEM may contain multiple subsets.  NIEM namespaces are not necessarily unique to an artifact within an MPD.  Later, <ref idref="XML-Catalogs"/> will describe the use of <ref idref="OASIS-XML-Catalogs"/> to correlate namespaces to local URIs in order to <termRef term="resolve URI">resolve</termRef> them to local resources.</p>

	<p>The value of <code>c:externalURI</code> is an identifier for a remote resource that is not necessarily accessible online.  For this reason, even though such URIs should be correct (i.e. a resource with that URI should exist), their verification is not within the scope of this specification.</p>

</section>



<section id="pathURI">
	<title>URI Scheme for Local MPD Artifacts (<qName>c:pathURI</qName>)</title>

	<p>An MPD uses the file directory system of path names and file names to identify local artifacts and artifact sets.  All local URIs are relative to the location of the <termRef>MPD catalog document</termRef>, and therefore, they are also relative to the <termRef>MPD root directory</termRef> since the MPD catalog document resides in the MPD root directory.</p>

	<p>In general, every value of attribute <qName>c:pathURI</qName> in an MPD catalog document will be a relative <termRef>path name</termRef> to a directory (i.e., an artifact set), or to a file (i.e., an artifact).  The following are typical examples of each:</p>
		<blockquote>
			<p>Artifact Set: <code>c:pathURI="base-xsd/niem/niem-core/3.0"</code></p>	
			<p>Artifact: <char name="nbsp"/><char name="nbsp"/><char name="nbsp"/><char name="nbsp"/>
					 <code>c:pathURI="base-xsd/niem/niem-core/3.0/niem-core.xsd"</code></p>
		</blockquote>

	<p>Note that per <ref idref="uri-syntax"/> and <ref idref="uri-summary"/> a local URI may contain an optional fragment.  Although <qName>c:pathURI</qName> has no use for a URI with a fragment, MPD documentation artifacts could reference a subpart within a local artifact by using a relative URI with a fragment.</p>

	<p>Despite its simplicity, <qName>c:pathURI</qName> comes with over a dozen rules that help to define a <termRef>well-formed MPD</termRef>.  These rules ensure that every <qName>c:pathURI</qName> attribute value in a well-formed MPD resolves to a correct local resource:</p>

	<ruleSection><title><qName>c:pathURI</qName> Resolves to a Resource</title>
		<rule id="wfm2" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute MUST <termRef term="resolve URI">resolve</termRef> to a resource.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:XMLCatalog</qName></title>
		<rule id="wfm3" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:XMLCatalog</qName> element MUST <termRef term="resolve URI">resolve</termRef> to an <termRef>XML catalog document</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:MPDChangeLog</qName></title>
		<rule id="wfm4" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:MPDChangeLog</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a <termRef>change log</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:ReadMe</qName></title>
		<rule id="wfm5" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:ReadMe</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a <termRef>readme artifact</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:IEPSampleXMLDocument</qName></title>
		<rule id="wfm6" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:IEPSampleXMLDocument</qName> element MUST <termRef term="resolve URI">resolve</termRef> to an <termRef>XML document</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:BusinessRulesArtifact</qName></title>
		<rule id="wfm7" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:BusinessRulesArtifact</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a <termRef>business rule schema</termRef> or <termRef>business rules</termRef> artifact.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:ExternalSchemaDocument</qName></title>
		<rule id="wfm8" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:ExternalSchemaDocument</qName> element MUST <termRef term="resolve URI">resolve</termRef> to an <termRef>XML schema document</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:ReferenceSchemaDocument</qName></title>
		<rule id="wfm9" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:ReferenceSchemaDocument</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a NIEM <termRef>reference schema document</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:ExtensionSchemaDocument</qName></title>
		<rule id="wfm10" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:ExtensionSchemaDocument</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a NIEM <termRef>extension schema document</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:SubsetSchemaDocument</qName></title>
		<rule id="wfm11" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:SubsetSchemaDocument</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a NIEM <termRef>subset schema document</termRef>.</p>
		</rule>
		<p>Note: It is not possible for a Schematron rule to verify that the URI resolves to a NIEM subset schema document, only that it is a schema document.</p>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:Wantlist</qName></title>
		<rule id="wfm12" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:Wantlist</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a <termRef>NIEM wantlist</termRef> XML document.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:SchematronSchema</qName></title>
		<rule id="wfm13" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:SchematronSchema</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a <termRef>Schematron schema</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:RelaxNGSchema</qName></title>
		<rule id="wfm14" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:RelaxNGSchema</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a <termRef>RelaxNG schema</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:SchemaDocumentSet</qName></title>
		<rule id="wfm15" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:SchemaDocumentSet</qName> element MUST <termRef term="resolve URI">resolve</termRef> to an <termRef>XML schema document</termRef> set.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:ConstraintSchemaDocumentSet</qName></title>
		<rule id="wfm16" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:ConstraintSchemaDocumentSet</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a NIEM <termRef>constraint schema document set</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:ReferenceSchemaDocumentSet</qName></title>
		<rule id="wfm17" applicability="WF-MPD" class="Constraint">
			<p>Within the <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:ReferenceSchemaDocumentSet</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a NIEM <termRef>reference schema document set</termRef>.</p>
		</rule>
	</ruleSection>

	<ruleSection><title><qName>c:pathURI</qName> for <qName>c:RequiredFile</qName></title>
		<rule id="wfm18" applicability="WF-MPD" class="Constraint">
			<p>Within an <termRef>MPD catalog document</termRef> the value of a <qName>c:pathURI</qName> attribute owned by a <qName>c:RequiredFile</qName> element MUST <termRef term="resolve URI">resolve</termRef> to a resource.</p>
		</rule>
	</ruleSection>

	</section>



<section id="MPD-Relationships">
	<title>MPD Relationships and Lineage (<qName>c:resourceURI</qName>)</title>

	<p>An important business requirement is transparency of MPD lineage.  Data lineage is also referred to as <em>data provenance</em>, how data are derived or where it came from.  There are two basic views of data provenance:  (1) as data annotations; and (2) as a graph of data relationships <ref idref="Principles-of-Data-Integration"/>, Chapter 14 <q>Data Provenance</q>.</p>

	<p>The MPD Specification adapts the latter view of data provenance to enable a simple framework for recording MPD lineage within an MPD catalog.  The URI scheme for MPDs and their artifacts and sets enables a graph of relationships.  An MPD may internally identify and record relationships to other MPDs, including families, versions, adaptations, specializations, generalizations, etc.</p>

	<p>The next few paragraphs require that you understand URIs for MPDs and MPD artifacts.  See <ref idref="mpdURI"/> and <ref idref="externalURI"/>.</p>

	<p>The MPD catalog provides a <code>c:Relationship</code> element with two attributes (<code>c:resourceURI</code> and <code>c:relationshipCode</code>) and an optional element (<code>nc:DescriptionText</code>) to identify ancestry and other relationships to other MPDs.  There are many ways that one MPD may relate to another.  This makes it difficult to specify a fixed set of values that can objectively define an exact relationship between a pair of MPDs.  Therefore, the optional <code>nc:DescriptionText</code> element is provided to further explain the nature of any of the eight <code>c:relationshipCode</code> values available.  The set is:  {<code>version_of</code>, <code>specializes</code>, <code>generalizes</code>, <code>deprecates</code>, <code>supersedes</code>, <code>adapts</code>, <code>conforms_to</code>, <code>updates</code>}.  In some cases, the value of <code>c:relationshipCode</code> may be generic enough to require a more detailed explanation in <code>nc:DescriptionText</code> (for example, if its value is <code>adapts</code>).</p>

	<p>As was described in <ref idref="externalURI"/>, the MPD catalog also enables an author to record more fine-grained ancestry between MPDs using the <code>c:externalURI</code> attribute.  This attribute records an explicit equivalence relationship between artifacts reused across MPDs.</p>

	<p>Some MPDs are designed for more extensive reuse than others.  For example, families of IEPDs are expected to reuse a given EIEM.  In such cases, the MPD catalogs for these IEPDs and the corresponding EIEM may overlap in or duplicate a large number of metadata and references.  This is expected.  The MPD catalog can contain many references to and semantics for artifacts, artifact sets, and MPDs.  Correct and consistent use of these references and semantics will create networks of related MPDs so that tools can locate, parse, and process them as needed and when available in shared repositories.</p>

	<p>Note that a <code>c:resourceURI</code> attribute is used to identify a remote resource that is related to the MPD whose catalog declares it.  Therefore, the MPD is not required to contain this resource.  As in the case of <code>c:externalURI</code>, the value of a <code>c:resourceURI</code> should be correct (i.e., a resource with that URI should exist).  However, verification of this is considered outside the scope of this specfication.</p>

</section>



<section id="Conform-Tgt-URI">
	<title>Conformance Target URI (conformanceTargetURI)</title>

	<p>A declared <code>c:IEPConformanceTarget</code> also has a URI.  </p>

</section>



<section id="Resolve-URI-W-Fragment">
	<title>Resolving an MPD URI with a Fragment</title>

	<ruleSection><title>Resolve MPD URI with Fragment</title>
		<rule id="r-resolve-uri" applicability="WF-MPD" class="Interpretation">
			<p>Given an absolute MPD URI <ref idref="RFC3986-URI"/>, <a href="http://tools.ietf.org/html/rfc3986#section-4.3"> <char name="sect"/>4.3, <q>Absolute URI</q></a> with a fragment, resolve this URI as follows:</p>
			<ol>
				<li><p>Resolve the base URI (per <ref idref="RFC3986-URI"/>) to retrieve the resource MPD.  If the resource MPD does not exist, then fail (existence error).</p></li>
				<li><p>Apply the fragment (without "#") to the MPD resource:</p>
					<ol>
						<li><p>Locate a <code>structures:id</code> attribute value that matches the fragment string.  If more than one exist, then fail (ambiguity error).  If none exists, then continue.</p></li>
						<li><p>Locate a <termRef>path name</termRef> (for a directory or file) that matches the fragment string.  If more than one exist, then fail (ambiguity error).  If none exists, then fail (existence error).</p></li>
					</ol>
				</li>	
				<li><p>Return the element, directory, or file found.</p></li>
			</ol>
		</rule>
	</ruleSection>

	<p>In the presence of NIEM <termRef term="reference element">reference elements</termRef> URI resolution may require an additional step to account for indirect references.  Be sure to review <ref idref="URI-Resolution-Ref-Elements"/> if this case applies.</p>

</section>



<section id="URI-Resolution-Ref-Elements">
	<title>URI Resolution Involving Reference Elements</title>
	
	<p>A NIEM element can indirectly reference its content rather than carry or encapsulate it.  So, a NIEM element of type <code>xs:anyURI</code> may not contain a URI, but instead refer to another element that contains it for both elements.  Under some circumstances, this might impact URI resolution described in <ref idref="r-resolve-uri"/>.</p> 

	<p><ref idref="NIEM-NDR"/>, <a href="http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0alpha9/NIEM-NDR-3.0alpha9-2014-04-02.html#definition_reference_element"> <char name="sect"/>12.3, <q>Reference Elements</q></a> defines a NIEM <termRef>reference element</termRef> as follows:</p>

	<definition term="reference element">
		<p>A reference element is an element information item that has an attribute <code>structures:ref</code>.  A reference element refers to its value by reference, instead of carrying it as content.</p>
	</definition>

	<p>Thus, the <code>structures:ref</code> attribute value refers to another element that carries the content (for both elements) and owns a <code>structures:id</code> attribute with a value equal to that of <code>structures:ref</code>.</p>

	<p>The <termRef>MPD catalog document</termRef> reuses NIEM Core and so it conforms to NIEM.  Therefore, one or more NIEM <termRef term="reference element">reference elements</termRef> from various locations may refer to a single content bearing instance of the same element (with a unique <code>structures:id</code>).  The definition of <termRef>resolve URI</termRef> and the URI-related rules in this section assume content bearing elements.  If a URI resolution rule applies to an element in <termRef>reference element</termRef> form, then URI resolution will be applied at the site of the content-bearing element form it refers to (where the URI will be).</p>

</section>



<section id="XML-Catalog-URI">
	<title>XML Catalog URI</title>

	<p>An <termRef>XML catalog document</termRef> conforms to <ref idref="OASIS-XML-Catalogs"/>.  For the purpose of MPD validation, the following rules ensure that an XML catalog document contains URIs that correctly resolve.</p>

	<ruleSection><title>XML Catalog <code>uri</code> Value Resolves to Resource</title>
		<rule id="xc1" applicability="XML-Cat" class="Constraint">
			<p>Within an <termRef>XML catalog document</termRef> the value of a <code>uri</code> attribute owned by a <code>er:uri</code> element MUST <termRef term="resolve URI">resolve</termRef> to a resource.</p>
			</rule>
	</ruleSection>

	<ruleSection><title>XML Catalog <code>uri</code> Value Resolves to Resource with Correct Target Namespace</title>
		<rule id="xc2" applicability="XML-Cat" class="Constraint">
			<p>Within an <termRef>XML catalog document</termRef>, given an <termRef>XML schema document</termRef> resolved by the value of a <code>uri</code> attribute owned by a <code>er:uri</code> element, the <termRef>XML schema document</termRef> target namespace MUST equal the value of the <code>name</code> (a namespace string) attribute owned by the <code>er:uri</code> element.</p> 
		</rule>
	</ruleSection>

</section>



<section id="URI-Summary">
	<title>Summary of MPD URIs</title>

			<p>This section summarizes the various URIs used in the MPD catalog document.  It also presents a summary of <ref idref="RFC3986-URI"/>.  See that reference for explanation and details of URI syntax.</p>

		<table id="uri-syntax">
			<title>Summary of<link href="http://tools.ietf.org/html/rfc3986"> <q>RFC 3986 URI: Generic Syntax</q></link>.</title>
			<theadr>
			    <th>Id</th>
			    <th>URI Syntax</th>
			    <th>Meaning</th>
			    <th>Examples</th>
			</theadr>
			<tr>
			    <td>1</td>
			    <td>&lt;absolute-URI&gt;</td>
			    <td>absolute URI only (no fragment)</td>
			    <td><code>http://nlets.org/rap/3.1/</code></td>
			</tr>
			<tr>
			    <td>2</td>
			    <td>&lt;URI&gt;</td>
			    <td>absolute URI and optional fragment</td>
			    <td><code>http://nlets.org/rap/3.1/#rap-sheet2</code></td>
			</tr>
			<tr>
			    <td>3</td>
			    <td>&lt;relative-reference&gt;</td>
			    <td>optional relative part and optional fragment</td>
			    <td><code>/iep-sample/query.xml </code>or<code> #A3 </code>or<code> /iep-sample/query.xml#A3</code></td>
			</tr>
			<tr>
			    <td>4</td>
			    <td>&lt;URI-reference&gt;</td>
			    <td>&lt;URI&gt; or &lt;relative-reference&gt;</td>
			    <td>any example in 1, 2, or 3 above</td>
			</tr>
		</table>

		<p> <char name="nbsp"/> </p>

		<table id="uri-summary">
			<title>Summary of MPD URI attributes</title>
			<theadr>
			    <th>MPD Attribute</th>
			    <th>URI Syntax (per table above)</th>
			</theadr>
			<tr>
			    <td>mpdURI</td>
			    <td>&lt;absolute-URI&gt;</td>
			</tr>
			<tr>
			    <td>pathURI</td>
			    <td>&lt;relative-reference&gt; (relative to MPD catalog document)</td>
			</tr>
			<tr>
			    <td>externalURI</td>
			    <td>&lt;URI&gt;</td>
			</tr>
			<tr>
			    <td>resourceURI</td>
			    <td>&lt;URI&gt;</td>
			    <td></td>
			</tr>
			<tr>
			    <td>conformanceTargetURI</td>
			    <td>&lt;URI-reference&gt;</td>
			    <td></td>
			</tr>
		</table>

		<p> <char name="nbsp"/> </p>

		</section>

	</section>
	</section>



<section id="Change-Log">
	<title>Change Log</title>

	<p>A version identifier is a useful and simple visual indicator that an MPD has changed.  However, a <em>change log</em> is needed to understand the volume, complexity, and possible impact of changes.</p>

	<definition term="change log">
		<p>An artifact that describes the changes applied to an MPD since its previous version.</p>
	</definition>

<ruleSection>
	<title>An MPD Requires a <code>changelog.*</code> Artifact</title>
		<rule id="r1-mpd-ref-changelog" applicability="WF-MPD" class="Constraint">
			<p>An MPD with a <code>c:mpdClassURIList</code> attribute value from the set <code>{rel, cu, du}</code> MUST contain a <code>changelog.xml</code> artifact in its <termRef>MPD root directory</termRef>.</p>
		</rule>
</ruleSection>

<ruleSection>
	<title>Release and Core/Domain Update <code>changelog.xml</code> Valid to <code>mpd-changelog-1.0.xsd</code></title>
	<rule id="r1-changelog-ref" applicability="MPD-ChLg" class="Constraint">
			<p>A <code>changelog.xml</code> artifact for an MPD with a <code>c:mpdClassURIList</code> attribute value from the set <code>{rel, cu, du}</code> MUST validate with the NIEM change log schemas <code>mpd-changelog-1.0.xsd</code> and <code>niem-model-1.0.xsd</code>.</p>
	</rule>
</ruleSection>



<section id="Change-Log-Releases-Core-Domain-Updates">
	<title>Change Log for Releases and Core/Domain Updates</title>

	<p>Once published, a NIEM release always exists.  This ensures that IEPDs and EIEMs built from a given release will always be usable, and may be updated to a new NIEM release only when convenient or absolutely necessary to take advantage of new or modified data components.  Though not encouraged, nothing prohibits a developer from building an IEPD based on a NIEM release that is older than the most current version.  There may be potential disadvantages related to interoperability levels achievable with others developing to the latest release.  Nonetheless, an older version might meet the business needs of a particular organization quite well.</p>

	<p>In spite of this built-in stability, the NIEM architecture is designed to evolve as requirements change.  New versions of reference schema document sets such as NIEM releases, core updates, and domain updates can have significant impacts on future IEPDs and EIEMs.  Developers must understand in detail how changes will affect their IEPD and EIEM products and the tools used to build them.  To work effectively, tools for domain content development, impact analysis, migration between releases, etc. must be able to digest formal change logs.  A formal change log is also essential to efficiently process and integrate new and changed content into NIEM for new releases, and to simultaneously maintain multiple versions of NIEM for users.  All of the foregoing reasons dictate that NIEM require a normative change log for reference schema document sets.</p>

<ruleSection>
	<title>Releases and Core/Domain Updates Require <code>changelog.xml</code></title>
		<rule id="r2-mpd-ref-changelog" applicability="WF-MPD" class="Constraint">
			<p>An MPD with a <code>c:mpdClassURIList</code> attribute value from the set <code>{rel, cu, du}</code> MUST contain a <code>changelog.xml</code> artifact in its <termRef>MPD root directory</termRef>.</p>
		</rule>
</ruleSection>

<ruleSection>
	<title>Release and Core/Domain Update <code>changelog.xml</code> Valid to <code>mpd-changelog-1.0.xsd</code></title>
	<rule id="r2-changelog-ref" applicability="MPD-ChLg" class="Constraint">
			<p>A <code>changelog.xml</code> artifact for an MPD with a <code>c:mpdClassURIList</code> attribute value from the set <code>{rel, cu, du}</code> MUST validate with the NIEM change log schemas <code>mpd-changelog-1.0.xsd</code> and <code>niem-model-1.0.xsd</code>.</p>
	</rule>
</ruleSection>

	<p>The most current versions of the resources referenced in the rule above are available here:</p>
		<blockquote>
			<p><link>http://reference.niem.gov/niem/resource/mpd/changelog/</link></p>
			<p><link>http://reference.niem.gov/niem/resource/model/</link></p>
		</blockquote>

	<p>Since the schemas are the authority for a release or update and because almost all tool support depends on the schemas, the change log is only designed to audit transactional changes to the reference schema documents.  There is no provision for logging changes to support documentation or other non-schema artifacts.  Non-schema changes are generally handled non-normatively in the form of release notes.</p>

</section>


<section id="Change-Log-IEPD-EIEM">
	<title>Change Log for IEPDs and EIEMs</title>

	<p>IEPD and EIEM change log requirements are less strict and are not required to conform to the naming and XML schema specifications in <ref idref="r1-changelog-ref"/>.  However, a change log is still required.</p>

<ruleSection>
	<title>IEPD and EIEM Have Change Log in Root Directory</title>
		<rule id="r-mpd-changelog-iepd" applicability="N-IEPD N-EIEM" class="Constraint">
			<p>An MPD with a <code>c:mpdClassURIList</code> attribute value from the set <code>{iepd, eiem}</code> MUST contain a change log artifact in its <termRef>MPD root directory</termRef></p>
		</rule>
</ruleSection>

	<p>The format of an IEPD or EIEM change log is left to the discretion of the author.  The use of <code>mpd-changelog-1.0.xsd</code> for IEPD and EIEM schemas is not required.  Relaxing the change log format encourages and facilitates easier and more rapid development.  IEPDs and EIEMs are developed by a variety of NIEM domains, organizations, and users; and they are intended to specify implementable exchanges.  As a result, IEPDs and EIEMs may contain both documentation artifacts and machine readable application artifacts in a large variety of formats.  A consistent standard change log would be very difficult to specify.</p>

</section>
</section>



<section id="ReadMe-Artifact">
	<title>ReadMe Artifact</title>

	<p>This section is applicable to IEPDs and EIEMs.</p>

	<definition term="readme artifact">
		<p>An informal documentation artifact contained in an IEPD or EIEM that serves as the initial general source of human readable descriptive or instructional information.  A <em>readme</em> artifact or file (formerly known as a <em>master document</em>) may index or reference other more specific documentation or other explanatory materials within the MPD.</p>
	</definition>

	<p>A <code>readme</code> artifact is only required for IEPDs and EIEMs since these MPDs are allowed the greatest design flexibility, can be developed and implemented different ways, and are not centrally managed.  On the other hand, releases and domain updates have restrictive rules, standard documentation for using them, and central management.</p>

<ruleSection>
	<title>IEPD and EIEM Have <code>readme.*</code> in Root Directory</title>
		<rule id="r-mpd-readme" applicability="N-IEPD N-EIEM" class="Constraint">
			<p>An MPD with a <code>c:mpdClassURIList</code> attribute value from the set <code>{iepd, eiem}</code> MUST contain a <code>readme.*</code> file artifact in its <termRef>MPD root directory</termRef>.</p>
		</rule>
</ruleSection>

		<p>The readme artifact may replicate some of the metadata in the MPD catalog.  However, the MPD catalog is intentionally designed to be efficient, easy to parse, and minimal.  It is intended for search, discovery, registration, and Web page generation, and not to support various types of detailed technical prose often required for human understanding.</p>

		<p>The primary purposes of the <termRef>readme artifact</termRef> include:</p>
			<ul>
			<li><p>To help facilitate understanding and reuse of IEPDs and EIEMs.</p></li>
			<li><p>To ensure that fundamental and detailed business-level information about an IEPD or EIEM are documented for human understanding.</p></li>
			<li><p>To ensure the IEPD or EIEM author has considered and conveys such fundamental information.</p></li>
			<li><p>To provide an initial source within an IEPD or EIEM for human consumable documentation and/or references to other business or technical documentation needed for understanding.</p></li>
			</ul>

			<p>The readme artifact is not intended to be the only source of written documentation for an MPD (though it can be).  It is expected to be the initial resource that references and coordinates all others whether physically present in the MPD or linked by reference.  Many organizations have their own customized formats and operating procedures for documenting their work and products.  This specification does not attempt to standardize readme format or layout.  Only the file name and relative path within the MPD archive are strictly specified.  The following section will generally describe minimal content that should be in the readme artifact.  This guidance is non-normative, so adherence is a subjective judgment by the author.
	</p>



	<section id="Readme-Content">
		<title>Readme Content</title>

		<p>This section is non-normative and applies to IEPDs and EIEMs.</p>

		<p>This section is neither a cookbook nor a normative specification for a readme artifact.  It simply suggests typical topics that a readme artifact should or might address, and provides some non-normative guidance.</p>

		<p>The readme file should help another user or developer to understand the content and use of an IEPD or EIEM, as well as determine potential for reuse or adaptation.  It should describe what implementers need to understand and what the author considers is important to understanding an IEPD or EIEM.  There is no limit or constraint on its content.</p>

		<p>At a minimum, the readme file should contain several fundamental elements of information about the MPD:</p>
		<ul>
		<li><p>Purpose of this MPD.</p></li>
		<li><p>Scope of its deployment, usage, and information content.</p></li>
		<li><p>Business value and rationale for developing it.</p></li>
		<li><p>Type of information it is intended to exchange (in business terms).</p></li>
		<li><p>Identification of senders and receivers (or the types of senders and receivers).</p></li>
		<li><p>Typical interactions between senders, receivers, and systems.</p></li>
		<li><p>References to other documentation within the MPD, and links to external documents that may be needed to understand and implement it.</p></li>
		</ul>

		<p>Many document formats (e.g., HTML, PDF) can display hot links to local files within the MPD archive as well as URLs to files on the Internet.  Employing such a format is highly recommended but not mandatory.</p> 

<ruleSection>
	<title>Readme Describes Purpose, Scope, Business Value, etc.</title>
		<rule id="r-mpd-readme-purpose" applicability="WF-MPD" class="Interpretation">
			<p>A readme artifact SHOULD (at a minimum) describe the MPD purpose, scope, business value, exchange information, typical senders/receivers, interactions, and references to other documentation.</p>
		</rule>
</ruleSection>

		<p>MPD documentation types and formats will vary with the methodologies and tools used to develop them.  Most of this documentation will likely be typical of that generated for data-oriented software projects.  Some documentation may only require sections in the <termRef>readme artifact</termRef>.  Other documentation may be more suitable as separate artifacts that are referenced and explained by a section in the readme artifact (such as diagrams, large tables, data dictionaries, test results/reports, etc.).  The following are some common examples of sections in or separate artifacts associated with the readme artifact:</p>

	<ul>
		<li><p>Executive summary (especially for a lengthy readme artifact></p></li>
	<li><p>Use cases</p></li>
	<li><p>Business processes</p></li>
	<li><p>Business requirements</p></li>
	<li><p>Business rules</p></li>
	<li><p>Metadata security considerations</p></li>
	<li><p>Domain model design specifications and documentation and/or diagrams</p></li>
	<li><p>Data dictionary</p></li>
	<li><p>Testing and conformance</p></li>
	<li><p>Development tools and methodologies used</p></li>
	<li><p>Implementation guidance (particularly important for a complex IEPD with multiple subsets or IEP root elements)</p></li>
	<li><p>Security considerations</p></li>
	<li><p>Privacy considerations (e.g., Personal Identifiable Information)</p></li>
	<li><p>Types of implementations</p></li>
	<li><p>If an IEPD employs multiple subsets:</p>
	<ul>
		<li><p>When, where, and how these are used</p></li>
		<li><p>How these are coordinated in the implementation</p></li>
		<li><p>Caveats regarding duplicate data components (which can occur with multiple subsets)</p></li>
	</ul></li>
	<li><p>If an IEPD employs multiple IEP conformance targets:</p>
	<ul>
		<li><p>Purpose of each and when it should be used</p></li>			
		<li><p>How these are coordinated during the runtime preparation and transmission of IEPs</p></li>
	</ul></li>
</ul>

</section>
</section>



<section id="XML-Catalogs">
	<title>XML Catalogs</title>

	<p>This section is applicable to all MPDs.  However, it is of particular importance to IEPDs and IEP validation (to be covered in more detail in <ref idref="Information-Exchange-Packages"/>.</p> 

	<p><ref idref="OASIS-XML-Catalogs"/> are XML documents used in MPDs to <termRef term="resolve URI">resolve</termRef> XML schema document target namespaces to local URIs.  This is especially useful when assembling an XML schema from an XML schema document set.  Some validators (e.g., <link href="http://xerces.apache.org/xerces2-j/faq-xcatalogs.html">Xerces</link>) and other tools utilize <em>XML catalogs</em> for this purpose.</p>

	<definition term="XML catalog document">
		<p>An XML document defined by the semantics of <ref idref="OASIS-XML-Catalogs"/>.</p>
	</definition>

	<p>The <ref idref="NIEM-SSGT"/> (for NIEM 3.0) automatically adds an <code>xml-catalog.xml</code> artifact to each schema document subset it generates.  The NIEM 3.0 release also includes such an artifact.  These <termRef term="XML catalog document">XML catalog documents</termRef> are provided for user convenience in the case these schema document sets must be assembled into a schema.</p>

	<p>IEPD authors must employ <termRef term="XML catalog document">XML catalog documents</termRef> within IEPDs to facilitate validation of IEPs.</p>

	<p>Assembling a schema or building an <termRef>XML catalog document</termRef> from the XML schema documents of non-conformant external standards that contain <code>xs:include</code> statements can be problematic.  Be aware that if an xml-catalog (resulting from processing a set of external XML schema documents) contains any two <code>er:uri</code> element entries with identical namespaces, then that xml-catalog cannot be used for XML validation.  It will have to be modified to ensure that each namespace resolves to one and only one unique <termRef>XML catalog document</termRef> <code>uri</code> attribute value.</p>

	<p>In order to support <termRef>XML schema assembly</termRef> for the purpose of <termRef>XML schema validation</termRef>, the following rule requires that the namespaces of all XML schema documents used within an IEPD <termRef term="resolve URI">resolve</termRef> to a locally-unique artifact:</p>

<ruleSection>
	<title>IEPD and EIEM Resolve Namespaces to URIs With XML Catalog Documents</title>
	<rule id="r-xml-cat-resolution" applicability="WF-MPD" class="Constraint">
		<p>An MPD with a <code>c:mpdClassURIList</code> attribute value from the set <code>{iepd, eiem}</code> MUST <termRef term="resolve URI">resolve</termRef> each namespace it uses to a URI through one or more <termRef term="XML catalog document">XML catalog documents</termRef>.</p>
	</rule>
</ruleSection>

<p>This rule implies that <code>er:nextCatalog</code> elements may be used within <termRef term="XML catalog document">XML catalog documents</termRef> to connect them and control their parsing sequence.  An IEPD must contain at least one <termRef>XML catalog document</termRef> because it is the only MPD that can specify an <termRef>Information Exchange Package</termRef> (IEP) and provide validation instructions that would require schema assembly from XML schema documents.  <ref idref="Information-Exchange-Packages"/> provides more specifics about using <termRef term="XML catalog document">XML catalog documents</termRef> within IEPDs.</p>

	<p>The practical reality of <termRef>XML schema assembly</termRef> is that the process is based on several methods for identifying the correct <termRef term="XML schema document">XML schema documents</termRef>, and these methods may be applied in no particular order.  For the purpose of this MPD Specification, the first and primary method for MPDs is the use of XML catalogs, even though NIEM schema documents often have valid URIs in <code>schemaLocation</code> attributes.</p>

</section>



<section id="Information-Exchange-Packages">
	<title>Information Exchange Packages</title>

	<p>This section only applies to IEPDs.  An IEPD is the only MPD that can define an <termRef term="Information Exchange Package">IEP</termRef>.  It does this by explicitly declaring one or more <em>IEP conformance targets</em> within its <termRef>MPD catalog document</termRef>.</p>

	<definition term="IEP conformance target" id="iep-conformance-target">
		<p>A class or category of IEPs which has a set of one or more validity constraints and a unique identifier.  Every IEP is an instance of one or more IEP conformance targets.</p>
	</definition>

	<p>This definition requires that an IEP conformance target be assigned a unique identifier, a <em>Conformance Target URI</em>, that distinguishes it from all other IEP conformance targets.  Construct a <em>Conformance Target URI</em> using a fragment identifier (similar to an MPD artifact URI) per this rule:</p>

	<ruleSection>
		<title>Conformance Target URI</title>
		<rule id="r-iep-ct-uri" applicability="MPD-Cat" class="Interpretation">
			<p>A URI for an IEP conformance target (i.e., a <termRef>conformance target identifier</termRef>) declared in an IEPD is formed by concatenating the following in sequence:</p>
		<ol>
			<li><p>the IEPD URI</p></li>
			<li><p>the pound sign character (<code>#</code>)</p></li>
			<li><p>a locally unique NCName (i.e., a non-colonized name, as defined by <ref idref="W3-XML-Schema-Structures"/>, <a href="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#NCName"><char name="sect"/>3.3.7, <q>NCName</q></a>).</p></li>
		</ol>
		</rule>
		<p>This rule requires that an IEP conformance target class has a URI, its <termRef>conformance target identifier</termRef>.</p>
	</ruleSection>

	<p>The following rule is required for an <termRef>MPD catalog document</termRef>.  It supplements the rule above.</p>

<ruleSection>
	<title>IEP Conformance Target Has a <code>structures:id</code></title>
	<rule id="iep-conformance-target-id" applicability="MPD-Cat" class="Constraint">
		<p>A <code>c:IEPConformanceTarget</code> element MUST own a <code>structures:id</code> attribute.</p>
	</rule>
	<p>This rule ensures that a conformance targets can be referenced between IEPDs (not just within an IEPD).  The value of the <code>structures:id</code> attribute is the NCName in <ref idref="r-iep-ct-uri"/>.</p> 
</ruleSection>

	<p>An IEPD defines IEP conformance targets by explicitly declaring them within its MPD catalog per the rules above.</p>

	<p>The following subsections detail the concepts, artifacts, and procedures for declaring and identifying IEP conformance targets in IEPDs.</p>



<section id="Schema-Validation">
	<title>Schema Validation</title>

	<p>NIEM employs the W3C XML Schema Definition (XSD) Language (<ref idref="W3-XML-Schema-Structures"/> and <ref idref="W3-XML-Schema-Datatypes"/>), one of several XML schema definition languages designed to define an instance XML document and enable its validation.  In general, an instance XML document is valid against a particular XML schema if it obeys or conforms to the constraints imposed by that schema (<ref idref="W3-XML-Schema-Structures"/>, <a href="http://www.w3.org/TR/xmlschema11-1/#sec-schema-validity-and-docs"> <char name="sect"/>2.5, <q>Schema-validity and documents</q></a>).</p>

	<p>So, a NIEM IEPD is an MPD that contains a set of XML schema documents, that are assembled into an XML schema (after processing XML catalogs to <termRef>resolve URI</termRef> values in namespace attributes owned by <code>xs:import</code> elements and similar XML Schema constructs).  In turn, the resulting XML schema can be used to validate one or more <termRef term="instance XML document">instance XML documents</termRef> for NIEM conformance.</p>

	<p>NIEM is based on XML Schema, and so the term "schema validation" usually refers to "XML Schema validation".  However, an IEPD author may also choose to include artifacts to validate with other types of schemas or rules, including but not limited to <ref idref="ISO-Schematron"/> and <ref idref="ISO-RelaxNG"/>.  IEPD authors may also include artifacts for NIEM constraint schema validation, which, of course, is XML Schema validation (See <ref idref="Constraint-Schemas"/>.</p>

</section>



<section id="Declaring-Validity-Constraints">
	<title>Declaring Validity Constraints</title>

	<p>Explicit declaration of validity constraints is far more flexible and precise than relying on conventions that can easily be misinterpreted.  The <code>c:IEPConformanceTarget</code> element within the <termRef>MPD catalog document</termRef> can apply several common constraints by explicitly declaring the information required for a given constraint.  This information may include the conformance target, context, and type of validation, location of validation artifact(s), and specific tests to perform.  It can also identify IEP samples known to satisfy the validity constraints.</p>

<ruleSection>
	<title>IEPD Declares One or More IEP Conformance Targets</title>
	<rule id="validity-constraints" applicability="MPD-Cat" class="Constraint">
		<p>An IEPD MUST explicitly declare all intended validity constraints by employing the <code>c:IEPConformanceTarget</code> element in its <termRef>MPD catalog document</termRef>.</p>
	</rule>
</ruleSection>

	<p><ref idref="MPD-Catalog-XSD"/> provides XML elements for various validity constraints.  These constraints are employed by element substitution using two abstract elements, <code>c:ValidityConstraintWithContext</code> and <code>c:ValidityConstraint</code>.  <ref idref="MPD-Catalog-XSD"/> normatively specifies how this works.</p>

	<p>Note that there may exist multiple ways to declare the same validity constraint with these elements.  This rule only requires that each required validity constraint be declared once in a single form.  For example, it may be possible to use either <code>c:HasDocumentElement</code> and <code>c:ValidToXPath</code> to declare the same XML document elements.  However, it is only required that an IEPD author use one or the other.</p> 

	<p>Recall that this section does not apply to an MPD that is an EIEM, because it does not define an information exchange.  That said, an EIEM author may have good rationales for providing validity constraints with an EIEM.  However, this is not required for an EIEM.</p>

	<p>The following subsections explain in more detail the purpose and use of each <code>c:IEPConformanceTarget</code> validity constraint.</p>

<section id="ValidityConstraintWithContext">
	<title>c:ValidityConstraintWithContext</title>

	<p><code>c:ValidityConstraintWithContext</code> is an abstract element into which various validity constraints will be substituted, depending upon the IEPD author's intent.  In the absence of an explicit context (declared by an <code>c:xPathText</code> attribute), validity constraint context defaults to <em>document</em> as defined in <ref idref="W3-XML-InfoSet"/>, <a href="http://www.w3.org/TR/2004/REC-xml-infoset-20040204/#infoitem.document"> <char name="sect"/>2.1, <q>The Document Information Item</q></a>.  In this default case, a specific validity constraint will substitute for <code>c:ValidityConstraint</code> which in turn, substitutes for <code>c:ValidityConstraintWithContext</code>.</p>

</section>

<section id="ValidityConstraint">
	<title>c:ValidityConstraint</title>

	<p>This is the abstract element for which a specific validity constraint will substitute if no explicit context is used (and therefore, the default <em>document</em> context applies as described in <ref idref="ValidityConstraintWithContext"/>).</p>

</section>

<section id="ValidityContext">
	<title>c:ValidityContext</title>

	<p><code>c:ValidityContext</code> allows the explicit declaration of context (in <code>c:xPathText</code> attribute) for the application of a specific validity constraint.  <code>c:ValidityContext</code> can contain any of the specific validity constraints that are substitutable for <code>c:ValidityConstraint</code>.</p>

</section>



<section id="HasDocumentElement">
	<title>c:HasDocumentElement</title>

	<p><code>c:HasDocumentElement</code> is a validity constraint that identifies all intended XML document elements for an IEP conformance target, and it is directly substitutable for <code>c:ValidityConstraintWithContext</code>.  This constraint ensures that an IEP artifact is rooted by one XML document element that is a member of the list of elements in its <code>c:qualifiedNameList</code> attribute.  This is a common validity constraint employed by simple IEPDs that declare one or more intended XML document elements.</p>

	<p>Note that the context of <code>c:HasDocumentElement</code> is always on a <em>document</em> as defined in <ref idref="W3-XML-InfoSet"/>, <a href="http://www.w3.org/TR/2004/REC-xml-infoset-20040204/#infoitem.document"> <char name="sect"/>2.1, <q>The Document Information Item</q></a>.  This is because it can only declare XML document elements.  So, if an IEP defines a payload that may be included in some XML envelope, then <code>c:HasDocumentElement</code> should not be used.  Instead, use <code>c:ValidityContext</code> with another specific validity constraint and an explicit <code>c:xPathText</code> to declare context.</p>

	<p>When employing <code>c:HasDocumentElement</code> the following rule applies:</p>

<ruleSection>
	<title>Identifying the Document Element of an IEP</title>
<rule id="i2" applicability="IEP" class="Constraint">
	<p>If the IEP conformance target definition for an IEP contains a <code>c:HasDocumentElement</code> element containing a <code>c:qualifiedNameList</code> attribute with a value of <code>$list</code>, then the document element of the IEP MUST have a <em>QName</em> that is a member of <code>$list</code>.</p>
	</rule>
</ruleSection>

</section>



<section id="ValidToXPath">
	<title>c:ValidToXPath</title>

	<p><code>c:ValidToXPath</code> is a specific validity constraint whose purpose is to ensure that a condition is satisfied within an IEP.  The condition is defined by an XPath expression contained in the <code>c:xPathText</code> attribute.  If the XPath expression applied to a target instance <termRef>XML document</termRef> returns a Boolean value of TRUE, then the condition is satisfied by that XML document.</p>

	<p>This validity constraint is useful for a variety of purposes.  For example, an IEPD author may require that a given <code>c:IEPConformanceTarget</code> must contain a particular element with a particular attribute whose value is an integer greater than some required minimum.  An XPath expression can validate this.</p>

	<p><code>c:ValidToXPath</code> can also employ a simple XPath expression to validate that an IEP is rooted with an intended XML document element.  However, other validity constraints can do this as well; the IEPD author may choose the constraint representation.</p>

	<p>Note that if <code>c:ValidToXPath</code> is used (substituted) within <code>c:ValidityContext</code> there will be two XPath expressions <char name="mdash"/> the expression within <code>c:ValidToXPath</code> is the condition to validate, the other is the context (where the condition will be validated).  For example, the context provided by <code>c:ValidityContext</code> might be <code>//my:speedingTicket</code>, while the <code>c:ValidToXPath</code> might require that a test for <code>exists(nc:DriverPerson)</code> be true.</p>

	<p>This specific validity constraint as well as those that follow below can either be substituted for the <code>c:ValidityConstraint</code> or used within the <code>c:ValidityContext</code> element (i.e., substituted for its <code>c:ValidityConstraint</code> sub-element).</p>

	<p>Note that if <code>c:ValidToXPath</code> is substituted for <code>c:ValidityConstraint</code> within the <code>c:ValidityContext</code> element, then the explicit context, the <code>c:xPathText</code> value, can imply that multiple items must be checked and each must return "true" in order for an IEP to pass the <code>c:ValidToXPath</code> constraint.</p>

	<p>When employing <code>c:ValidToXPath</code> the following rule applies:</p>

<ruleSection>
	<title>Validating an XPath Expression</title>
<rule id="i1" applicability="IEP" class="Constraint">
	<p>Within an <termRef>MPD catalog document</termRef> with a <code>c:xPathText</code> attribute owned by a <code>c:ValidToXPath</code> element, a candidate IEP is a valid IEP, ONLY IF the value of <code>c:ValidToXPath</code> applied to the candidate IEP (an <termRef>XML document</termRef>) has an effective Boolean value (EBV) equal to <code>true</code>.  EBV is defined by <ref idref="W3-XPath"/>, <a href="http://www.w3.org/TR/2010/REC-xpath20-20101214/#id-ebv"> <char name="sect"/>2.4.3, <q>Effective Boolean Value</q></a>.</p>
</rule>
</ruleSection>


</section>

<section id="XMLSchemaValid">
	<title>c:XMLSchemaValid</title>

	<p>Because NIEM is based on XML Schema, then <code>c:XMLSchemaValid</code> will likely be employed by almost all IEPDs.  This constraint simply ensures that an IEP artifact is schema valid to an XML schema described by and assembled with an XML Catalog.  The starting XML Catalog artifact is identified by the <code>c:XMLCatalog</code> element.  Note that it is possible for a starting XML catalog to link (through <code>er:nextCatalog</code>) to one or more cascading XML catalogs.</p>
</section>

<section id="SchematronValid">
	<title>c:SchematronValid</title>

	<p><code>c:SchematronValid</code> is similar to <code>c:XMLSchemaValid</code>, but uses a <code>c:SchematronSchema</code> element to identify the Schematron rule file that applies to the IEP.</p>
</section>

<section id="RelaxNGValid">
	<title>c:RelaxNGValid</title>

	<p><code>c:RelaxNGValid</code> is similar to the previous two validity constraints, but uses a <code>c:RelaxNGSchema</code> element to identify the RelaxNG schema file to which the IEP must validate.</p>
</section>

<section id="ConformsToConformanceTarget">
	<title>c:ConformsToConformanceTarget</title>

	<p><code>c:ConformsToConformanceTarget</code> enables an IEPD author to effectively subclass and relate conformance target classes.  For example, using this constraint, a given conformance target class defined by a <code>c:IEPConformanceTarget</code> <code>structures:id="A2"</code> can be required to also conform to another class <code>structures:id="A1"</code>.  This creates an <em>IS-A</em> relationship.  We say that <code>A2</code> <em>IS-AN</em> <code>A1</code>, or that <code>A2</code> <em>IS-A</em> specialization of <code>A1</code>.</p>

	<p>Conformance target classes are related through the <code>c:conformanceTargetURI</code> attribute owned by <code>c:ConformsToConformanceTarget</code>.  Recall that per <ref idref="r-iep-ct-uri"/> a conformance target uri is formed by the concatenating the IEPD URI (the value of <code>c:mpdURI</code>), the pound character (<code>"#"</code>), and the value of the conformance class (<code>structures:id</code>) of the <termRef>IEP conformance target</termRef>.</p>

</section>

<section id="ConformsToRule">
	<title>c:ConformsToRule</title>

	<p>Sometimes it is not possible to formally declare an executable validity constraint.  For example, we can mandate that a data component definition must be present, must be in English, and must follow <ref idref="ISO-11179-4"/>.  Validating that text is present is easy, and validating that it is in English is more difficult, but validating that it obeys <ref idref="ISO-11179-4"/> is essentially intractable.  Thus, <code>c:ConformsToRule</code> provides an IEPD author with English text representation as an alternative when it is not possible or not easy to define more formal validation rules or validity constraints.</p>

</section>

</section>



<section id="IEP-Samples">
	<title>IEP Sample Instance XML Documents</title>

	<p>Sample IEP <termRef term="instance XML document">instance XML documents</termRef> are representations of actual or example exchange data instances and can be extremely valuable artifacts in an IEPD.  Sample IEPs can:</p>
	<ul>
		<li><p>Help an IEPD implementer to understand the original intent of the IEPD author.</p></li>
		<li><p>Be used by an implementer as a data point for validation of IEP conformance targets.</p></li>
		<li><p>Indicate or imply IEPD quality.</p></li>
	</ul>

	<p>For these reasons, IEP samples are required for IEPDs:</p>

<ruleSection>
	<title>IEPD Has One or More Samples for Each <code>c:IEPConformanceTarget</code></title>
	<rule id="r-iep-samples" applicability="IEP FN-IEP" class="Interpretation">
		<p>An IEPD MUST contain at least one IEP sample XML document instance that exemplifies each declared <code>c:IEPConformanceTarget</code>.  If applicable, a single IEP sample MAY exemplify multiple conformance targets.</p>
	</rule>
</ruleSection>

	<p>Note that this rule requires that each IEP conformance target be covered by at least one IEP sample document instance.  This does not necessarily mandate a different IEP sample for each IEP conformance target.  It may be possible, and is therefore acceptable, for a given IEP sample to serve as an example of one or more IEP conformance targets.</p>
	
	<p>The purpose of this rule is not to provide a test for all possible IEP permutations given the schema definitions and validity constraint declarations; rather, it is to encourage IEPD authors to test their own designs, and to provide implementers with examples for additional understanding, guidance, and testing.  To the extent possible, IEPD authors should strive to include sample IEPs that (1) capture real world business cases of data exchanges, and (2) exercise as many data components and validity constraints as possible.  Where it makes sense, an IEPD author should strive to provide enough sample IEPs to exercise all the XML document elements (or payload root elements).  If a single IEP cannot provide enough example coverage, an author may include multiple IEPs (but is not required to do so).</p>

	<p>Each sample IEP usually illustrates a single view of the data based on a chosen set of conditions.  Other views based on different conditions likely exist.  An implementer will still need to review the IEPD documentation to ensure understanding of all potential conditions.  Therefore, as appropriate, the author should not rely exclusively on sample IEPs to convey implementation understanding, since they will probably not account for all possible permutations.</p>

	<p>The following rule relates to validity of an IEP Sample XML Document:</p>

<ruleSection>
	<title>Validating an IEP Sample XML Document</title>	
<rule id="i3" applicability="IEP" class="Constraint">
	<p>Within an <termRef>MPD catalog document</termRef> with a <code>c:pathURI</code> attribute owned by a <code>c:IEPSampleXMLDocument</code>, the artifact resolved by the value of <code>c:pathURI</code> MUST be valid for the validity constraints of the <code>c:IEPConformanceTarget</code> parent of <code>c:IEPSampleXMLDocument</code>.</p>
</rule>
</ruleSection>

</section>
</section>



<section id="Conformance-Assertion">
	<title>Conformance Assertion</title>

	<p>This section is applicable to IEPDs and EIEMs.</p>

	<p>Independent authors build NIEM IEPDs and EIEMs from NIEM <termRef term="reference schema document set">reference schema document sets</termRef>.  Presently, a formal NIEM conformance certification process for IEPDs does not exist.  Therefore, this specification recommends that an IEPD or EIEM contain an artifact that asserts some degree of NIEM conformance.</p>

<definition term="conformance assertion">
	<p>An artifact that provides a formal or informal declaration that a NIEM IEPD or EIEM conforms to <ref idref="NIEM-Conformance"/>, <ref idref="NIEM-NDR"/>, and <ref idref="NIEM-MPD-3.0"/> (this NIEM MPD Specification).</p>
</definition> 

<ruleSection>
	<title>IEPD and EIEM Have Conformance Assertion in Root Directory</title>
	<rule id="r1-conform-assert" applicability="N-IEPD N-EIEM" class="Constraint">
		<p>An MPD with a <code>c:mpdClassURIList</code> attribute value from the set <code>{iepd, eiem}</code> MUST contain a <termRef>conformance assertion</termRef> artifact in its <termRef>MPD root directory</termRef>.</p>
	</rule>
</ruleSection>

<ruleSection>
	<title>Conformance Assertion File Name Is <code>conformance-assertion.*</code></title>
	<rule id="r2-conform-assert" applicability="WF-MPD" class="Constraint">
		<p>The file name of an MPD <termRef>conformance assertion</termRef> MUST be of the form <code>conformance-assertion.*</code>.</p>
	</rule>
</ruleSection>

	<p>A <termRef>conformance assertion</termRef> presents information to increase the level of confidence that an IEPD or EIEM was checked for NIEM conformance and quality.  It does NOT constitute a guarantee or contract.  In fact, a conformance assertion can be self-asserted.</p>

	<p>In the absence of a formal NIEM certification process, both weak and strong conformance assertions will exist.  A IEPD/EIEM user or implementer (who is not the author) must decide his/her level of confidence in the assertion.  A self-signed artifact that simply claims an IEPD is NIEM-conformant may be considered weak.  On the other hand, a stronger self-assertion could provide information that may include (but is not limited to):</p>
	<ul>
		<li><p>Date of assertion.</p></li>
		<li><p>Assertion of NIEM conformance.</p></li>
		<li><p>Author (name and/or organization, or sponsoring entity; indication of NIEM and XML background or experience).</p></li>
		<li><p>Certifier (could be author or another person/organization).</p></li>
		<li><p>Details of conformance verification:</p>
			<ul>
			<li><p>How, what, and/or who? (e.g., automatic checks, manual checks, other reviews?)</p></li>
			<li><p>Tool(s) employed? (e.g., tool, version, how used, on what, etc.)</p></li>
			<li><p>Results? (e.g., issues, pass/fails, warnings, confirmations, etc.)</p></li>
			</ul>
		</li>
	</ul>

	<p>Inclusion of a conformance assertion made by a reputable, independent, trusted entity (person or organization) would likely increase confidence in conformance.  Another strong case can be made by supplementing a conformance assertion with a formal conformance test report or similar artifact.</p>

	<p>In the future, as NIEM procedures and tools advance, a conformance or quality report and a corresponding certificate may become required artifacts.  A tool might check conformance and issue the report and certificate together as a digitally signed and hashed artifact that reports conformance, and proves both author and IEPD identity (i.e., that the IEPD is an unaltered copy of the original).  
For now, inclusion of a conformance assertion in an IEPD or EIEM is at the discretion of the author or sponsor.</p>

</section>
</section>


<!-- ####################### Conformance Targets ########################### -->


<section id="Conformance-Targets">
	<title>Conformance Targets</title>

	<p><termRef term="conformance target">Conformance targets</termRef> and their brevity codes were introduced earlier in <ref idref="Conformance-Target-Concepts"/> because they are necessary to understand rule applicability.  This section provides formal definitions for MPD and IEP conformance targets, and more explanation and perspectives for each.</p>

	<p>From a conformance target perspective, NIEM releases, Core and Domain updates, IEPDs, and EIEMs are all specialized MPDs, and this establishes an <em>IS-A</em> relationship.</p>

	<p><termRef term="conformance target">Conformance targets</termRef> in this specification support a variety of use cases:</p>
	<ul>
		<li><p>An XML document with a NIEM-defined XML document (root) element.</p></li>
		<li><p>An XML document that contains a NIEM-defined document wrapped in a non-NIEM element (e.g. an envelope, which includes SOAP, LEXS, ULEX, Trusted Data Format, OGC Web Services, etc.).</p></li>
		<li><p>Use of multiple NIEM-defined payloads together, in an envelope, or as a composite package.</p></li>
		<li><p>Use of NIEM-defined data annotating and providing details to a non-NIEM format, such as an OGC standard.</p></li>
		<li><p>Use of a non-NIEM format, where NIEM annotations and details may or may not occur depending on usage (e.g., NIEM details are provided for hospitals, but the message instance contains no hospitals).</p></li>
		<li><p>The use of non-NIEM data annotating and providing details on NIEM data.</p></li>
	</ul>



<!-- ######################## MPD ########################## -->


<section id="MPD-Conformance-Targets">
	<title>MPD Conformance Targets</title>

	<p>There are two primary MPD conformance targets: <termRef>well-formed MPD</termRef> and <termRef>NIEM IEPD</termRef>.</p>

	<p>An MPD may be constructed manually, but it is far more efficient to generate its parts or its entirety using one or more NIEM-aware software tools.  A <termRef>well-formed MPD</termRef> <termRef>conformance target</termRef> has several advantages:</p>

		<ul>
			<li><p>Facilitates the existence of many incremental states from start to finish that are checkpoints for well-formedness.</p></li>
			<li><p>Enables multiple paths to completion; no single pre-determined sequence of rule applications exists.</p></li>
			<li><p>Avoids a need to build a complete MPD before automated correctness checks can be applied.</p></li>
			<li><p>Provides tool developers with flexibility for constructing an MPD incrementally in many different sequences.</p></li>
			<li><p>Facilitates the interoperability and use of multiple tools that can export/import a <termRef>well-formed MPD</termRef>.</p></li>
		</ul>

<definition term="well-formed MPD">
	<p>A valid <ref idref="PKZIP"/> archive file that adheres to the rules defined for a <termRef>well-formed MPD</termRef> <termRef>conformance target</termRef> in this MPD specification.</p>
	<p>(brevity code: <strong>WF-MPD</strong>)</p> 
</definition>

	<p>A <termRef>well-formed MPD</termRef> satisfies the need for a <ref idref="PKZIP"/> file with an <termRef>MPD catalog document</termRef> that validates with the MPD catalog schema, and contains no broken links to local artifacts it references.  This definition enables a developer to build an MPD by iteratively adding artifacts and expanding the MPD catalog to reference them.</p>

	<p>The five standard NIEM MPD classes can be partitioned into two general groups based on control.  In the first group are NIEM releases, Core updates, and domain updates; and in the second, IEPDs and EIEMs.  The first group is developed, controlled, and published by the NIEM PMO.  However, the second group is developed by organizations or individuals that are not under PMO control.  Control of these MPDs is widely distributed and subject only to NIEM specifications (e.g., the NIEM NDR, the NIEM MPD Specification, the NIEM Conformance Specification, etc.).  In some cases, this may mean interpretation of subjective rules that are not testable (for example, rules for new data component definitions).</p>

	<p>Furthermore, most rules in this MPD Specification are applicable to a <termRef>well-formed MPD</termRef> <termRef>conformance target</termRef>.  Rules for this conformance target are less concerned with the correct use of NIEM and completeness, and more concerned with proper format, proper structure (e.g., link integrity), and correct use of artifacts.  Adherence to these rules can produce an IEPD that is well-formed (WR-MPD), but that does not necessarily satisfy all general and specific requirements for a NIEM IEPD (N-IEPD).  While some rules in this MPD Specification may imply general and specific NIEM conformance, the following rule ensures that a complete <em>NIEM IEPD</em> adheres to all applicable NIEM conformance rules.</p>

<definition term="NIEM IEPD">
	<p>An MPD that:</p>
	<ul>
		<li><p>Has <code>c:mpdClassURIList="iepd"</code>, and</p></li>
		<li><p>Has one or more <code>c:IEPConformanceTarget</code> elements within its <termRef>MPD catalog document</termRef>, and</p></li>
		<li><p>Satisfies all WF-MPD conformance target rules, and</p></li>
		<li><p>Satisfies all MPD-Cat conformance target rules, and</p></li>
		<li><p>Satisfies all applicable rules and mandatory requirements in:</p>
			<ul>
				<li><p><ref idref="NIEM-MPD-3.0"/> (i.e., This MPD Specification)</p></li>
				<li><p><ref idref="NIEM-NDR"/></p></li>
				<li><p><ref idref="NIEM-Conformance"/></p></li>
			</ul>
		</li>
	</ul>
	<p>(brevity code: <strong>N-IEPD</strong>)</p>
</definition>

</section>


<!-- ####################### IEP ########################### -->


<section id="IEP-Conformance-Targets">
	<title>IEP Conformance Targets</title>

	<p><ref idref="Information-Exchange-Package-Documentation"/> introduced the only MPD class that defines an information exchange <char name="mdash"/> <termRef>Information Exchange Package Documentation</termRef> (IEPD).  This section also introduced an <termRef>Information Exchange Package</termRef>, which is an information exchange instance defined by an IEPD.  An IEP is also a <termRef>conformance target</termRef> and in that connotation is defined as follows:</p>

	<definition term="information exchange package">
		<p>An XML <termRef>instance XML document</termRef> defined by a <code>c:IEPConformanceTarget</code> element in an IEPD's <termRef>MPD catalog document</termRef>.</p>
	      	<p>(brevity code: <strong>IEP</strong>)</p>
	</definition>

	<p>The definition of an <termRef>information exchange package</termRef> conformance target is not strong enough to ensure that an IEP artifact uses NIEM.  Thus, there is a need for a conformance target that distinguishes a general IEP from an IEP that represents a valid NIEM information exchange.   The following defines a <em>full NIEM IEP</em> <termRef>conformance target</termRef>:</p>

	<definition term="full NIEM information exchange package">
		<p>An <termRef>instance XML document</termRef> (i.e., an IEP) that satisfies all the validity constraints for its class as defined by a NIEM IEPD (N-IEPD), and that has an XML document element that is declared in either a NIEM reference or extension schema document.</p>
		<p>(brevity code: <strong>FN-IEP</strong>)</p>
	</definition>

</section>

<section id="Artifact-Conformance-Targets">
	<title>Artifact Conformance Targets</title>

	<p>Other conformance targets correspond to artifacts internal to an MPD.  These include:</p>
	<ul>
		<li><p><termRef>schema document subset</termRef></p></li>
		<li><p><termRef>subset schema document</termRef></p></li>
		<li><p><termRef>MPD catalog document</termRef></p></li>
		<li><p><termRef>XML catalog document</termRef></p></li>
		<li><p>MPD <termRef>change log</termRef></p></li>
	</ul>

</section>
</section>


<!-- ################################################## -->


<section id="Optional-MPD-Artifacts">
	<title>Optional MPD Artifacts</title>
	
	<p>Aside from the required artifacts, MPD content is relatively flexible.  A variety of other optional documentation files may be incorporated into an MPD.  When applicable, these may include (but are not limited to) files that describe or explain:</p> 
<ul>
	<li><p>Implementation details (hardware, software, configuration, etc.)</p></li>
	<li><p>Use of multiple root elements</p></li>
	<li><p>Use of multiple subsets or mixed releases</p></li>
	<li><p>How to use/reuse an MPD for various purposes (such as Web Services)</p></li>
	<li><p>Rationales and/or business purposes</p></li>
</ul>

	<p>In addition to documentation artifacts, a variety of other optional files can be added to an MPD to facilitate tool support and make reuse, adaptation, and/or implementation easier.  These are often files that are inputs to or outputs from software tools.  Examples include content diagrams, content models in tool-specific formats, and business rules (either formal or informal representations).</p>

	<p>An MPD author may include any files believed to be useful to understand, implement, reuse, and/or adapt an MPD.</p>

	<p>An MPD of relatively simple content and scope may only need to contain the minimum mandatory artifacts required by this specification in order to understand and implement it.  (See <ref idref="MPD-Artifacts"/> for a listing of the mandatory and common optional artifacts for each type of MPD.)</p>

	<p>Files vary widely in format and are often specific to the tools an author uses to parse, consume, or output them.  Therefore, if tool-specific files are included in an MPD, it is also a good practice to include copies of those files in formats that display with standard Web browsers or other cost-free, publicly available viewing tools (e.g., ASCII text, PDF, CSV, HTML, JPG, GIF, PNG).  This guidance is intended to encourage and facilitate maximal sharing and distribution of MPDs; it does not prohibit and is not intended to discourage the inclusion of other file formats.</p>

	<p>In particular, this specification does not discourage use of Microsoft file formats for documentation and other optional artifacts.  Microsoft Office products are in common use, and free viewers are available for many of them (See <link>http://office.microsoft.com/en-us/downloads/office-online-file-converters-and-viewers-HA001044981.aspx</link>).</p>



<section id="Wantlists">
	<title>NIEM Wantlist</title>

	<p>A NIEM schema document subset is often associated with a NIEM <em>wantlist</em>.  A <em>wantlist</em> is an abbreviated XML representation of a NIEM schema document subset, and identifies only the data components a user selected (as requirements) to build a schema document subset.  To reconstruct the complete schema document subset there are usually a number of additional data components that the user selections depend upon.  These must be computed from the appropriate NIEM reference model and added to reconstruct the complete schema document subset.  For example, a user may select <code>nc:Person</code> for the subset.  In this case, the wantlist will only contain that component, but the associated full subset must contain both <code>nc:Person</code> and <code>nc:PersonType</code>.  A software tool that understands how to process NIEM wantlists and schema document subsets (such as the NIEM Schema Subset Generator Tool <ref idref="NIEM-SSGT"/>) can rebuild an accurate schema document subset from a wantlist (and the reverse).</p>

	<definition term="NIEM wantlist">
		<p>An XML document that represents a complete NIEM schema document subset.</p>
	</definition>

	<p>A NIEM wantlist identifies the data component requirements declared by the subset author; it does not identify the data component dependencies required to reconstitute the complete subset.  The complete subset can be computed with the reference schema document set from which the subset was derived.</p>

	<p>A wantlist is always associated with a schema document subset.  A wantlist may also be associated with a <termRef>constraint schema document set</termRef>, because constraint schema documents are often built from a <termRef>schema document subset</termRef>.  For a simple IEPD, it can sometimes be trivial to identify a single schema document subset.  However, this MPD Specification does not prohibit building complex IEPDs that contain schema document sets supported by multiple schema document subsets and associated wantlists.  As with other complex cases, the IEPD author is responsible to clearly document the associations between wantlists and schema document sets.  In order to maintain a minimal degree of consistency for placement of a wantlist within an IEPD or EIEM the following rule applies.</p>

<ruleSection>
	<title>Wantlist Location</title>	
	<rule id="r-wantlist-base" applicability="WF-MPD" class="Constraint">
		<p>If present, a NIEM wantlist MUST reside within the root of the MPD subdirectory that groups and defines its corresponding subset schema document set (e.g., <code>niem</code>).</p>
	</rule>
</ruleSection>

</section>



<section id="Business-Rules">
	<title>Business Rules</title>

	<p>For simplicity and consistency, NIEM employs a profile of the XML Schema language <ref idref="W3-XML-Schema-Structures"/>, <ref idref="W3-XML-Schema-Datatypes"/>.  Thus, some constraints on NIEM XML documents cannot be enforced by NIEM.  <termRef term="constraint schema document set">Constraint schema document sets</termRef> provide a convenient technique for enforcing some additional constraints.  However, even the full XML Schema language cannot validate and enforce all possible constraints that may be required of an XML document.</p>

	<p>So, NIEM allows (even encourages) the use of formal or informal <em>business rules</em> to supplement MPDs (in particular IEPDs).</p>

	<definition term="business rules">
		<p>Formal or informal statements that describe business policy or procedure, and in doing so define or constrain some aspect of a process or procedure in order to impose control.</p>
	</definition>

	<p><termRef term="business rules">Business rules</termRef> may be represented as informal English statements, or as formally coded machine-readable and processible statements.  For example, an IEPD may use a Schematron schema <ref idref="ISO-Schematron"/>, a RelaxNG schema <ref idref="ISO-RelaxNG"/>, or any other formal representation for <termRef>business rules</termRef>.</p>

	<definition term="business rule schema">
		<p>An artifact that contains <termRef>business rules</termRef> in a formal representation language with the intent to automatically process them on an XML document to enforce business constraints.</p>
	</definition>

	<definition term="Schematron schema">
		<p>A <termRef>business rule schema</termRef> that adheres to <ref idref="ISO-Schematron"/>.</p>
	</definition>

	<definition term="RelaxNG schema">
		<p>A <termRef>business rule schema</termRef> that adheres to <ref idref="ISO-RelaxNG"/>.</p>
	</definition>

</section>
</section>


<!-- ################################################## -->


<section id="Organization-Packaging-Other-Criteria">
	<title>Organization, Packaging, and Other Criteria</title>
	
	<p>An MPD is a logical set of electronic files aggregated and organized to fulfill a specific purpose in NIEM.  Directory organization and packaging of an MPD should be designed around major themes in NIEM:  reuse, sharing, interoperability, and efficiency.</p>

	<ruleSection>
		<title>MPD Is a Zip Archive</title>
	 	<rule id="r-mpd-archive" applicability="WF-MPD" class="Constraint">
			<p>An MPD is packaged as a single compressed archive of files that represents a sub-tree of a file system in standard <ref idref="PKZIP"/> format.  This archive MUST preserve and store the logical directory structure intended by its author.</p>
		</rule>
	</ruleSection>

	<p>NIEM XSD and XML artifacts in an MPD must be valid for both XML Schema and NIEM.  This also implies these artifacts must adhere to applicable <ref idref="NIEM-NDR"/> conformance target rules.</p>

	<ruleSection>
		<title>XSD and XML Documents Conform to Applicable NDR Conformance Targets</title>
		<rule id="r-mpd-conform-tgts" applicability="WF-MPD" class="Constraint">
			<p>Within an MPD archive, each XML schema document (XSD) or instance XML document (XML) artifact that uses a conformance targets attribute (as defined by <ref idref="NIEM-CTAS"/>) MUST satisfy the <ref idref="NIEM-NDR"/> rules for the conformance targets it declares.</p>
		</rule>
	</ruleSection>

	<p>NIEM releases, core updates, and domain updates maintain a relatively consistent directory organization <ref idref="NIEM-DomainUpdate"/>.  But there are many ways to organize IEPD and EIEM directories that may depend on a number of factors including (not limited to) business purpose and complexity.  For this reason, strict rules for IEPD and EIEM directory structure are difficult to establish.  Therefore, IEPD and EIEM authors may create their own logical directory structures subject to the rules of this section.</p>

	<definition term="MPD root directory">
		<p>The top level file directory relative to all MPD artifacts and subdirectories.</p>
	</definition>

	<ruleSection>
		<title>MPD Archive Uncompresses to a Single Root Directory</title>
		<rule id="r-mpd-archive-one-root" applicability="WF-MPD" class="Constraint">
			<p>An MPD archive MUST uncompress (unzip) to one and only one <termRef>MPD root directory</termRef>.</p>
		</rule>
	</ruleSection>

	<p>The foregoing rule ensures that:</p>
	<ul>
		<li><p>Unpacking an MPD archive will not scatter its contents on a storage device.</p></li>
		<li><p>A common starting point always exists to explore or use any MPD.</p></li>
		<li><p>mpd-catalog and change log artifacts will always be found in the <termRef>MPD root directory</termRef>.</p></li> 
	</ul>



<section id="Artifact-Sets">
	<title>Artifact Sets</title>

	<p>This specification defines different ways to group MPD artifacts into <termRef term="artifact set">sets</termRef>.  In general, all sets are established through an <termRef>XML catalog document</termRef> (<termRef>XML schema document</termRef> sets) and the <termRef>MPD catalog document</termRef> (all artifact sets).</p>

	<p><ref idref="XML-Catalogs"/> describes how NIEM employs an <termRef>XML catalog document</termRef> to assemble an <termRef>XML Schema</termRef> from <termRef term="XML schema document">XML schema documents</termRef>.  This is one important method for grouping XML schema documents into sets.  In fact, this is the required standard technique for grouping schema documents for assembling them into a schema.  For user convenience, this method is now used in each release, core update, and domain update.  Note also that this method is applicable to all the various classes of NIEM XML schema documents (reference, subset, extension, constraint, and external).</p>

	<p>Another reason for grouping artifacts into sets is a common need for humans to review, identify, and navigate the artifacts of an IEPD (particularly, if it's complicated).  An <termRef>XML catalog document</termRef> has a relatively focused purpose, to identify (by namespace) and assemble a set of XML schema documents into an <termRef>XML Schema</termRef>.  It is not intended to index artifacts in general (other than XML schema documents to assigned target namespaces).  So, it does not classify or describe the artifacts it identifies.</p>

	<p>On the other hand, the <termRef>MPD catalog document</termRef> is designed to record, index, classify, and describe (as needed) any or all MPD artifacts (not just schema documents).  The MPD catalog provides a flexible method for grouping all kinds artifacts.</p>

	<p>The MPD catalog schema <ref idref="MPD-Catalog-XSD"/> defines a set of common artifact classifiers and artifact set classifiers.  In summary, per <ref idref="MPD-Catalog-XSD"/>, define sets by substituting the appropriate artifact classifier (of type <code>c:FileType</code>) into the abstract element <code>c:ArtifactOrArtifactSet</code>, within the appropriate artifact set classifier (of type <code>c:FileSetType</code>).  Use the most specific classifiers available for your artifacts and artifact sets.  Otherwise, as needed, use generic <code>c:File</code> and <code>c:FileSet</code> classifiers with <code>nc:DescriptionText</code>.</p>

	<p>Note that the <code>c:pathURI</code> value for an artifact is its operating system relative directory <termRef>path name</termRef> with file name.  The <code>c:pathURI</code> value for an artifact set is its operating system relative <termRef>path name</termRef>.</p>

	<p>Artifact sets can be assembled in the MPD Catalog by using c:FileSet with or without a <code>c:pathURI</code> attribute.</p>

	<p>If a single directory contains all the artifacts in a set, then the following simple form of <code>c:FileSet</code> can be used:</p>

	<figure>
		<title>Simple <qName>c:FileSet</qName> form for a direectory-associated artifact set.</title>
		<pre>
	&lt;c:FileSet c:pathURI="samples/"&gt;
		&lt;nc:DescriptionText&gt;All IEP samples within this IEPD.&lt;/nc:DescriptionText&gt;
	&lt;/c:FileSet&gt;
		</pre>
	</figure>

	<p>This simple form of <code>c:FileSet</code> associates an operating system directory with a set of artifacts that also includes all artifacts within subdirectories under the directory named in the value of the <code>c:pathURI</code> attribute.  Note that the interpretation of this XML schema component (as implied by <code>nc:DescriptionText</code>) is that all artifacts in the <code>samples/</code> directory are sample IEPs, and no other IEP samples exist in other locations within the IEPD.  The author must construct MPD catalog entries that are clear and correct.  So, in this case, if other artifacts exist within this directory that are not sample IEPs or if sample IEPs exist in other directories, then use of this simple directory association form is not appropriate.</p>

	<p>However, multiple artifact sets and artifacts can be nested within a <qName>c:FileSet</qName> element to organize artifacts into a logical group of files in many locations.  For example, an author may identify a set of artifacts in several locations using the following more complicated form of <code>c:FileSet</code> with the MPD catalog:</p>

	<figure>
		<title><qName>c:FileSet</qName> form for a more complex artifact set.</title>
		<pre>
	&lt;c:FileSet&gt;
		&lt;nc:DescriptionText&gt;All IEP samples in this IEPD&lt;/nc:DescriptionText&gt;
		&lt;c:FileSet c:pathURI="samples/" /&gt;
		&lt;c:FileSet c:pathURI="iep-samples-1/" /&gt;
		&lt;c:FileSet c:pathURI="iep-samples-2/" /&gt;
		&lt;c:FileSet c:pathURI="iep-samples-supplement/" /&gt;
		&lt;c:IEPSampleXMLDocument c:pathURI="iep/test-case1.xml" c:mimeMediaTypeText="text/xml" /&gt;
		&lt;c:IEPSampleXMLDocument c:pathURI="test/test-case2.xml" c:mimeMediaTypeText="text/xml" /&gt;
	&lt;/c:FileSet&gt;
		</pre>
	</figure>

	<p>Another way the MPD catalog schema groups artifacts is through the use of the <code>c:RequiredFile</code> element.  Use this construct to signify there are strong dependencies among artifacts.  For example, documentation may be prepared as a set of hyperlinked HTML files.  These HTML files may also incorporate separate GIF or JPG images.  Regardless of file location within the MPD, these files depend on one another through hyperlinks.  As a result, they tend to operate as a single artifact; removal of a file will cause one or more broken links within the set.  This set of artifacts should be grouped using <code>c:RequiredFile</code>.  If the set does not have a root HTML document (i.e., the set can be entered from any file in the set), then create an index HTML document and use it as the root of the set (i.e., the index is the value of the <code>c:File</code> element while all others are values for <code>c:RequiredFile</code> child elements).</p>



<section id="Constraint-SchemaDocumentSet">
	<title>Constraint on Elements of Type <code>c:SchemaDocumentSetType</code></title>

	<p>In order to accomodate the <termRef>well-formed MPD</termRef> concept, the design of the MPD catalog schema does not enforce a rule that is required to ensure a <code>c:SchemaDocumentSet</code> within an <termRef>MPD catalog document</termRef> is used correctly for an IEPD.  This rule assumes that within the IEPD's MPD catalog any <code>c:SchemaDocumentSet</code> element identifies <termRef term="XML schema document">XML schema documents</termRef> to be assembled into an <termRef>XML Schema</termRef>.</p>

<ruleSection>
	<title>Constraint on Elements of Type <code>c:SchemaDocumentSetType</code></title>
	<rule id="r-constraint-schemadocumentset">
		<p>An element information item with a type definition validly derived from <code>c:SchemaDocumentSetType</code> MUST have a child element with an element declaration that is in the substitution group of <code>c:XMLCatalog</code> or <code>c:SchemaDocument</code>.</p>
	</rule>
	<p>This rule ensures that a <code>c:SchemaDocumentSet</code> element always has at least one child element that is an <termRef>XML catalog document</termRef> (which itself defines an <termRef>XML schema document</termRef>) set, or an <termRef>XML schema document</termRef> (which constitutes a set of at least one schema document).  This rule cannot be enforced within the MPD catalog schema without introducing a UPA error.  Thus, it is enforced as a Schematron rule.</p> 
</ruleSection>

</section>
</section>



<section id="MPD-File-Name-Syntax">
	<title>MPD File Name Syntax</title>

	<p>This section is applicable to all MPDs.  However, it is only normative for releases, core updates, and domain updates.  For IEPDs and EIEMs, this section describes non-normative guidance that is highly recommended, but not mandatory.  Additional non-normative guidance that relates to directory naming for IEPDs and EIEMs is in <ref idref="Guidance-IEPD-Directories"/>.</p>

	<p>It is important to understand that this section does not apply to the syntax for the <code>c:mpdName</code> attribute in the MPD catalog document.  This section is about MPD file naming.  Refer to <ref idref="Name-Syntax"/> for details regarding the <code>c:mpdName</code> metadata attribute.</p>

	<p>The MPD Specification is intended to help facilitate tool support for processing MPDs.  Providing tools and search mechanisms basic information about an MPD as early as possible will help reduce processing time and complexity.  So, if the MPD name, version, and class can be identified from its file name, then a tool would not have to open the archive and parse the MPD catalog to determine such.  Of course, ultimately, to do anything useful, a tool will have to open the MPD archive.  However, standard file name syntax allows a tool to search through a set of MPDs to find a particular MPD name, version, or class without having to open each.  File name consistency can also make it easier to scan and identify MPDs in a long list sorted by file name.</p> 

	<p>The following rule applies to releases, core updates, and domain updates:</p>

<ruleSection>
	<title>Release and Core/Domain Update File Name Syntax</title>
	<rule id="r-name-syntax" applicability="WF-MPD" class="Constraint">
		<p>Given an MPD whose <code>c:mpdClassURIList</code> value is in the set <code>{rel, cu, du}</code>, its file name MUST adhere to the syntax defined by the regular expression:</p>
	<pre>
	mpd-filename ::= name '-' version '.' class '.zip'       
	Where: 
		name     ::= alphanum ((alphanum | special)* alphanum)?
		alphanum ::= [a-z0-9]
		special  ::= '.' | '-' | '_'
		version  ::= digit+ ('.' digit+)* (status digit+)?
		digit    ::= [0-9]
		status   ::= 'alpha' | 'beta' | 'rc' | 'rev'
		class    ::= 'rel' | 'cu' | 'du' | 'iepd' | 'eiem'</pre>

		<p>The <code>status</code> values are as defined in <ref idref="r-mpd-vers-syntax"/>.</p>

		<p>The <code>class</code> values are defined as follows:</p>
		   <ul>
			   <li><p><code>rel</code> = release</p></li>
			   <li><p><code>cu</code> = core update</p></li>
			   <li><p><code>du</code> = domain update</p></li>
			   <li><p><code>iepd</code> = <termRef>Information Exchange Package Documentation</termRef></p></li>
			   <li><p><code>eiem</code> = Enterprise Information Exchange Model</p></li>
		   </ul>
	</rule>
</ruleSection>

	<p>The regular expression notation in the rule above is from <ref idref="W3-XML"/> <link href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation">#sec-notation</link>.</p>

	<p>Alphabetic characters are lower case to reduce complications across various file systems.</p>

	<p>An example of an intermediate release file name that follows these rules is:  <code>niem-3.0beta1.rel.zip</code></p>

	<p>MPD file names for releases, core updates, and domain updates also adhere to this rule:</p>

<ruleSection>
	<title>Release and Core/Domain Update File Name Matches Metadata</title>
	<rule id="r-mpd-match" applicability="WF-MPD" class="Constraint">
		<p>Given an MPD with a <code>c:mpdClassURIList</code> attribute value from the set <code>{rel, cu, du}</code>, its file name substrings for <code>name</code>, <code>version</code>, and <code>class</code>, as defined in <ref idref="r-name-syntax"/>, MUST exactly match its MPD catalog values for <code>c:MPD</code> attributes <code>c:mpdName</code>, <code>c:mpdVersionID</code>, and <code>c:mpdClassURIList</code> respectively.</p>
	</rule>
</ruleSection>

	<p>And finally, in HTTP-based Web Services environments, the MIME type designation of a MPD archive is important to facilitate processing by service consumers.</p>

<ruleSection>
	<title>MPD MIME Type Syntax</title>
	<rule id="r-mpd-mime" applicability="WF-MPD" class="Constraint">
		<p>When represented on the Internet, an MPD archive SHOULD use the following MIME Type:</p>
<pre>	application/zip+[class]
		where [class] is one member from the value set 
		{rel, cu, du, iepd, eiem}.</pre>
		<p>Use of the generic Zip MIME type <code>application/zip</code> is allowed, but discouraged.  No other MIME types are allowed when representing MPD archives.</p>
	</rule>
</ruleSection>

</section>



<section id="Artifact-Links-to-Other-Resources">
	<title>Artifact Links to Other Resources</title>

	<p>It is important to understand that the URI scheme defined in <ref idref="externalURI"/> can only be used to identify relationships among and provide source links to external schemas being reused.  It is not sufficient to allow references or links to such schemas stand in for a physical copy.  Thus, all schema artifacts necessary to define, validate, and use an MPD must be physically present within that MPD.  In accordance with the <ref idref="NIEM-NDR"/>, if MPD schemas are moved to an operational environment for implementation, validation, or other purposes, then absolute references may replace relative <termRef>path name</termRef> references when needed.  The following rule applies when absolute references to Internet resources are required.</p>

<ruleSection>
	<title>MPD References to Resources Use Common Transfer Protocols</title>
	<rule id="r-mpd-protocol" applicability="WF-MPD" class="Constraint">
		<p>Absolute references to Internet resources MUST use a well-known transfer protocol (http, https, ftp, ftps) and MUST <termRef term="resolve URI">resolve</termRef> (If applicable, documentation SHOULD describe how to <termRef term="resolve URI">resolve</termRef> with security, account, and/or password issues).</p>
	</rule>
</ruleSection>

	<p>Releases, core updates, and domain updates must adhere to packaging rules to enable development tools to process them consistently and efficiently.  The NIEM PMO controls the format and documentation for these MPDs and publishes them at <link>http://release.niem.gov/niem/</link>.  However, many different organizations author IEPDs and EIEMs.  As such, they may be distributed, published in repositories (possibly to a limited community), and reused by others.  Furthermore, EIEMs are the basis for families of IEPDs.  Therefore, it is important that both of these MPD classes are well documented for understanding and use.  An IEPD that has been derived from an EIEM should identify that relationship through its MPD catalog.</p>

<ruleSection>
	<title>IEPD Family Members Reference Parent EIEM</title>
	<rule id="r-mpd-link-eiem" applicability="N-IEPD" class="Constraint">
		<p>An <termRef>MPD catalog document</termRef> for an IEPD that is a member of a family of IEPDs derived from a given EIEM, MUST have a <code>c:MPDInformation/c:Relationship</code> element that owns a <code>c:relationshipCode="derives_from"</code> attribute and a <code>c:resourceURI</code> attribute with a URI value that <termRef term="resolve URI">resolves</termRef> to an EIEM resource.</p>
	</rule>
</ruleSection>

</section>



<section id="IEPD-Completeness">
	<title>IEPD Completeness</title>

	<p>Since an IEPD defines an information exchange and is often implemented by persons other than the original author, it is important to ensure that they are relatively complete and provide all artifacts needed to use the IEPD.</p>

<ruleSection>
	<title>IEPD Completeness</title>
	<rule id="r-mpd-documents" applicability="N-IEPD" class="Constraint">
		<p>An IEPD SHOULD contain all artifacts needed to understand it and facilitate its correct implementation.</p>
	</rule>
</ruleSection>

	<p>The rule above means that an IEPD implementer should not be forced to search for or track down specialized schema documents, documentation, or other artifacts required to validate and implement exchanges defined by an IEPD.  Specialized artifacts refer to those designed and built by an IEPD author, not artifacts that are standards and publicly available to all implementers.  For example, this rule does not imply that an IEPD should contain a schema document that defines the XML schema component vocabulary identified by the namespace name <code>http://www.w3.org/2001/XMLSchema</code> (i.e., XS), or <code>http://www.w3.org/2001/XMLSchema-instance</code> (i.e., XSI).  All schema processors have appropriate declarations for these built in.  Likewise, an IEPD is not required to contain <code>mpd-catalog-3.0.xsd</code> or the standard NIEM subset that supports it.</p>

	<p>On the other hand, an IEPD whose author has extended the MPD catalog schema is clearly required to contain the catalog extension schema document, since this is a specialized customization created by the author.  If a different NIEM schema subset is also used, then the IEPD must also contain its superset (i.e., a complete subset that incorporates both the original subset with additional NIEM components used to extend the catalog schema document; see <ref idref="r3-mpd-cat-ext-xsd"/>.)</p>

	<p>The rationale for "SHOULD" in <ref idref="r-mpd-documents"/> relates to issues of security.  Although NIEM is generally public, some IEPDs (and even other MPDs) may contain XML tags that provide more semantics or structure than a domain is willing to expose.  In such cases, it may be necessary to simply refer to schema documents that are required for validation and implementation, instead of circulating them within a public IEPD.  Implementers would then be expected to know how and where to obtain the required documents.</p>

	<p>The <ref idref="NIEM-NDR"/> explains how NIEM employs adapter types to encapsulate and use other standards (e.g., geospatial and emergency management standards) in their native forms that are not NIEM-conformant.  Other standards may use <code>xs:import</code> without requiring <code>schemaLocation</code> attributes (instead, relying only on the namespace value).  These standards may also use <code>xs:include</code>.  This XML Schema construct is disallowed by NIEM.  When standards external to NIEM are required within MPDs, the following rule applies:</p>

<ruleSection>
	<title>MPD External Schema Documents Are Local Resources</title>
	<rule id="r-mpd-other-stds" applicability="WF-MPD" class="Constraint">
		<p>Within an MPD, a non-NIEM-conformant external schema document reference to another schema document and/or namespace MUST <termRef term="resolve URI">resolve</termRef> to a local resource.  <code>schemaLocation</code> attributes or XML catalogs can be used to ensure resolution.</p>
	</rule>
</ruleSection>

	<p>For the case of non-NIEM-conformant schemas, this rule ensures that all schemas (or corresponding artifacts and namespaces) from external standards required for definition, validation, and use of the MPD are present within the archive.</p>

	<p>XML schemas are the heart of MPDs since they formally specify normative structure and semantics for data components.  However, in general, an MPD is a closed set of artifacts.  This means that all hyperlink references within artifacts should <termRef term="resolve URI">resolve</termRef> to the appropriate artifact.</p>

<ruleSection>
	<title>Key MPD Resources Are Local Resources</title>
	<rule id="r-mpd-resources" applicability="WF-MPD" class="Constraint">
		<p>Within any artifact of an MPD archive, any direct reference to another resource (i.e., another artifact such as an image, schema, stylesheet, etc.) that is required to process or display an artifact SHOULD exist within the archive at the location specified by that reference.</p>
	</rule>
</ruleSection>

	<p>This means that MPD artifacts, including documentation artifacts, should be complete.  For example, if an HTML document within an MPD contains a hyperlink reference (<code>href</code>) to an artifact that is part of or used by the MPD, then the file associated with that hyperlink should be present in the MPD; likewise for a sourced (<code>src</code>) image.  Authors should exercise good judgment with this rule.  For example, it does not require an MPD to contain copies of all cited documents from a table of references if it contains hyperlinks to those documents.  The key operating words in this rule are:  "another resource is required to process or display an artifact SHOULD exist within the archive."</p>

	<p>In some cases, it may not be possible to include all artifacts, even schemas, in an MPD without violating laws, regulations, or policies.  For example, an IEPD may require use of a schema document that is not publicly accessible; it might be classified or controlled unclassified information (CUI).  This is a valid reason for exception to <ref idref="r-mpd-resources"/>.  If the IEPD is placed in the public domain, the author should omit the non-public schema document, and if appropriate, document the omission, and explain where and/or how the missing schema document can be obtained.</p>

</section>


<section id="Duplication-of-Artifacts">
	<title>Duplication of Artifacts</title>

	<p>Within an MPD, the replication of files or entire file sets should be avoided.  However, replication is allowed if a reasonable rationale exists.  In some cases, file replication may make it easier to use, validate, implement, or automatically process an MPD.  For example, multiple subsets and/or constraint sets may overlap in many identical schema documents.  Yet, allowing this duplication may be easier or necessary to accommodate a validation tool, rather than removing duplicate schema documents, and forcing the tool to search for them.  Whenever possible, use XML catalogs to coordinate schema assembly.</p> 

</section>
</section>


<p> <char name="nbsp"/> </p>
<!-- ######################## Appendices Begin ########################## -->


<section id="MPD-Catalog-XSD" isAppendix="true">
	<title>MPD Catalog XML Schema Document</title>
	<pre><include-text href="Toolkit/mpd-catalog-3.0.xsd"/></pre>

	<p> <char name="nbsp"/> </p>
</section>



<section id="MPD-Catalog-Document-CoT" isAppendix="true">
	<title>Example MPD Catalog Document for Cursor on Target</title>
	<p>Below is a simple example of an MPD catalog document for a <em>Cursor on Target</em> IEPD.  The entire IEPD is contained in the <ref idref="NIEM-MPD-Toolkit"/></p>
	<pre><include-text href="xsd/sample.3/mpd-catalog.xml"/></pre>

	<p> <char name="nbsp"/> </p>
</section>



<section id="MPD-Schematron-Rules" isAppendix="true">
	<title>Schematron Rules for MPDs</title>

	<p>The following Schematron rules have not been tested.  For now they should be considered experimental (alpha).  In the future, more Schematron rules will be designed, tested, and included with this specification and the <ref idref="NIEM-MPD-Toolkit"/>.  This is not likely to occur until after this specification has been approved and released.</p>

	<p><strong>Apply to MPD catalog document:</strong></p>
	<pre><include-text href="schematron-rules/mpd-catalog.sch"/></pre>

	<p><strong>Apply to MPD catalog document </strong></p>
	<pre><include-text href="schematron-rules/mpd-catalog(xpath2-sa).sch"/></pre>

	<p><strong>Apply to MPD catalog document in a well-formed MPD:</strong></p>
	<pre><include-text href="schematron-rules/mpd-catalog-in-wf-mpd.sch"/></pre>

	<p> <char name="nbsp"/> </p>
</section>


<section id="MPD-Artifacts" isAppendix="true">
	<title>Common MPD Artifacts</title>

	<p>Notes:</p>
	<ul>
		<li><p>(R) in artifact name indicates a required artifact for every MPD.</p></li>
		<li><p>(ref) in definition indicates name is hotlinked to a definition in specification text.</p></li>
		<li><p>* in filename syntax indicates wildcard.</p></li>
	</ul>

<table id="mpd-artifacts">

        <theadr>
		<th>Artifact name</th>
		<th>Filename syntax</th>
		<th>Definition</th>
	</theadr>
	<tr><td>(R) <termRef>MPD catalog document</termRef></td><td>mpd-catalog.xml</td><td>(ref)</td></tr>
	<tr><td>(R) <termRef>readme artifact</termRef></td><td>readme.*</td><td>(ref)</td></tr>
	<tr><td>(R) <termRef>change log</termRef></td><td>changelog.*</td><td>(ref)</td></tr>
	<tr><td>(R) <termRef>conformance assertion</termRef></td><td>conformance-assertion.*</td><td>(ref)</td></tr>
	<tr><td><termRef>XML catalog document</termRef></td><td>xml-catalog.xml</td><td>(ref)</td></tr>
	<tr><td>conformance report</td><td>conformance-report.*</td><td>a formal report on conformance generated by a NIEM-aware tool</td></tr>
	<tr><td>MPD catalog extension <termRef>XML catalog document</termRef></td><td>mpd-catalog-extension-xml-catalog.xml</td><td>an XML catalog that identifies an MPD catalog extension schema document (ref)</td></tr>
	<tr><td>MPD catalog <termRef>extension schema document</termRef></td><td>mpd-catalog-extension.xsd</td><td>a XML schema document that extends an MPD catalog schema (ref)</td></tr>
	<tr><td><termRef>subset schema document</termRef></td><td>*.xsd</td><td>(ref)</td></tr>
	<tr><td><termRef>NIEM wantlist</termRef></td><td>wantlist.xml</td><td>(ref)</td></tr>
	<tr><td><termRef>extension schema document</termRef></td><td>*.xsd</td><td>(ref)</td></tr>
	<tr><td><termRef>external schema document</termRef></td><td>*.xsd</td><td>(ref)</td></tr>
	<tr><td><termRef>reference schema document</termRef></td><td>*.xsd</td><td>(ref)</td></tr>
	<tr><td>IEP sample <termRef>XML document</termRef></td><td>*.xml</td><td>an XML document instance that exemplifies an <termRef>IEP conformance target</termRef> defined by a <code>c:IEPConformanceTarget</code> (ref)</td></tr>
	<tr><td>Schematron schema document</td><td>*.sch</td><td>a business rule schema in ISO Schematron format (<ref idref="ISO-Schematron"/>)</td></tr>
	<tr><td>RelaxNG schema document</td><td>*.rng</td><td>a business rule schema in ISO RelaxNG format (<ref idref="ISO-RelaxNG"/>)</td></tr>
	<tr><td>documentation</td><td>*.*</td><td>a textual or graphic artifact containing notes, instructions, guidance, etc.</td></tr>
	<tr><td>application information</td><td>*.*</td><td>a tool-specific artifact used, generated, exported, imported, etc. by a specific tool; includes models, databases, configuration files, graphics, etc.</td></tr>

</table>

	<p> <char name="nbsp"/> </p>
</section>


<section id="Conformance-Assertion-Example" isAppendix="true">
	<title>Conformance Assertion Example</title>

	<p>A NIEM conformance assertion is a required artifact for an IEPD or EIEM.  The following is a simple example of a conformance assertion (in this case, a self assertion by the author, but with a little assistance from colleagues.  The concept is to provide an implementer with some information that indicates how well an IEPD or EIEM has been checked for quality and conformance with respect to XML Schema and NIEM.  The assertion can be as simple as the <em>assertion</em> clause.  However, clearly the more detail that is provided, the stronger the case for conformance and quality will be.</p>

	<image src="img/niem-conformance-assertion.png"/>

</section>


<section id="Guidance-IEPD-Directories" isAppendix="true">
	<title>Guidance for IEPD Directories (non-normative)</title>

	<p>NIEM releases, core updates, and domain updates generally follow a consistent directory organization.  When employing release and updates within IEPDs and EIEMs whether as-is or as subsets, users are encouraged to maintain their original directory structures.  However, aside from applicable rules previously stated in the preceding sections, there are no normative rules for organizing directories within IEPDs or EIEMs.</p> 

	<p>Guidance for directory structuring may be useful to authors, especially in the case of a relatively simple IEPD or EIEM with a single schema document subset, and a few extension and external schema documents.  The following are common non-normative practice for IEPD directories:</p>

<ol>
	<li><p>Create a root directory for the IEPD from the name and version identifier of the IEPD.  For example <code>my_iepd-3.2rev4</code>. (<ref idref="r-mpd-archive-one-root"/>)</p></li>

	<li><p>The following artifacts are required to be in the <termRef>MPD root directory</termRef> (Note: <code>.*</code> indicates any format):</p>
		<ul>
			<li><p><code>mpd-catalog.xml</code> (<ref idref="r-wf-mpd"/>)</p></li> 
			<li><p><code>changelog.*</code> (<ref idref="r-mpd-changelog-iepd"/>)</p></li>
			<li><p><code>readme.*</code> (<ref idref="r-mpd-readme"/>)</p></li>
			<li><p><code>conformance-assertion.* (<ref idref="r1-conform-assert"/>)</code></p></li>
		</ul></li>

	<li><p>If extending the <termRef>MPD catalog document</termRef>, then per <ref idref="r1-mpd-cat-ext-xml-cat"/> <code>mpd-catalog-extension-xml-catalog.xml</code> must reside in the same relative directory as the <code>mpd-catalog.xml</code> it supports (normally, the <termRef>MPD root directory</termRef>).  <code>mpd-catalog-extension.xsd</code> can be anywhere in the MPD because <code>mpd-catalog-extension-xml-catalog.xml</code> must correlate its namespace to its URI.  However, we recommend both artifacts be co-located in the MPD root directory for visibility:</p>
		<ul>
			<li><p><code>mpd-catalog-extension.xsd</code></p></li>
			<li><p><code>mpd-catalog-extension-xml-catalog.xml</code> (<ref idref="r1-mpd-cat-ext-xml-cat"/>)</p></li>
		</ul></li>

	<li><p>Create the following directories within the <termRef>MPD root directory</termRef>:</p>
		<ul>
			<li><p><code>base-xsd</code> <char name="mdash"/> will contain the NIEM subset and its associated extension, external, and custom NIEM schema documents.  These are the NIEM XML schema documents used to validate conformance of an instance XML document.  Subdirectories under <code>base-xsd</code> may include:</p>
				<ul>
					<li><p><code>niem</code> <char name="mdash"/> a NIEM schema subset organized exactly as the SSGT generates it (including its <code>wantlist.xml</code> and <code>xml-catalog.xml</code>).</p></li>
					<li><p><code>extension</code> <char name="mdash"/> for NIEM extension schema documents.</p></li>
					<li><p><code>external</code> <char name="mdash"/> for non-NIEM standards used by the IEPD.</p></li>
					<li><p><code>niem-custom</code> <char name="mdash"/> for NIEM schema documents that may be customized (extended or restricted) such as <code>structures.xsd</code>.</p></li>
				</ul></li>

			<li><p><code>constraint-xsd</code> <char name="mdash"/> will contain constraint schema documents organized as necessary.  Usually this schema document set will be organized similarly to schema documents in <code>base-xsd</code> because it is customary to start with the base schema set and constrain it as necessary.</p></li>
		</ul></li>

	<li><p>If using Schematron, create a <code>schematron</code> subdirectory for any Schematron schemas (or create the appropriate subdirectory name for any other kinds of business rule artifacts).</p></li>

	<li><p>If using EXI schema documents, create a <code>exi-xsd</code> subdirectory for these.</p></li>

	<li><p>Create an <code>iep-sample</code> subdirectory for sample IEPs (<ref idref="r-iep-samples"/>).</p></li>

	<li><p>If more documentation artifacts (e.g., text, graphics, media) are necessary, create a <code>documentation</code> subdirectory for miscellaneous explanatory documentation.  As needed, create additional subdirectories within this one to organize documentation artifacts.  The <code>readme.*</code> artifact in the <termRef>MPD root directory</termRef> should refer to or index documentation in this subdirectory.</p></li>

	<li><p>If necessary, create an <code>application-info</code> subdirectory for tool-specific artifacts (inputs, outputs, imports, exports, models, etc.).  Again, as needed, use additional subdirectories to organize artifacts of this nature.  <code>readme.*</code> can and should also refer to or index artifacts in this subdirectory.</p></li>

	<li><p>Maintain a <termRef>NIEM wantlist</termRef> within the same subdirectory as the subset it generates (<ref idref="r-wantlist-base"/>).</p></li>

	<li><p>Maintain an <code>xml-catalog.xml</code> closest to the XML schema document set it relates to.  Use <code>er:nextCatalog</code> elements as needed to help maintain this proximity (<ref idref="r-xml-cat-resolution"/>).</p></li>

	<li><p>Finally, if it becomes necessary to maintain multiple <code>constraint-xsd</code> or <code>extension</code> subdirectories (or any other subdirectories) together in the same directory, then simply suffix each directory name with a distinct character string (for example, <code>extension1</code>, <code>extension2</code>, etc.; or <code>extension-abc</code>, <code>extension-zyx</code>, etc.)</p></li>

</ol>

	<p>Obviously, there are many other ways to organize for more complex business requirements in which a single IEPD or EIEM employs multiple releases, subsets, constraint sets, core updates, and domain updates.  Regardless of directory organization and file naming, an IEPD or EIEM author must always configure all IEP conformance targets using the MPD catalog <code>c:IEPConformanceTarget</code> element and the appropriate validation artifacts (such as XML catalogs, Schematron schemas, RelaxNG schemas, etc.).</p>

	<p>The guidance above results in an IEPD directory structure that appears below.  Notes are in parentheses.  Filenames within the <code>extension</code>, <code>external</code>, <code>schematron</code>, and <code>iep-sample</code> subdirectories are non-normative examples.  Authors are free to assign names for such files according to their own requirements (if they do not violate rules in this specification).</p>
<pre><strong>
	/my_iepd-3.2rev4	(root directory of IEPD archive)

		mpd-catalog.xml
		mpd-catalog-extension.xsd
		mpd-catalog-extension-xml-catalog.xml
		changelog.*
		conformance-assertion.*
		readme.*

		/base-xsd

			/niem			(subset)
				/adapters
				/appinfo
				/codes
				/conformanceTargets
				/domains
				/external
				/localTerminology
				/niem-core
				/proxy
				/structures
				wantlist.xml
				xml-catalog.xml

			/niem-custom		(extension/restriction of structures)
				structures.xsd

			/extension
				query.xsd
				response.xsd
				extension1.xsd
				extension2.xsd
				...
				xml-catalog.xml

			/external
				/stix
				/ic-ism
				...
				xml-catalog.xml

		/constraint-xsd			(constraint schema documents)

			/niem			(constraints on subset)
				/adapters
				/appinfo
				/codes
				/conformanceTargets
				...
				wantlist.xml
				xml-catalog.xml

			/extension		(constraints on extensions)
				query.xsd
				extension1.xsd
				xml-catalog.xml

		/exi-xsd
			gml.xsd
			xs.xsd
			...

		/schematron
			business-rules1.sch
			business-rules2.sch
			...
			
		/iep-sample
			query.xml
			request.xml
			...

		/application-info
			... (tool inputs, outputs, etc.)

		/documentation
			... (human readable documentation)
</strong></pre>

	<p> <char name="nbsp"/> </p>
</section>



<section id="Acronyms-and-Abbreviations" isAppendix="true">
	<title>Acronyms and Abbreviations</title>

<table id="acronyms-abbreviations">

        <theadr>
		<th>Acronym / Abbreviation</th>
		<th>Literal or Definition</th>
	</theadr>

	<tr><td>ASCII</td><td>American Standard Code for Information Interchange</td></tr>
	<tr><td>BIEC </td><td>Business Information Exchange Component</td></tr>
	<tr><td>CSV  </td><td>Comma Separated Value (file format)</td></tr>
	<tr><td>CU   </td><td>Core update</td></tr>
	<tr><td>CUI  </td><td>Controlled Unclassified Information</td></tr>
	<tr><td>DU   </td><td>Domain update</td></tr>
	<tr><td>EBV  </td><td>Effective Boolean Value</td></tr>
	<tr><td>EIEM </td><td>Enterprise Information Exchange Model</td></tr>
	<tr><td>GIF  </td><td>Graphic Interchange Format</td></tr>
	<tr><td>GML  </td><td>Geospatial Markup Language</td></tr>
	<tr><td>HTML </td><td>Hyper Text Markup Language</td></tr>
	<tr><td>IEP  </td><td>Information Exchange Package</td></tr>
	<tr><td>IEPD </td><td>Information Exchange Package Documentation</td></tr>
	<tr><td>IRI  </td><td>Internationalized Resource Identifier</td></tr>
	<tr><td>JPG  </td><td>Joint Photographic (Experts) Group</td></tr>
	<tr><td>LEXS </td><td>Logical Entity Exchange Specifications</td></tr>
	<tr><td>MPD  </td><td>Model Package Description</td></tr>
	<tr><td>NCName</td><td>Non-colonized Name (in XML Schema: unqualified; no colon characters)</td></tr>
	<tr><td>NDR  </td><td>Naming and Design Rules</td></tr>
	<tr><td>NIEM </td><td>National Information Exchange Model</td></tr>
	<tr><td>NTAC </td><td>NIEM Technical Architecture Committee</td></tr>
	<tr><td>PDF  </td><td>Portable Document Format</td></tr>
	<tr><td>PMO  </td><td>Program Management Office</td></tr>
	<tr><td>PNG  </td><td>Portable Network Graphic</td></tr>
	<tr><td>QName</td><td>Qualified Name (in XML Schema: qualified by a namespace prefix and colon character)</td></tr>
	<tr><td>RAR  </td><td>Roshal Archive; a compressed archive file format named for its developer, Eugene Roshal</td></tr>
	<tr><td>Rel  </td><td>Release (NIEM)</td></tr>
	<tr><td>RFC  </td><td>Request for Comment</td></tr>
	<tr><td>SSGT </td><td>Schema Subset Generation Tool</td></tr>
	<tr><td>UML  </td><td>Unified Modeling Language</td></tr>
	<tr><td>UPA  </td><td>Unique Particle Attribution</td></tr>
	<tr><td>URI  </td><td>Uniform Resource Identifier</td></tr>
	<tr><td>URL  </td><td>Uniform Resource Locator </td></tr>
	<tr><td>URN  </td><td>Uniform Resource Name</td></tr>
	<tr><td>W3C  </td><td>World Wide Web Consortium</td></tr>
	<tr><td>XMI  </td><td>XML Metadata Interchange</td></tr>
	<tr><td>XML  </td><td>Extensible Markup Language</td></tr>
	<tr><td>XS   </td><td>XML Schema (namespace prefix)</td></tr>
	<tr><td>XSD  </td><td>XML Schema Definition</td></tr>
	<tr><td>XSI  </td><td>XML Schema Instance (namespace prefix)</td></tr>
	<tr><td>XSLT </td><td>Extensible Stylesheet Language Transformation</td></tr>
</table>

	<p> <char name="nbsp"/> </p>
</section>



<section id="References" isAppendix="true">
	<title>References</title>

<reference id="FEA-DRM" label="FEA Data Reference Model">
	<p><em>The Federal Enterprise Architecture Data Reference Model</em>, Version 1.0, September 2004.  Available from <link>http://xml.gov/documents/completed/DRMv1.pdf</link>.  A more recent DRM Version 2.0, 17 November 2005 is available from <link>http://www.whitehouse.gov/omb/assets/egov_docs/DRM_2_0_Final.pdf</link></p>
</reference>

<reference id="GJXDM-IEPD" label="GJXDM IEPD Guidelines">
	<p><em>GJXDM Information Exchange Package Documentation Guidelines</em>, Version 1.1, Global XML Structure Task Force (GXSTF), 2 March 2005.  Available from <link>http://it.ojp.gov/documents/global_jxdm_IEPD_guidelines_v1_1.pdf</link></p>
</reference>

<reference id="ISO-11179-4" label="ISO 11179-4">
	<p><em>ISO/IEC 11179-4 Information Technology <char name="mdash"/> Metadata Registries (MDR) <char name="mdash"/> Part 4: Formulation of Data Definitions Second Edition,</em> 15 July 2004. Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c035346_ISO_IEC_11179-4_2004(E).zip</link>.</p>
</reference>

<reference id="ISO-11179-5" label="ISO 11179-5">
	<p><em>ISO/IEC 11179-5:2005, Information technology <char name="mdash"/> Metadata registries (MDR) <char name="mdash"/> Part 5: Naming and identification principles</em>. Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c035347_ISO_IEC_11179-5_2005(E).zip</link>.</p>
</reference>

<reference id="ISO-RelaxNG" label="ISO RelaxNG">
	<p><em>Document Schema Definition Language (DSDL) <char name="mdash"/> Part 2: Regular-grammar-based validation <char name="mdash"/> RELAX NG</em>, ISO/IEC 19757-2:2008, Second Edition, 15 December 2008.  Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c052348_ISO_IEC_19757-2_2008(E).zip</link>.  See also <link>http://relaxng.org</link>.</p>
</reference>

<reference id="ISO-Schematron" label="ISO Schematron">
	<p><em>Schema Definition Languages (DSDL) <char name="mdash"/> Part 3: Rule-based validation <char name="mdash"/> Schematron</em>, ISO/IEC 19757-3:2006(E), First Edition, 1 June 2006.  Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c040833_ISO_IEC_19757-3_2006(E).zip</link>.</p>
</reference>

<reference id="LEXS" label="Logical Entity Exchange Specifications">
	<p><em>Logical Entity Exchange Specifications</em>, Version 4.0, 27 July 2011.	Available from <link>http://130.207.211.107/content/downloads</link>.</p>
</reference>

<reference id="NIEM-BIEC" label="NIEM BIEC">
	<p><em>Business Information Exchange Components (BIEC)</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), March 2011.  Available from <link>http://reference.niem.gov/niem/guidance/business-information-exchange-components/1.0/</link>.</p>
</reference>

<reference id="NIEM-Conformance" label="NIEM Conformance">
	<p><em>NIEM Conformance</em>, Version 3.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://reference.niem.gov/niem/specification/conformance/3.0/</link>.</p>
</reference>

<reference id="NIEM-CTAS" label="NIEM Conformance Target Attribute Specification">
	<p><em>NIEM Conformance Target Attribute Specification</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://reference.niem.gov/niem/specification/conformance-target-attribute/1.0/</link>.</p>
</reference>

<reference id="NIEM-ConOps" label="NIEM Concept of Operations">
	<p><em>NIEM Concept of Operations</em>, Version 0.5, NIEM Program Management Office, 9 January 2007.  Available from <link>http://reference.niem.gov/niem/guidance/concept-of-operations/</link>.</p>
</reference>

<reference id="NIEM-DomainUpdate" label="NIEM Domain Update Specification">
	<p><em>NIEM Domain Update Specification</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), 5 November 2010.  Available from <link>http://reference.niem.gov/niem/specification/domain-update/1.0/</link>.</p>
</reference>

<reference id="NIEM-HLTA" label="NIEM High-Level Tool Architecture">
	<p><em>NIEM High-Level Tool Architecture</em>, Version 1.1, NIEM Technical Architecture Committee, 1 December 2008.  Available from <link>http://reference.niem.gov/niem/specification/high-level-tool-architecture/1.1/</link>.</p>
</reference>

<reference id="NIEM-HLVA" label="NIEM High-Level Version Architecture"><p><em>NIEM High Level Version Architecture (HLVA)</em>, Version 1.0, NIEM Technical Architecture Committee, 2008.  Available from <link>http://reference.niem.gov/niem/specification/high-level-version-architecture/1.0/</link>.</p>
</reference>

<reference id="NIEM-IEPD" label="Requirements for a NIEM IEPD">
	<p><em>Requirements for a National Information Exchange Model (NIEM) Information Exchange Package Documentation (IEPD) Specification</em>, Version 2.1, June 2006.  Available from <link>http://reference.niem.gov/niem/guidance/iepd-requirements/2.1/</link>.</p>
</reference>

<reference id="NIEM-Implementation" label="NIEM Implementation Guide">
	<p><q>NIEM Implementation Guide</q>, NIEM Program Management Office.  Available from <link>https://www.niem.gov/aboutniem/grant-funding/Pages/implementation-guide.aspx</link>.</p>
</reference>

<reference id="NIEM-Intro" label="NIEM Introduction">
	<p><em>Introduction to the National Information Exchange Model (NIEM)</em>, Version 0.3, NIEM Program Management Office, 12 February 2007.  Available from <link>http://reference.niem.gov/niem/guidance/introduction/</link>.</p>
</reference>

<reference id="NIEM-MPD-1.0" label="NIEM MPD Specification 1.0">
	<p><em>NIEM Model Package Description (MPD) Specification</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), 8 August 2011.  Available from <link>http://reference.niem.gov/niem/specification/model-package-description/1.0/</link>.</p>
</reference>

<reference id="NIEM-MPD-1.1" label="NIEM MPD Specification 1.1">
	<p><em>NIEM Model Package Description (MPD) Specification</em>, Version 1.1, NIEM Technical Architecture Committee (NTAC), 1 October 2012.  Available from <link>http://reference.niem.gov/niem/specification/model-package-description/1.1/</link>.</p>
</reference>

<reference id="NIEM-MPD-3.0" label="NIEM MPD Specification 3.0">
	<p><em>NIEM Model Package Description (MPD) Specification</em>, Version 3.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://reference.niem.gov/niem/specification/model-package-description/3.0/</link>.</p>
</reference>

<reference id="NIEM-MPD-Toolkit" label="NIEM MPD Toolkit">
	<p><q>NIEM Model Package Description Toolkit</q>, Version 3.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://referencce.niem.gov/niem/resource/mpd/3.0/</link>.</p>
	<p>This toolkit contains:  example IEPDs, XML schemas to validate an <code>mpd-catalog.xml</code> artifact, a conformance assertion example, and early alpha versions of untested Schematron rules (and therefore, non-normative).  Other artifacts may be added in the future when appropriate.</p>
</reference>

<reference id="NIEM-NDR" label="NIEM NDR 3.0">
	<p><em>NIEM Naming and Design Rules (NDR)</em>, Version 3.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0/</link>.</p>
</reference>

<reference id="NIEM-SSGT" label="NIEM SSGT">
	<p><q>NIEM Schema Subset Generation Tool</q> (SSGT).  Available from <link>http://tools.niem.gov/niemtools/ssgt/index.iepd</link>.</p>
</reference>

<reference id="NIEM-UserGuide" label="NIEM User Guide">
	<p><em>NIEM User Guide</em>, Volume 1, U.S. Department of Justice, Office of Justice Programs, (date unknown).  Available from <link>http://reference.niem.gov/niem/guidance/user-guide/vol1/</link>.</p>
</reference>

<reference id="OASIS-XML-Catalogs" label="XML Catalogs">
	<p><em>XML Catalogs</em>, Organization for the Advancement of Structured Information Standards (OASIS) Standard v1.1, 7 October 2005.  Available from <link>https://www.oasis-open.org/committees/download.php/14809/std-entity-xml-catalogs-1.1.html</link>.</p>
</reference>

<reference id="Principles-of-Data-Integration" label="Principles of Data Integration">
	<p>Doan, A., Halevy, A., and Ives, X. (2012), <em>Principles of Data Integration</em>, New York, NY: Morgan Kaufmann.</p>
</reference>

<reference id="RAR" label="RAR">
	<p>RARLAB WinRAR, <link>http://win-rar.com</link></p>
</reference>

<reference id="RFC2119-KeyWords" label="RFC 2119 Key Words">
	<p>Bradner, S., <em>Key words for use in RFCs to Indicate Requirement Levels</em>, IETF RFC 2119, March 1997.  Available from <link>http://www.ietf.org/rfc/rfc2119.txt</link>.</p>
</reference>

<reference id="RFC2141-URN-Syntax" label="RFC 2141 URN Syntax">
	<p>Moats, R., <em>URN Syntax</em>, IETF Request For Comment 2141, May 1997.  Available from <link>http://tools.ietf.org/html/rfc2141</link>.</p>
</reference>

<reference id="RFC3986-URI" label="RFC 3986 URI">
	<p>Berners-Lee, T., et al., <em>Uniform Resource Identifier (URI): Generic Syntax</em>, Request for Comment 3986, Network Working Group, January 2005.  Available from <link>http://tools.ietf.org/html/rfc3986</link>.</p>
</reference>

<reference id="RFC3987-IRI" label="RFC 3987 IRI">
	<p>Duerst, M., and Suignard, M., <em>Internationalized Resource Identifiers (IRIs)</em>, Request For Comment 3987, January 2005.  Avalailable from <link>http://tools.ietf.org/html/rfc3987</link>.</p>
</reference>

<reference id="W3-EXI">
	<p><em>Efficient XML Interchange (EXI) Format</em>, Version 1.0, W3C Recommendation, 10 March 2011.  Available from <link>http://www.w3.org/TR/2011/REC-exi-20110310/</link>.</p>
</reference>

<reference id="W3-XML">
	<p><em>Extensible Markup Language (XML)</em>, Version 1.0, Fifth Edition, W3C Recommendation 26 November 2008.  Available from <link>http://www.w3.org/TR/2008/REC-xml-20081126/</link>.</p>
</reference>

<reference id="W3-XML-InfoSet">
	<p><em>XML Information Set</em>, Second Edition, W3C Recommendation 4 February 2004.  Available from <link>http://www.w3.org/TR/2004/REC-xml-infoset-20040204/</link>.</p>
</reference>

<reference id="W3-XML-Namespaces">
	<p><em>Namespaces in XML</em>, Second Edition, World Wide Web Consortium 16 August 2006.  Available from <link>http://www.w3.org/TR/2006/REC-xml-names-20060816/</link>.</p>
</reference>

<reference id="W3-XML-Schema-Datatypes" label="W3C XML Schema Datatypes">
	<p><em>XML Schema Part 2: Datatypes</em>, Second Edition, W3C Recommendation 28 October 2004.  Available from <link>http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/</link>.</p>
</reference>

<reference id="W3-XML-Schema-Structures" label="W3C XML Schema Structures">
	<p><em>XML Schema Part 1: Structures</em>, Second Edition, W3C Recommendation 28 October 2004.  Available from <link>http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/</link>.</p>
</reference>

<reference id="W3-XPath" label="W3C XPath 2.0">
	<p><em>XML Path Language (XPath) 2.0</em>, Second Edition, W3C Recommendation 14 December 2010.  Available from <link>http://www.w3.org/TR/2010/REC-xpath20-20101214/</link>.</p>
</reference>

<reference id="W3-XSLT" label="XSLT v1.0">
	<p><em>XSL Transformations (XSLT)</em>, Version 1.0, W3C Recommendation 16 November 1999.  Available from <link>http://www.w3.org/TR/1999/REC-xslt-19991116</link>.</p>
</reference>

<reference id="W3-XSLT2" label="XSLT v2.0">
	<p><em>XSL Transformations (XSLT)</em>, Version 2.0, W3C Recommendation 23 January 2007.  Available from <link>http://www.w3.org/TR/2007/REC-xslt20-20070123/</link>.</p>
</reference>

<reference id="PKZIP">
	<p><em>APPNOTE.TXT - .ZIP File Format Specification</em>, Version: 6.3.2, Revised: 28 September 2007, Copyright (c) 1989 - 2007 PKWare Inc.  Available from <link>http://www.pkware.com/documents/casestudies/APPNOTE.TXT</link>.</p>
</reference>

</section>


<section><title>Index of Definitions</title>
	<indexOfDefinitions/>
</section>

<section><title>Index of Rules</title>
	<indexOfRules/>
</section>

</document>

