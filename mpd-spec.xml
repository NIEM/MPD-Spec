<?xml version="1.0" encoding="US-ASCII"?>
<document
   xmlns="https://iead.ittl.gtri.org/wr24/doc/2011-09-30-2258"
   xmlns:html="http://www.w3.org/1999/xhtml">
   <title>National Information Exchange Model Model Package Description Specification</title>
   <version>3.0alpha2</version>
  <date>2013-10-16</date>
  <author>NIEM Technical Architecture Committee (NTAC)</author>
  <subsection id="toc">
    <title>Contents</title>
    <tableOfContents/>
  </subsection>
  <subsection>
	<title>Abstract</title>
	<p>This document specifies normative rules and non-normative guidance for building Model Package Descriptions (MPDs) that conform to the National Information Exchange Model (NIEM) version 3.0.</p>
  </subsection>
  <subsection>
    <title>Status</title>
    <p>This document is a draft of the specification for NIEM Model Package Descriptions (MPDs).  It represents the design that has evolved from the collaborative work of the NIEM Business Architecture Committee (NBAC) and the NIEM Technical Architecture Committee (NTAC) and their predecessors.</p>
    <p>This specification is a product of the NIEM Program Management Office (PMO).</p>
    <p>Send comments on this specification via email to <link href="mailto:niem-comments%40lists.gatech.edu?subject=NIEM%20MPD%20Specification%20Version%203.0">niem-comments@lists.gatech.edu</link>.</p>
  </subsection>


<section id="Introduction">
	<title>Introduction</title>

	<p>This specification assumes familiarity with the National Information Exchange Model (NIEM), its basic concepts, architecture, processes, design rules, and general conformance rules.  For novices, the recommended reading list includes:</p>
	<ul>
		<li><p>Introduction to the National Information Exchange Model <ref idref="NIEM-Intro"/></p></li>
		<li><p>NIEM Concept of Operations <ref idref="NIEM-ConOps"/></p></li>
		<li><p>NIEM Naming and Design Rules <ref idref="NIEM-NDR"/></p></li>
		<li><p>NIEM High-Level Version Architecture <ref idref="NIEM-HLVA"/></p></li>
		<li><p>NIEM High-Level Tool Architecture <ref idref="NIEM-HLTA"/></p></li>
		<li><p>NIEM Conformance <ref idref="NIEM-Conformance"/></p></li>
		<li><p>NIEM User Guide <ref idref="NIEM-UserGuide"/></p></li>
		<li><p>NIEM Business Information Exchange Components <ref idref="NIEM-BIEC"/></p></li>
		<li><p>NIEM Implementation Guidelines <ref idref="NIEM-Implementation"/></p></li>
	</ul>

	<p>The foregoing NIEM documents are available at <link>http://reference.niem.gov/niem/</link>.  See <ref idref="NIEM-Implementation"/> for NIEM Implementation Guidelines.</p>

	<p>Those knowledgeable of NIEM should be familiar with the <ref idref="NIEM-NDR"/>, <ref idref="NIEM-HLVA"/>, <ref idref="NIEM-Conformance"/>, and <ref idref="NIEM-BIEC"/>.</p>

	<p>This specification uses and is a peer to the NIEM Naming and Design Rules (NDR) <ref idref="NIEM-NDR"/> and supersedes IEPD guidance previously published in Requirements for a NIEM IEPD <ref idref="NIEM-IEPD"/> and the NIEM User Guide <ref idref="NIEM-UserGuide"/>.  The NIEM User Guide remains a good source for understanding the process of building Information Exchange Package Documentation (IEPD).</p>

<section id="Background">
	<title>Background</title>

	<p>Many fundamental concepts, processes, and products in the NIEM generally involve aggregating electronic files into logical sets that serve a specific purpose.  Examples of such sets include, but in the future may not necessarily be limited to, a NIEM release, core update (CU), domain update (DU), Information Exchange Package Documentation (IEPD), and Enterprise Information Exchange Model (EIEM).  Each of these examples is a NIEM Model Package Description (MPD).</p>

	<definition term="Model Package Description (MPD)">
		<p>A set of related W3C XML Schema documents and other supporting files organized as one of the five classes of NIEM schema sets:</p>
<ul>
	<li><p>Release (major, minor, or micro).</p></li>
	<li><p>Domain update (DU) to a release.</p></li>
	<li><p>Core update (CU) to a release.</p></li>
	<li><p>Information Exchange Package Documentation (IEPD).</p></li>
	<li><p>Enterprise Information Exchange Model (EIEM).</p></li>
</ul>
	<p>A MPD is self-documenting and provides sufficient normative and non-normative information to allow technical personnel to understand how to use or implement it.  A MPD is packaged as a ZIP <ref idref="PKZIP"/> archive file.</p>
	</definition>

	<p>A key NIEM concept used throughout this specification is <em>data component</em>.</p>
		
	<definition term="data component">
		<p>An XML Schema type or attribute group definition; or an XML Schema element or attribute declaration.</p>
	</definition>

	<p>A MPD is a normative specification for XML data components in the format of World Wide Web Consortium (W3C) XML Schema Definition Language <ref idref="W3-XML-Schema-Datatypes"/>, <ref idref="W3-XML-Schema-Structures"/>.  MPD schema documents either (1) define the semantics and structure for NIEM reusable data components, or (2) define implementable NIEM exchange instance documents in W3C Extensible Markup Language (XML) <ref idref="W3-XML"/>.</p>

	<p>A MPD is complete when it has been properly packaged with the schemas, documentation, and supplemental files needed to understand how to use and implement it.  MPD content design, development, and assembly may be difficult and time-consuming, especially if done manually.  Software tools have been shown to significantly reduce the complexity of designing, constructing, changing, and managing MPDs.  In order to reduce ambiguity and to facilitate interoperable and effective tool support, this baseline specification imposes some degree of consistency on the terminology, syntax, semantics, and composition of MPDs.</p>

</section>

<section id="Purpose">
	<title>Purpose</title>

	<p>This document is a normative specification for the various kinds of NIEM MPDs.  The rules and guidance herein are designed to encourage and facilitate NIEM use and tools by balancing consistency, simplicity, and flexibility.  Consistency and simplicity make MPDs easy to design correctly, build rapidly, and find easily (for reuse or adaptation).  Consistency also facilitates tool support.  Flexibility enables more latitude to design and tailor MPDs for complex data exchange requirements.  As such, this document does not necessarily prescribe mandates or rules for all possible situations or organizational needs.  If an organization determines it should impose additional constraints or requirements on its IEPDs beyond those specified in this document (for example, mandating a normative set of business requirements or a domain model within IEPD documentation), then it is free to do so, as long as no conflicts exist with this MPD Specification or the <ref idref="NIEM-NDR"/>.</p>

	<p>This document defines terminology; identifies required and optional (but common) artifacts; defines metadata; specifies normative rules, schemes, and syntax; provides non-normative guidance; and as needed, refers to other related NIEM specifications for more detail.</p>

</section>

<section id="Scope">
	<title>Scope</title>

	<p>This specification applies to information exchange definitions and release products that employ the data component definitions and declarations in NIEM Core and Domains.  It also applies to the NIEM release products and their associated updates.  In particular, this version of this document applies to the following MPDs:</p> 
	<ul>
		<li><p>NIEM releases (including major, minor, and micro releases).</p></li>
		<li><p>NIEM domain updates (DU) <ref idref="NIEM-DomainUpdate"/>.  (Note these are NOT the same as the NIEM domain schemas that are part of numbered releases).</p></li>
		<li><p>Core updates (CU) to NIEM releases.</p></li>
		<li><p>Information Exchange Package Documentation (IEPD) that define NIEM data exchanges.</p></li>
		<li><p>Enterprise Information Exchange Model (EIEM) from which one or more NIEM IEPDs can be built or based.</p></li>
	</ul>
    
	<p>In the future, as required, other types of MPDs may be added to this list.</p>
		
	<p>At any point in time, an incomplete MPD will be in some state of development.  This specification is applicable to such developing products in that it establishes standards for the final, published, production-quality state.  In turn, tool vendors can build, adapt, and/or integrate software tools that will assist in the development of MPDs from raw parts to finished product.</p>

	<p>NIEM is a data layer for an information architecture.  Files in an MPD generally define XML Schema types and declare XML elements and attributes to use in payloads for information exchanges.  While an MPD may also contain files from layers beyond the data layer, this specification is not intended to define details of other architectural layers.  Such files are generally present only to provide additional context, understanding, or assistance for implementing the exchange of payloads.</p>
	
	<p>Authoritative sources are not required to revise MPDs that exist before this specification becomes effective.  However, they are always encouraged to consider revising MPDs to meet this specification, especially when making other significant changes.</p>

</section>

<section id="Audience">
	<title>Audience</title>

<p>The following groups should review and adhere to this specification:</p>
<ul>
	<li><p>The NIEM release manager who is responsible to integrate and publish NIEM releases and core updates.</p></li>
	<li><p>NIEM domain stewards and technical representatives who develop and publish domain updates.</p></li>
	<li><p>NIEM IEPD developers and implementers.</p></li>
	<li><p>NIEM tool developers and vendors.</p></li>
	<li><p>Organizations that intend to develop an EIEM.</p></li>	    
	<li><p>Individuals or groups responsible to review and approve MPDs.</p></li>
</ul>

</section>
</section>



<section id="Concepts-and-Terminology">
	<title>Concepts and Terminology</title>

	<p>The presentation of concepts and terms in this section is sequenced for understanding.  Each subsection builds upon previous ones.  This section concludes with an explanation of each of the five MPD classes and a summary of their similarities and differences.</p>

<section id="Key-Words-for-Requirements-Levels">
	<title>Key Words for Requirement Levels</title>

	<p>Within normative content rules and definitions, the key words MUST, MUST NOT, SHALL, SHALL NOT, SHOULD, SHOULD NOT, MAY, RECOMMENDED, REQUIRED, and OPTIONAL in this document are to be interpreted as described in <ref idref="RFC2119-KeyWords"/>.</p>

</section>

<section id="Character-Case-Sensitity">
	<title>Character Case Sensitivity</title>

	<p>This specification imposes many constraints on the syntax for identifiers, names, labels, strings, etc.  In all cases, unless otherwise explicitly noted, syntax is case sensitive.  In particular, XML files in appendices that define particular artifacts, transformations, and examples are case sensitive.</p>

	<p>Also, note that as a general principle, lower case characters are used whenever such will not conflict with the <ref idref="NIEM-NDR"/>.</p>

</section>

<section id="Artifacts">
	<title>Artifacts</title>

	<p>MPDs are generally composed of files and file sets grouped for a particular purpose.  Each file AND each logical set of such files is called an <em>artifact</em>.  In other words, we refer to a set of files (with a defined purpose) as an artifact, and we refer to each file within that set as an artifact.</p>

	<definition term="artifact">
		<p>A single file with a defined purpose or a set of files logically grouped for a defined purpose.  </p>
	</definition>
			
	<p>An MPD is a collection of artifacts, the purpose for which is to define and document the intended use of the MPD.  While the kernel of an MPD is its XML schema document (XSD) artifacts, there are also other kinds of MPD artifacts.  These may include HTML (or XML converted to HTML for display), text, or graphic files used for human-readable documentation.  An MPD may also have artifacts intended to help assist in or accelerate the use and implementation of the MPD.  For example, these may be XML, UML, or binary files that are inputs to or outputs from software tools used to build, generate, or edit the MPD or its schema document artifacts.   <ref idref="MPD-Artifacts"/> contains a listing of mandatory and common optional artifacts for the five types of MPDs.  The various types of artifacts are described in more detail in subsequent sections.</p>
	
</section>

<section id="Schema-Namespace-Correspondence-in-NIEM">
	<title>Schema Document and Namespace Correspondence in NIEM</title>

	<p>To simplify automatic schema processing and reduce the potential for confusion and error, <ref idref="NIEM-NDR"/> principles state that each NIEM-conformant namespace SHOULD be defined by exactly one reference schema document.  To support this concept, the <ref idref="NIEM-NDR"/> disallows the use of <code>xs:include</code>, and <ref idref="NIEM-NDR"/>.  Furthermore, it mandates the use of the <code>xs:schema targetNamespace</code> attribute in NIEM-conformant schema documents.</p>

	<p>So, (1) each NIEM namespace is defined by a single NIEM-conformant schema document, and (2) each NIEM-conformant schema document declares a target namespace.  NIEM does not permit schema documents without target namespaces, unless they are from sources outside of NIEM.</p>

</section>

<section id="Harmonization">
	<title>Harmonization</title>

	<p>Harmonization is a process that NIEM governance committees and domain stewards iteratively apply to NIEM content (specifically, its semantics, structure, and relationships) during the preparation of a NIEM major or minor release.  The result is change and evolution of the model with the intent of removing semantic duplication and overlap while improving representational quality and usability.</p>

	<definition term="harmonization">
		<p>Given a data model, harmonization is the process of reviewing its existing data definitions and declarations; reviewing how it structures and represents data; integrating new data components; and refactoring data components as necessary to remove (or reduce to the maximum extent) semantic duplication and/or semantic overlap among all data structures and definitions resulting in representational quality improvements.</p>
	</definition>

</section>

<section id="Validation">
	<title>Validation</title>

	<p>This specification often refers to the process of <em>XML validation</em>, that is, validation of XML schemas and instance XML documents.  Generally, this should occur periodically during and after design time to ensure the conformance and quality of an information exchange definition (i.e., XML schema documents or document sets) or instance XML documents.  However, local architecture or policy may dictate the need to validate more often, and in some cases may require runtime validation.</p>

	<p>XML schema document sets that define a NIEM information exchange must be authoritative.  Application developers may use other schemas (e.g., constraint or Schematron schema documents) for various purposes, but for the purposes of determining NIEM conformance, the authoritative reference schema documents (NIEM releases) are relevant.  This does not mean that XML validation must be performed on all instance XML documents as they are served or consumed; only that the instance XML documents validate if and when XML validation is performed.  Therefore, even when validation is not performed, instance XML documents must be valid against the XML schema document sets that specify them.</p>

</section>

<section id="Reference-Schema-Document">
	<title>Reference Schema Documents</title>

	<p>A NIEM <em>reference schema document</em> is a schema document that is intended to be the authoritative definition of business semantics for components within its target namespace.  Reference schema documents include the NIEM Core schema documents, NIEM domain schema documents, and NIEM domain update schema documents.  The normative definition for a reference schema document and applicable conformance rules are found in the <ref idref="NIEM-NDR"/>.  The definition is repeated here:</p>
		
	<definition term="reference schema document">
		<p>An XML Schema document that meets all of the following criteria:</p>
		<ul>
			<li><p>It is a conformant schema document.</p></li>
			<li><p>It is explicitly designated as a reference schema document.  This may be declared by an MPD catalog or by a tool-specific mechanism outside the schema document.</p></li> 
			<li><p>It provides the broadest, most fundamental definitions of components in its namespace.</p></li> 
			<li><p>It provides the authoritative definition of business semantics for components in its namespace.</p></li> 
			<li><p>It is intended to serve as the basis for components in IEPD and EIEM schema documents, including subset, constraint, extension, and exchange schema documents.</p></li> 
		</ul>
		<p>See also <strong>reference schema document set</strong>.</p>
	</definition>

	<definition term="reference schema document set">
		<p>A set of related reference schema documents, such as a NIEM release.  See also <strong>reference schema document</strong>.</p>
	</definition>

	<p>The <ref idref="NIEM-NDR"/> conformance rules for reference schema documents are generally stricter than those for other classes of NIEM-conformant schema documents.  For example, they are required to employ an <code>xs:annotation</code> with <code>xs:documentation</code> and <code>xs:appinfo</code> elements that encapsulate semantic information for each XML element and attribute declaration, and type definition.</p>

	<p>NIEM reference schemas are very uniform in their structure.  As they are the primary definitions for data components, they do not need to restrict other data definitions, and they are not allowed to use XML Schema's complex type restriction mechanisms.</p>

</section>


<section id="Coherence-of-Schema-Sets">
	<title>Coherence of Schema Document Sets</title>

	<p>A NIEM release is always a <em>coherent</em> set of reference schema documents in which multiple versions of semantically identical types or properties do not exist; and all types and properties are uniquely defined and declared.  Each numbered release has been harmonized, tested, and carefully reviewed by NIEM governance committees in order to eliminate semantic duplication.  
		The <ref idref="NIEM-HLVA"/> defines a <em>coherent schema document set</em> as one that has the following properties:</p>

	<definition term="schema document set coherence">
		<p>A schema document set is coherent when it has the following properties:  (1) the set does not refer to a schema document outside the set (i.e., the set is closed), and (2) the set does not include two different versions of the same component in an incompatible way.</p>
	</definition>

	<p>Consider the following simple example of incoherence in the figures below.  Consider <ref idref="incoherent-not-closed"/> in which Justice domain has published a new schema document (version 4.1).  Note the descendant relationships between the old and new data components.  A schema document set consisting of Screening 1.1 and Justice 4.1 is incoherent because it refers to the old Justice 4.0 schema document outside the set, and therefore, violates the first criterion (the set must be closed).  To resolve this we could incorporate the older 4.0 version into this set.  <ref idref="incoherent-incompatible"/> indicates that adding Justice 4.0 violates the second criterion because multiple versions of the same component will exist that are incompatible.  To make a coherent schema document set, either the Screening domain must be adjusted to use the new Justice 4.1 component or the schema document set must be revised to use the Screening domain with Justice 4.0 and not Justice 4.1.</p>

	<figure id="incoherent-not-closed">
		<title>Incoherent schema set - not closed</title>
		<image src="img/incoherent-not-closed.png"/>
	</figure>

	<figure id="incoherent-incompatible">
		<title>Incoherent schema set - incompatible data components</title>
		<image src="img/incoherent-incompatible.png"/>
	</figure>

	<p>In general, two or more versions of a data component are incompatible when a type or element in one version of a schema has been copied to or redefined/redeclared in another, and both versions must exist in the same set because of cross referencing (as in the figure above).  Note that even if all data components have not changed within two versions of the same schema document, a set that contains both schema documents will still be incoherent because the mere duplication of a data component in a new namespace is considered redefinition (and, of course, duplication).</p>

	<p>However, two versions of a data component can also exist in a compatible way.  The compatibility of two different versions of a data component depends on the way the ancestor component was changed to obtain the descendant.  In <ref idref="incoherent-incompatible"/> Justice 4.1 and 4.0 <code>Arrest</code> elements are incompatible because the 4.1 version of <code>Arrest</code> was simply given an additional property (<code>NewElement</code>) and is essentially a redeclaration of the 4.0 version.  This results in two semantically identical elements.  In fact, as already mentioned, even if the <code>ArrestType</code> had remained the same across both versions, the 4.1 version is considered a redefinition and duplication of the 4.0 version.</p>

	<p>On the other hand, if the 4.1 <code>ArrestType</code> had been derived (through type derivation) from the 4.0 version, and the 4.1 <code>Arrest element</code> had been made substitutable for the 4.0 version, then these components would be compatible.  The difference is that these components have a clear relationship to their ancestors that is defined through XML mechanisms, whereas the former components do not.  Furthermore, the substitutability property makes these components easily usable together (i.e., compatible).</p>
	
	<p>The need to be a coherent schema document set is only required by official NIEM releases (major, minor, and micro).  A core update is not absolutely required to be coherent with the core it applies to.  However, except in rare cases, it will be crafted to be coherent.  In order to provide flexibility to domains, a domain update schema document set is not required to be coherent.  Whether or not a domain update is coherent with a given release, is dependent upon its change log which indicates how it changes the schema documents it applies to.</p>

</section>


<section id="MPD-Types">
	<title>MPD Types</title>

	<p>This section details the five classes of MPDs currently defined in NIEM.</p>


<section id="NIEM-Release">
	<title>NIEM Release</title>

	<p>A NIEM <em>release</em> is an MPD containing a full set of harmonized reference schema documents that coherently define and declare all content within a single version of NIEM.  NIEM releases include major, minor, and micro releases (as defined in the <ref idref="NIEM-HLVA"/>).</p>

	<definition term="release">
		<p>A reference schema document set published by the NIEM Program Management Office (PMO) at <link>http://release.niem.gov/</link> and assigned a unique version number.  Each schema document in the set defines data components for use in NIEM information exchanges.  Each release is independent of other releases, although a schema document may occur in multiple releases.  A release is of high quality, and has been vetted by NIEM governance bodies.  A numbered release may be a major, minor, or micro release.</p>
	</definition>

	<p>Current real examples of NIEM releases include NIEM major releases 1.0, 2.0, and 3.0, and minor release 2.1.  Each numbered release is a reference schema document set that includes a NIEM Core (along with the various infrastructure and code list schema documents that supplement Core) and NIEM domain schema documents.</p>

	<definition term="major release">
		<p>A NIEM release in which the NIEM Core reference schema document has changed since previous releases.  The first integer of the version number indicates the major release series; for example, versions 1.0, 2.0, and 3.0 are different major releases.</p>
	</definition>

	<definition term="minor release">
		<p>A NIEM release in which the NIEM Core has not changed from previous releases in the series, but at least one or more domain reference schema documents have changed.  A second digit greater than zero in the version number indicates a minor release (for example, v2.1).  Note also that major v2.0 and minor v2.1 are in the same series (i.e., series 2) and contain the same NIEM Core schema document.</p>
	</definition>

	<definition term="micro release">
		<p>A NIEM release in which neither the NIEM Core nor the domain reference schema documents have changed from the previous major or minor release, but one or more new reference schema documents have been added (without impact to domain or Core schemas).  A third digit greater than zero in the version number indicates a micro release (for example, v2.1.1  note that this release does not exist as of this date).</p>
	</definition>
			
	<p>A micro release is a NIEM release that adds new data components to the Core, domains, or both without removing or modifying existing Core and domain schemas or content.  <ref idref="f-examples-niem-releases"/> illustrates both real (v1.0, v2.0, v2.1, and v3.0) and fictitious (v2.1.1 and v2.1.2) examples of major, minor, and micro release composition.</p>

	<p>Note that a given NIEM reference schema document (target namespace) can exist in multiple numbered releases.  For example, as illustrated in <ref idref="f-examples-niem-releases"/> both NIEM 2.0 and 2.1 contain (and reuse) the same NIEM Core 2.0 schema document.  Reuse of schema documents among releases is carefully coordinated to ensure coherence is maintained within each release.  The <ref idref="NIEM-HLVA"/> defines the processes for numbering releases and identifying the schema documents that compose these sets.  Later, this specification will outline a similar version numbering scheme for MPDs and their artifacts.</p>

	<figure id="f-examples-niem-releases">
		<title>Examples of NIEM numbered releases</title>
		<image src="img/releases.png"/>
	</figure>

</section>


<section id="Domain-Update">
	<title>Domain Update</title>

	<p>A <em>domain update (DU)</em> is an MPD containing a reference schema document or document set and a change log that represent changes to NIEM domains.  The <ref idref="NIEM-HLVA"/> defines a domain update as both a process and a NIEM product.  Through use and analysis of NIEM releases and published content, domain users will identify issues and new data requirements for domains and sometimes Core.  NIEM domains use these issues as the basis for incremental improvements, extensions, and proposed changes to future NIEM releases.  Both the process and product of the process are referred to as domain update.  This MPD Specification is applicable to a domain update product.</p>

	<definition term="domain update">
		<p>A MPD that contains a reference schema document or document set issued by one or more domains that constitutes new content or an update to content that was previously published in a NIEM release.  Domain updates are published to the NIEM Publication Area at <link>http://publication.niem.gov/niem/</link> and available for immediate use within IEPDs.</p>
</definition>

	<p>A domain update may define and declare new versions of content applicable to a NIEM release or other published content.  The issuing domain or domains vet each update, but the update is not subject to review by other NIEM governance.  Before publication, domain updates are technically reviewed for and must satisfy NIEM-conformance, but otherwise have fewer constraints on quality than do NIEM releases.</p> 

	<p>A domain update may apply to one or more domain namespaces within a single NIEM major, minor, or micro release.  A domain steward uses a domain update to:  (1) make new or changed domain content immediately available to NIEM data exchange developers between NIEM releases, and (2) request that new or changed content be harmonized into a future NIEM release.  (See <ref idref="NIEM-DomainUpdate"/> which provides normative details about domain updates and the associated processes.)</p>

</section>


<section id="Core-Update">
	<title>Core Update</title>

	<p>When necessary, the NIEM PMO can publish a <em>core update (CU)</em>.  This is essentially identical to a domain update in terms of structure and use, with two important exceptions.  First, a core update records changes that apply to a particular NIEM core version or another core update.  This also means it is applicable to all NIEM releases using that same core version.  Second, a core update is never published to replace a NIEM core.  It is intended to add new schemas, new data components, new code values, etc. to a core without waiting for the next major release.  In some cases, minor modifications to existing data components are possible.</p>

	<definition term="core update">
	<p>An MPD that applies changes to a given NIEM core schema document or document set.  A core update never replaces a NIEM core; instead, it is used to add new schema documents, new data components, new code values, etc. to a particular NIEM core.  In some cases, a core update can make minor modifications to existing core data components.</p>
</definition>

	<p>As with domain updates, all core updates are published to the NIEM Publications Area, their changes are immediately available for use in IEPDs, and they will be harmonized and integrated into the next major NIEM release.</p>

</section>


<section id="Information-Exchange-Package-Documentation">
	<title>Information Exchange Package Documentation (IEPD)</title>

	<p>NIEM <em>Information Exchange Package Documentation (IEPD)</em> is an MPD that defines a class of instance XML documents that represent a recurring XML data exchange.</p>

	<definition term="Information Exchange Package Documentation (IEPD)">
		<p>An MPD that defines one or more (generally recurring) XML data exchanges.</p>
	</definition>

	<p>A NIEM IEPD is a NIEM-conformant XML schema document set that may include portions of a NIEM Core schema document (and updates), portions of NIEM Domain schema documents (and updates), enterprise-specific or IEPD-specific extension schema documents, and at least one XML document element (or <em>root</em> as defined in <ref idref="W3-XML"/> <link href="http://www.w3.org/TR/2008/REC-xml-20081126/#document">#document</link>) declared in a schema document.  The XML schema documents contained in an IEPD work together to define a class of instance XML documents that consistently encapsulate data for meaningful information exchanges.  Each instance XML document in this class validates against the XML schema document set contained in the IEPD.  XML schema documents in a NIEM IEPD conform to the <ref idref="NIEM-NDR"/> and may use or extend data component definitions drawn from NIEM.  An IEPD may also incorporate and use XML schema documents from other standards that do not conform to NIEM. (See <ref idref="NIEM-NDR"/> for details.)</p>

	<p>An IEPD consists of a set of artifacts (XML schema documents, documentation, sample instance XML documents, etc.) that together define and describe an implementable NIEM information exchange.  An IEPD should contain an XML schema document set and instructional material necessary to:</p>
	<ul>
		<li><p>Understand information exchange context, content, semantics, and structure.</p></li> 
		<li><p>Create and validate XML documents defined by the IEPD, and used for information exchanges.</p></li>
		<li><p>Identify the lineage of the IEPD itself and optionally its artifacts.</p></li>
	</ul>
	<p>A NIEM IEPD defines one or more classes of XML documents.  Each of these XML documents is an <em>Information Exchange Package (IEP)</em> that satisfies all validity constraints for its class as defined by the IEPD.  An IEP is an information message payload serialized as XML and transmitted electronically.  (<ref idref="FEA-DRM"/> and <ref idref="GJXDM-IEPD"/> are the original sources of the terms <em>information exchange package</em> and <em>information exchange package documentation</em>, respectively).</p>

	<definition id="IEP" term="Information Exchange Package (IEP)">
		<p>An XML document that satisfies all the validity constraints for its class as defined by a NIEM IEPD.</p>
	</definition>

	<p>How to declare validity constraints for one or more IEP classes within an IEPD will be covered in more depth in <ref idref="Information-Exchange-Packages"/>.</p>

		<p>Note that NIEM conformance does not require that an IEP be native XML on the transmission medium.  A NIEM-conformant IEP may be encrypted, compressed (e.g., using <ref idref="PKZIP"/>, <ref idref="RAR"/>, <ref idref="W3-EXI"/>, etc.), or wrapped within an envelope mechanism, as long as its original native XML form can be retrieved by the receiver.</p>

</section>


<section id="Enterprise-Information-Exchange-Model">
		<title>Enterprise Information Exchange Model (EIEM)</title>

		<p>As an organization develops IEPDs, it may realize that many of its IEPDs have similar business content.  A collection of closely related business data could be organized at an object level and defined as extension data components.  In NIEM, these extension components are referred to as <em>Business Information Exchange Components (BIECs)</em>, because they are either specific to an organization's business or they represent a more general line of business that crosses organizational lines.  Often they are business data components developed and used by multiple organizations within the same community of interest.  So, instead of an "organization," it is more appropriate and provides better context if we use the term <em>information sharing enterprise</em>.</p>

	<definition term="Information Sharing Enterprise">
		<p>A group of organizations with business interactions that agree to exchange information, often using multiple types of information exchanges.  The member organizations have similar business definitions for objects used in an information exchange and can usually agree on their common BIEC names and definitions.</p>
	</definition>

	<p>Information sharing enterprises may cross various levels of government and involve multiple business domains.  They may be self-defining and can be formal (with specific governance) or informal and <em>ad hoc</em>.  An information sharing enterprise is the primary entity that supports the development and management of BIECs and an associated Enterprise Information Exchange Model (EIEM) (to be discussed next).  Henceforth, unless otherwise stated, all references to an enterprise will implicitly mean information sharing enterprise.</p>

	<p>A <em>Business Information Exchange Component (BIEC)</em> <ref idref="NIEM-BIEC"/> is a NIEM-conformant content model in XML Schema for a data component that meets the specific business needs of an information sharing enterprise for exchanging data about something that is a part of one or more information exchanges.  This data component is tailored and intended to be used consistently across multiple IEPDs built by an enterprise.  A BIEC is a NIEM-conformant data component that is:</p>
<ul>
	<li><p>Reused from a NIEM release (for example, as a subset; with possibly modified cardinality), or</p></li>
	<li><p>Extended per the <ref idref="NIEM-NDR"/> from an existing NIEM data component, or</p></li>
	<li><p>Created per the <ref idref="NIEM-NDR"/> as a new data component that does not duplicate existing NIEM components within a release in use.</p></li>
</ul>
    
	<definition term="Business Information Exchange Component (BIEC)">
		<p>A NIEM-conformant XML schema data component definition or declaration (for a type, element, attribute, or other XML construct) reused, subsetted, extended, and/or created from NIEM that meets a particular recurring business requirement for an information sharing enterprise.</p>
	</definition>

	<p>The use of BIECs has the potential for simplifying IEPD development and increasing consistency of the business object definitions at all steps in the process, including exchange content modeling, mapping to NIEM, creating NIEM extension components, and generating XML schema documents.</p>

	<p>An <em>Enterprise Information Exchange Model (EIEM)</em> is an MPD that incorporates BIECs that meet enterprise business needs for exchanging data using <ref idref="NIEM-BIEC"/>s.  An EIEM is an adaptation of NIEM schema documents, tailored and constrained for and by an enterprise.  An EIEM contains the following schema documents that are commonly used or expected to be used by the authoring enterprise:</p>
	<ul>
		<li><p>One standard NIEM subset schema document set (or reference schema set).</p></li>
		<li><p>One or more NIEM extension schema documents that extend existing NIEM data components or establish new NIEM-conformant data components.</p></li>
		<li><p>Optionally, as needed, one or more NIEM constraint schema document sets (usually based on a subset schema document set).</p></li>
		<li><p>Optionally, as needed, one or more XML schema documents for non-NIEM (i.e., non-conformant) standards with associated extension schema documents that contain adapter types for the data components that will be used from those non-NIEM XML schema documents (per <ref idref="NIEM-NDR"/>).</p></li>
	</ul>

	<definition term="Enterprise Information Exchange Model (EIEM)">
		<p>An MPD that contains a NIEM-conformant schema document set that defines and declares data components to be consistently reused in the IEPDs of an enterprise.  An EIEM is a collection of BIECs organized into a schema document subset and one or more extension schema documents.  Constraint schema documents and non-NIEM-conformant external standards schema documents with type adapters are optional.</p>
	</definition>

	<p>An information sharing enterprise that creates and maintains an EIEM authors IEPDs by reusing its EIEM content instead of (re)subsetting reference schema documents sets and (re)creating extensions.  An EIEM may also contain business rules or constraint schema document sets tailored to enterprise requirements and designed to restrict variability in use of NIEM data components.  This not only saves time, but it also ensures that enterprise IEPDs reuse NIEM and associated extensions consistently.  (XML schema document subsets, extension schema documents, and constraint schema document sets will be defined and discussed in more detail later in this document).  <ref idref="f-family-of-iepds"/> generally illustrates how BIECs, an EIEM, and an IEPD family relate (Constraint schema document sets are optional and not depicted in this figure).</p>

	<figure id="f-family-of-iepds">
		<title>BIECs, EIEM, and a small family of IEPDs.</title>
		<image src="img/iepd-family.png"/>
	</figure>

</section>
</section>


<section id="Similarities-and-Differences-of-MPD-Classes">
	<title>Similarities and Differences of MPD Classes</title>

	<p>It will be helpful to summarize the foregoing discussions by listing the primary similarities and differences among the various types of MPDs.  This will help highlight the nature of this specification as a baseline and point of leverage for all five classes of MPDs:  NIEM release, core update (CU), domain update (DU), IEPD, and EIEM.  Note that these lists are not all inclusive.</p>

	<p>MPD class similarities:</p>
	<ul>
		<li><p>Principal artifacts are XML schema documents (XSD), the purpose for which is to define and declare reusable data components for information exchanges or to define the exchanges themselves.</p></li>
		<li><p>Each MPD requires a self-documenting <code>mpd-catalog.xml</code> artifact containing metadata and a listing of its key artifacts.  This establishes its name, version, class, purpose, general content, lineage, etc.</p></li>
		<li><p>Each MPD requires a change log.</p></li>
		<li><p>Each MPD requires a Uniform Resource Identifier (URI) and a version number.</p></li>
		<li><p>Each MPD must be packaged as a self-contained ZIP archive (in one form).  Self-contained simply means that an MPD has copies of (not just URLs or references to) all schema documents needed to validate instance XML documents it defines.</p></li>
		<li><p>Each MPD may contain optional alternate representations besides XML Schema (for example, generic diagram, UML diagram, XMI, database format, spreadsheet, etc.).</p></li>
	</ul>

	<p>MPD class differences:</p>
	<ul>
		<li><p>IEPDs and EIEMs contain subset, extension, external, and constraint schema documents and document sets.  NIEM releases, core updates, and domain updates contain reference schema document sets.</p></li>
		<li><p>An IEPD must declare at least one XML document element in an XML exchange schema document.  Other MPD classes do not have this requirement.</p></li>
		<li><p>An IEPD must contain at least one sample instance XML document corresponding to each document element declared in exchange schemas.</p></li>
		<li><p>EIEMs and domain updates may optionally contain sample instance XML documents and associated XSLT files to display them.  NIEM releases and core updates do not.</p></li>
		<li><p>A domain update may supersede and replace another published schema document/namespace.  It may also add to or modify content in another published schema document/namespace without including the unchanged content.  Core updates may only add to (supplement); never a replacement for and never modifies a NIEM Core.</p></li>
		<li><p>IEPDs, EIEMs, and NIEM releases are independently complete.  A core update can be issued as a new complete standalone reference schema document to be used with a NIEM core.</p></li>
	</ul>

	<p><ref idref="compare-mpd-classes"/> summarizes the similarities and differences of MPD classes by indicating the characteristics for each:</p>

<table id="compare-mpd-classes">
	<title>Comparison of MPD classes</title>
        <theadr>
            <th width="40">Characteristics of MPD Classes </th>
	    <th width="5" style="CENTER"> Release </th>
	    <th width="5" style="CENTER"> CU </th>
	    <th width="5" style="CENTER"> DU </th>
	    <th width="5" style="CENTER"> IEPD </th>
	    <th width="5" style="CENTER"> EIEM </th>
        </theadr>
	<tr>
            <td>Requires a URI </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>Requires a version number </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>Must be packaged as a ZIP archive </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>May contain alternate model representations (in addition to XSD) </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>Requires XML mpd-catalog (specified by XSD) </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>Requires a formal XML change log (specified by XSD) </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td>   </td>
	    <td>   </td>
	</tr>
	<tr>
            <td>Requires a change log but may be informal; any format </td>
	    <td>   </td>
	    <td>   </td>
	    <td>   </td>
	    <td> X </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>Requires a master document </td>
	    <td>   </td>
	    <td>   </td>
	    <td>   </td>
	    <td> X </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>Its XML schema document set defines reusable data components </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td>   </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>Its XML schema document set defines data exchanges (IEPs) </td>
	    <td>   </td>
	    <td>   </td>
	    <td>   </td>
	    <td> X </td>
	    <td>   </td>
	</tr>
	<tr>
	    <td>Can contain subset, extension, external, constraint, or exchange schema documents </td>
	    <td>   </td>
	    <td>   </td>
	    <td>   </td>
	    <td> X </td>
	    <td>   </td>
	</tr>
	<tr>
            <td>Contains subset, extension, or extension schema documents; optionally constraint schema document sets </td>
	    <td>   </td>
	    <td>   </td>
	    <td>   </td>
	    <td>   </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>Contains reference schema documents only </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	    <td>   </td>
	    <td>   </td>
	</tr>
	<tr>
            <td>Must declare at least one or more XML document elements; thus, requires at least one XML exchange schema document </td>
	    <td>   </td>
	    <td>   </td>
	    <td>   </td>
	    <td> X </td>
	    <td>   </td>
	</tr>
	<tr>
            <td>May contain sample instance XML documents that validate to XML schema document set </td>
	    <td>   </td>
	    <td>   </td>
	    <td> X </td>
	    <td> X </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>Required to be independently complete standalone XML schema document set </td>
	    <td> X </td>
	    <td>   </td>
	    <td>   </td>
	    <td> X </td>
	    <td> X </td>
	</tr>
	<tr>
            <td>May be independently standalone XML schema document set </td>
	    <td>   </td>
	    <td> X </td>
	    <td> X </td>
	    <td>   </td>
	    <td>   </td>
	</tr>
	<tr>
	<td>May supersede other published XML schema documents (target namespaces) </td>
	    <td>   </td>
	    <td>   </td>
	    <td> X </td>
	    <td>   </td>
	    <td>   </td>
	</tr>
</table>

</section>
</section>


<section id="MPD-XML-Schema-Artifacts">
	<title>MPD XML Schema Document Artifacts</title>

	<p>XML schema document artifacts are the essential content of MPDs because they normatively define and declare data components.  The purpose of an MPD is determined by the XML schema document or document set(s) it contains; furthermore, each schema document may have a different purpose.  The <ref idref="NIEM-NDR"/> addresses various types of schema documents as conformance targets:  reference, extension, and constraint schema documents.  Each conformance target may adhere to a different (though possibly overlapping) set of conformance rules.  Consult the <ref idref="NIEM-NDR"/> for these rules.</p>

	<p>Note that exchange schema document is not a conformance target.  The same set of NDR rules for extension schema documents applies to both.  This is because an extension schema document that declares one or more top-level instance XML document elements (i.e., roots) is also identified as an exchange schema document.</p>

	<p>The following subsections will define each type of NIEM schema and identify the types of MPDs that may or must contain them.  The last subsection discusses sample instance XML documents (IEPs) that validate with IEPD schema document sets, and when such instance XML documents are mandatory.</p>


<section id="Reference-Schemas">
	<title>Reference Schema Documents</title>

	<p>This section generally applies to NIEM releases, core updates, and domain updates.  Though not common, it is also valid to use a reference schema document or document set within an IEPD or EIEM.  Reference schema document and reference schema document set were defined earlier in <ref idref="Reference-Schema-Document"/>.</p>

	<p>A NIEM reference schema document is intended to be the authoritative definition schema document for a NIEM target namespace, therefore, all NIEM releases, core updates, and domain updates are composed of a reference schema document set and associated namespaces.   As a standalone artifact, a reference schema document set is always coherent and harmonized such that all types and properties are semantically unique (i.e., multiple versions of semantically identical types or properties do not exist within the set).</p>
	
	<p>As authoritative definitions, NIEM reference schema document sets satisfy more rigorous documentation requirements.  The <ref idref="NIEM-NDR"/> requires that each type definition, and element and attribute declaration in a reference schema document contain an <code>xs:annotation</code> element that defines its semantic meaning.  As will be explained later, extension schema documents are also authoritative definitions, but in a local sense.  They are authoritative within a given IEPD or EIEM, and therefore, must also satisfy the same rigorous documentation rules as reference schema documents.</p>

	<p>Typically reference schema documents contain data components with the most relaxed cardinality (<code>0</code> to <code>unbounded</code>).  However, this is not an absolute requirement.  Cardinality in reference schema documents may be constrained if necessary to model reality.  For example, one might claim that NIEM releases should restrict <code>PersonType</code> to a single occurrence of the element <code>PersonBirthDate</code>.  Every person has one and only one birth date.  Unfortunately, also in reality, criminal persons often present multiple identities with multiple birth dates; and so the capability to represent such is an important data requirement for NIEM.</p>

</section>


<section id="Subset-Schemas">
	<title>Subset Document Schemas</title>

	<p>This section only applies to IEPDs and EIEMs.  NIEM releases, core updates, and domain updates do not contain schema document subsets (only reference schema document sets).</p>


<section id="Basic-Subset-Concepts">
	<title>Basic Subset Concepts</title>
	
	<p>A NIEM <em>schema document subset</em> is a set of XML schema documents that constitutes a reduced set of components derived from a NIEM reference schema document or document set associated with a given numbered release or domain update.  Any given XML schema document within a schema document subset is referred to as a <em>subset schema document</em> (terms reversed).</p>

	<definition term="subset schema document">
		<p>An XML schema document that meets all of the following criteria:</p>
		<ul>
			<li><p>It is built from a referenc schema document set where one or more reference schema documents has been substituted by a its corresponding subset schema document.</p></li>
			<li><p>It is built from a reference schema document by applying subset operations to the XML schema statements in a reference schema document.</p></li>
			<li><p>It is explicitly designated as a subset schema document.  This may be declared by an MPD catalog or by a tool-specific mechanism outside the subset schema document.</p></li>
			<li><p>It has a target namespace previously defined by a reference schema document.  That is, it does not provide original definitions and declarations for schema components, but instead provides an alternate schema representation of components that are defined by a reference schema document.</p></li>
			<li><p>It does not alter the business semantics of components in its namespace.  The reference schema document defines these business semantics.</p></li>
			<li><p>It is intended to express the limited vocabulary necessary for an IEPD or EIEM and to support XML Schema validation for an IEPD.</p></li>
		</ul>
		<p>See also <strong>schema document subset</strong>.</p>
	</definition>

	<p>The primary purpose for a schema document subset is to reduce and constrain the scope and size of a full NIEM reference schema document set for use within an IEPD or EIEM.  Thus, a schema document subsets is derived from a reference schema document set (such as a NIEM release).  Also, note that the process of deriving a schema document subset from a NIEM reference schema document set is optional; it is completely valid to reuse NIEM reference schema documents as-is within IEPDs or EIEMs.</p>

	<definition term="schema document subset">
		<p>An XML schema document set built from a reference schema document set by applying subset operations to the reference schema documents in that set.  See also <strong>subset schema document</strong>.</p>
	</definition>

	<p>Because NIEM adopts an optional and over-inclusive data representation strategy, most elements in a NIEM reference schema have zero to unbounded cardinality.  So, elements with cardinality <code>minOccurs="0"</code> are optional and may be omitted from a subset schema document if not needed for business reasons.  It is also valid to constrain element cardinality within a subset schema document, as long as doing so does not break the subset relationship with the reference schema set.  For example, a reference schema document element with cardinality (<code>minOccurs="0"</code>, <code>maxOccurs="unbounded"</code>) may be constrained to (<code>0</code>,<code>1</code>) or (<code>1</code>,<code>1</code>) in a subset schema document.  However, if a reference schema document element's cardinality is (<code>1</code>,<code>unbounded</code>), it may not be constrained to (<code>0</code>,<code>1</code>) since this breaks the subset relationship.  The interval (<code>0</code>,<code>1</code>) is not contained within, and instead, overlaps the interval (<code>1</code>,<code>unbounded</code>).</p>

	<p>The fundamental rule for a valid schema document subset is as follows:</p>

	<rule id="fundamental-subset">
		<p>Any instance XML document that validates against a NIEM schema document subset will validate against the NIEM reference schema document set from which that schema document subset was derived.</p>
	</rule>
</section>


<section id="Subset-Operations">
	<title>Subset Operations</title>

	<p>NIEM Subset Operations:  These are essentially reduction operations that remove or constrain portions of a reference schema document set, thereby building a profile of the set.  They do not expand the scope (i.e., relax constraints) or change the semantics of reference schema document set content.</p>
	<ol>
		<li><p>Remove an XML comment statement.</p></li>
		<li><p>Remove an <code>xs:annotation</code> (includes <code>xs:documentation</code> and <code>xs:appinfo</code>).</p></li>
		<li><p>Increase the value of an <code>xs:element minOccurs</code> attribute (must be less than or equal to <code>maxOccurs</code> value).</p></li>
		<li><p>Decrease the value of an <code>xs:element maxOccurs</code> attribute (must be greater than or equal to <code>minOccurs</code> value).</p></li>
		<li><p>Remove an <code>xs:element</code> if <code>minOccurs="0"</code>.</p></li>
		<li><p>Remove an <code>xs:complexType</code> or <code>xs:simpleType</code> (if not supporting an element).</p></li>
		<li><p>Remove an <code>xs:attribute</code> from a <code>xs:element</code>.</p></li>
		<li><p>Change an <code>xs:attribute use="optional"</code> to <code>use="prohibited"</code>.</p></li>
		<li><p>Change an <code>xs:attribute use="optional"</code> to <code>use="required"</code>.</p></li>
		<li><p>Remove an <code>xs:schema/xs:element</code> declaration (if not supporting an element use).</p></li>
		<li><p>Set an <code>xs:schema/xs:element</code> to <code>abstract="true"</code>.</p></li>
		<li><p>Remove an <code>xs:enumeration</code> from an <code>xs:simpleType</code> (unless it is the only remaining <code>xs:enumeration</code>).</p></li>
		<li><p>Add or apply a constraining facet to an <code>xs:simpleType</code>.</p></li>
		<li><p>Remove an <code>xs:import</code> and its associated schema document (if the schema document is not used within the document set).</p></li>
		<li><p>Change a concrete element to abstract.</p></li>
		<li><p>Change a nillable element to non-nillable.</p></li>
		<li><p>Substitute an <code>xs:element substitutionGroup</code> member for its associated substitution head.</p></li>
		<li><p>Substitute a composition of <code>xs:element substitutionGroup</code> members for their associated substitution head (subject to cardinality and unique particle attribution (UPA) constraints).  The composition is an ordered sequence of the <code>substitutionGroup</code> member elements.  Each substitute element may bound its cardinality such that the total cardinality sum is within the bounds of the <code>substitutionGroup</code> head cardinality.  Order and cardinality of the replacement sequence must conform to XML Schema UPA constraints.</p></li>
		<li><p>Replace a wildcard (subject to cardinality, UPA, and namespace constraints) with a composition, i.e., an ordered sequence of elements.  Each element may further bound cardinality within the bounds of the wildcard.  Order and cardinality of replacement sequence must conform to XML Schema UPA constraints.  The namespace of each element must conform with namespace constraints specified by the wildcard (if any).</p></li>
</ol>

</section>


<section id="Subset-Namespaces">
	<title>Subset Schema Document Namespaces</title>

	<p>A schema document subset is essentially a reference schema document set (i.e., a numbered release) that has been modified by applying the foregoing subset operations to support business requirements represented in an IEPD or EIEM.  A subset derived from a reference schema set may differ from that reference set only in that its content has been reduced and/or constrained.  For this reason, each subset schema document adopts the target namespace of its corresponding reference schema document.</p>

	<rule id="r-subset-ns">
		<p>Each subset schema document in a schema document subset derived from a reference schema document set bears the same target namespace as the schema in the reference schema document set on which it is based.</p>
	</rule>

</section>



<section id="Multiple-Subsets-in-a-Single-IEPD-or-EIEM">
	<title>Multiple Schema Document Subsets in a Single IEPD or EIEM</title>

	<p>This section only applies to NIEM IEPDs and EIEMs.  NIEM releases, core updates, and domain updates do not contain schema subsets.</p>
	
	<p>Previous sections defined a single schema subset derived from a reference schema set.  In general, an IEPD or EIEM contains a single cohesive schema subset (which may be a rather large set of files) based on one numbered NIEM release or domain update.</p>
	
	<p>However, this specification does not restrict the number of different subsets that may be employed within a single IEPD or EIEM.  Furthermore, it does not restrict the employment of subsets from different numbered releases within a single IEPD or EIEM.  However, exercising this degree of flexibility makes it critically important that developers understand the potential consequences. NIEM subsets represent a delicate compromise between flexibility and interoperability.  On the one hand, a set of IEPDs based on the same subset and numbered release use identical data components, thereby enhancing interoperability.  On the other hand, mixing dissimilar subsets from the same numbered release or mixing subsets derived from various numbered releases has the potential to negatively impact interoperability through incoherence and ambiguity.</p>

	<p>The NIEM mandate that every schema have a unique namespace prevents name conflicts between reference schema sets and between two subsets derived from different reference sets.  In spite of namespace distinction, mixing subsets of multiple reference schema sets can still introduce multiple versions of semantically equivalent data components, a potentially ambiguous situation.  Even employing multiple subsets together that have been derived from the same reference set has the potential to create a similar result. Above all, it is the developer's responsibility to ensure that, if mixing subsets from one or more numbered releases within a single IEPD or EIEM, these artifacts are carefully coordinated and clearly documented to ensure the various versions of semantically equivalent data components and different schemas with the same namespaces will not cause conflicts, confusion, and/or failure during validation or exchange implementation.</p>

</section>
</section>


<section id="Extension-Schemas">
	<title>Extension Schema Documents</title>

	<p>This section only applies to NIEM IEPDs and EIEMs.  NIEM releases, core updates, and domain updates do not contain extension schema documents.</p> 

	<definition term="extension schema document">
		<p>A NIEM-conformant schema document that adds domain or application specific content to the base NIEM model.</p>
	</definition>

	<p>The <ref idref="NIEM-NDR"/> defines an IEPD <em>extension schema document</em> as a conformance target.  In general, an extension schema document contains components that use or are derived from the components in reference schema documents.  It is intended to express the additional vocabulary required for an IEPD, above and beyond the vocabulary available from reference schema documents.</p>

	<p>An IEPD or EIEM developer who determines that NIEM is missing elements required for a given information exchange has two options to account for such requirement shortfalls.  Using rules and techniques outlined in the <ref idref="NIEM-NDR"/>:</p>
	<ul>
		<li><p>Extend an existing NIEM data component (if possible).</p></li>
		<li><p>Build a new NIEM-conformant data component.</p></li>
	</ul>

	<p>A NIEM extension schema document may contain data components built from both options above.  Employment of extension schema documents in an IEPD is entirely optional.</p>

	<p>Multiple extension schema documents are allowed in a single IEPD.  Developers will likely want to reuse many of their extension schema documents in other IEPDs.  Therefore, the best practice for extension is to group all data components designed to reuse into one extension schema document or document set, and group IEPD-specific data components into another.  Then the reusable extension components can be more easily redeployed in other IEPDs as needed.</p>

	<p>Extension schema documents generally contain new data component declarations that may (though not necessarily) be derived from or reference existing NIEM data components.  This being the case, reference schema documents do not exist for new data components found within extension schema documents.  Therefore, extension schema documents must satisfy the more rigorous documentation requirements of reference schema documents.  Per the <ref idref="NIEM-NDR"/>, the definition or declaration of each new data component in an extension schema document must include an <code>xs:annotation</code> element that provides its semantics and NIEM-specific relationships.</p>

</section>



<section id="External-Schemas">
	<title>External Schema Documents</title>

	<p>NIEM allows the use of <em>external schema documents</em> that do not conform to NIEM.  Data components declared and defined in external schema documents require NIEM <em>adapter types</em> to identify the fact they do not conform to NIEM.</p>

	<definition term="external schema documents">
		<p>Any XML schema document that is not a NIEM-supporting schema and that is not NIEM-conformant.
		</p>
	</definition>	

	<p>Refer to the <ref idref="NIEM-NDR"/> for details about external schemas, adapter types, and the rules describing their usage.</p> 

</section>



<section id="Exchange-Schema-Documents">
	<title>Exchange Schema Documents</title>

	<p>This section only applies to IEPDs.  NIEM releases, core updates, domain updates, and EIEMs do not contain exchange schema documents.</p>

	<p>An IEPD defines one or more NIEM XML data exchanges, and therefore, a class of instance XML documents, each of which validates against the XML schema document set in that IEPD.  A NIEM IEP (i.e., an instance XML document) contains exactly one and only one XML document element, which is its root element, and which cannot appear in the content of any other element within that instance XML document.  This is by definition in <ref idref="W3-XML"/> and <ref idref="W3-XML-InfoSet"/>.</p>

	<p>An IEPD <em>exchange schema document</em> is an extension schema document that declares one or more document elements.  The <em>exchange schema document</em> is not a NIEM conformance target itself, instead it conforms to the <ref idref="NIEM-NDR"/> extension schema document conformance target.</p>

	<definition id="exchange" term="exchange schema document">
		<p>A NIEM-conformant extension schema document that declares one or more XML document elements (top-level) each of which is intended to be used as a document element for an IEP.</p>
	</definition>

	<p>The <ref idref="NIEM-NDR"/> does not allow local element declarations, so all extension schema documents can potentially declare XML document elements.  What distinguishes an exchange schema document from other extension schema documents is the intent for one or more of its declared elements to be an XML document element within an IEP.  Intent can be asserted implicitly by convention (generally, for simple IEPDs) or explicitly by configuration (for more complex IEPDs).  The details of these methods are discussed in <ref idref="MPD-Catalog"/> and <ref idref="Normative-Guidance-Directories"/>.</p>

	<p>Although generally rare, it is possible to develop an IEPD without an extension schema.  If an author creates an IEPD based entirely on existing NIEM elements, then no extension schema is necessary.  In this case, the exchange schema defines a document element type to contain only existing NIEM elements drawn from a subset or reference schema documents, and declares the documen element of that type.  <ref idref="exchange"/> (and <ref idref="r-mpd-iep-root"/>) ensures that an exchange schema document declares document elements intended for use as the root of an instance XML document.  Because the <ref idref="NIEM-NDR"/> requires all elements be declared with global scope, element declarations not intended to be a document element of an IEP must be placed into extension schema documents.</p>


	<section id="IEP-Root-Element">
	<title>IEP Root Element</title>

	<p>An IEP could later be used as the payload of an XML envelope (i.e., another instance XML document, such as a SOAP message).  That XML envelope will have its own document element, and the IEP no longer contains the document element for the instance XML document.  Therefore, in the context of an IEPD, it is more appropriate to refer to a document element as an <em>IEP root element</em>.</p>

	<definition term="IEP root element">
		<p>The top-level (parent) element of an IEP.  In the absence of any other XML wrapping of that IEP, the IEP root element is that IEP's XML document element.</p>
	</definition>

	<p>An IEPD may contain multiple exchange schema documents and each of those documents may contain multiple IEP root elements within a single exchange document.  However, at a minimum:</p>

	<rule id="r-mpd-exchange"><p>A NIEM IEPD MUST contain at least one exchange schema document artifact that declares at least one IEP root element.</p>
	</rule>

	<p>The flexibility provided by allowing the declaration of multiple IEP root elements and multiple exchange schema documents in a single IEPD has the potential to be both powerful and problematic.  Again, developers are responsible to carefully coordinate and clearly document multiple roots and/or multiple exchange schema documents in a single IEPD to prevent ambiguity and misinterpretation related to validation, implementation, and use.</p>

	<p>It is good practice to maintain namespace cohesion.  IEP root elements that tend to change together, may be easier to maintain if grouped in the same namespace (i.e., a single exchange schema document).  IEP root elements that tend to change independently, may be easier to maintain in separate namespaces (i.e., multiple exchange schema documents).  Furthermore, while there are no restrictions on the number of IEP root elements and exchange schema documents, it may be best to first consider declaring one root per exchange schema document if this arrangement can support the IEPD business requirements.  If not, only then consider scaling upward.</p>

	<p>The <ref idref="NIEM-NDR"/> does not allow local element declarations; all NIEM elements are declared with global scope at the top level.  This means that any new element declaration in a NIEM-conformant exchange schema document has the potential to be the root element in a corresponding IEP.  Therefore, if an IEPD author does not intend for a new element to be used as an IEP root element, then do not declare it in a NIEM exchange schema document.</p>

	<rule id="r-mpd-iep-root">
		<p>An IEPD exchange schema MUST NOT declare any XML element that is not intended for use as an IEP root element.</p>
	</rule>

	<p>Note that this rule does not preclude the use (through <code>ref=</code>) of other elements within the exchange schema document that are declared globally elsewhere within an IEPD.  In general, elements that must be used within an exchange schema document, but are not intended to be IEP root elements should be declared in extension schema documents that are not exchange schema documents.  (See <ref idref="Declaration-of-IEP-Root-Elements"/> and <ref idref="Normative-Guidance-Directories"/> for explicit and implicit methods for asserting intent.)</p>

</section>
</section>



<section id="Base-Schema-Set">
	<title>Base Schema Document Set</title>

	<p>Within an MPD, the <em>base schema document set</em> is the XML schema document set that defines the information exchange or model in the MPD.  This set may incorporate NIEM-conformant reference, subset, extension, and exchange schema documents, as well as schema documents from an external non-NIEM-conformant source (for example, GML).</p>

	<definition term="base schema document set">
		<p>A NIEM MPD artifact that is the set of all NIEM-conformant and external non-conformant XML schema documents that together specify an information exchange or information model for an MPD.  A base schema document set may incorporate reference, subset, extension, and exchange schema documents, as well as external schema documents from authoritative sources outside of NIEM.  Constraint schema documents and sets <ref idref="Constraint-Schemas"/> are NOT part of a base schema document set.</p>
	</definition>

	<rule id="r-mpd-one-base">
		<p>An MPD MUST contain one and only one base schema document set.</p>
	</rule>

</section>


<section id="Constraint-Schemas">
	<title>Constraint Schema Documents and Document Sets</title>

	<p>This section only applies to NIEM IEPDs and EIEMs which may use constraint schema documents or document sets.  NIEM releases, core updates, and domain updates do not contain constraint schema documents.</p>

	<p>A <em>constraint schema document</em> is an optional IEPD or EIEM artifact that is used to express business rules for a class of instance XML documents, and is not assumed to be a definition for the semantics of the components it contains and describes.  Instead, a constraint schema document uses the XML Schema Definition Language to add constraints to components defined or declared by other schema documents, usually from a schema document subset.</p>

	<definition term="constraint schema document">
		<p>A schema document which imposes additional constraints on NIEM-conformant instance XML documents.  A constraint schema document or document set validates additional constraints imposed on an instance XML document only after it is known to be NIEM-conformant (i.e., has been validated with a reference schema document set, or subset schema document set, and applicable extension and exchange schema documents).  Constraint schema document validation is a second-pass validation process that occurs independently of and after conformance validation.  A constraint schema document need not validate constraints that are applied by other schema documents.  See also <strong>constraint schema document set</strong>.</p>
	</definition>

	<definition term="constraint schema document set">
		<p>A set of related constraint schema documents that work together, such as a constraint schema document set built by adding constraints to a schema document subset.  See also <strong>constraint schema document</strong>.</p>
	</definition>
	
	<p>Constraint schema documents are generally useful when it is necessary to impose restrictions that are more complex than cardinality.  If only cardinality restrictions are needed, then it is easier and more efficient to set these directly in the subset schema documents and avoid the use of constraint schema documents.  Otherwise, constraint schema documents may be necessary.  Note however, that any cardinality restrictions placed on NIEM release components within schema document subsets must not violate the rules established in <ref idref="Basic-Subset-Concepts"/> which define the relationship of a subset schema document to the reference schema document on which it is based.</p>  
		
	<p>The <ref idref="NIEM-NDR"/> provides a normative definition and description of constraint schema documents.  However, a few points are worth mentioning here.</p>

	<p>Use of constraint schemas is one option for applying additional business rules to or tightening constraints on NIEM IEPs beyond what NIEM itself provides.  This particular technique uses the XML Schema Definition Language <ref idref="W3-XML-Schema-Datatypes"/>, <ref idref="W3-XML-Schema-Structures"/>.  NIEM also allows other methods that do not use XML Schema, such as <ref idref="ISO-Schematron"/> or other methods.  However, at this time there are no normative rules for how these techniques should be employed in NIEM IEPDs or EIEMs.  Therefore, if other techniques are used, it is a developer responsibility to incorporate appropriate artifacts and clear documentation.</p>

	<p>Constraint schema documents are generally designed and employed in sets, similar to reference schema document set or schema document subsets.  A common practice for creating an IEPD or EIEM constraint schema document set is to start with a valid NIEM schema document subset and modify it to further restrict the class of instance XML documents (IEPs) that will validate with this constraint schema set.  However, an extension or exchange schema document can also be used to derive a constraint schema document.  The namespace of a constraint schema document is established the same way the namespace of a subset schema document is established, by reusing the target namespace of the schema document from which it is derived.</p>

	<rule id="r-mpd-tgtns">
		<p>A constraint schema document MUST bear a target namespace that has been previously assigned to a reference, extension, or exchange schema document, or is a constraint schema document intended to support another constraint schema document that has such a target namespace.</p>
	</rule>

	<p>To use a constraint schema document set to tighten constraints on IEPs, a two-pass validation technique is employed.  In the first pass, an IEP is validated against the schema document subset, extension schema documents, and one exchange schema document.  This pass ensures that IEP semantics and structure conform to the NIEM model and NDR.  In the second pass, an IEP is checked against a constraint schema document set, which may contain constrained versions of the subset schema documents, extension schema documents, and the appropriate exchange schema document.  This pass ensures that the IEP also satisfies the additional constraints (i.e., business rules that the first pass was unable to validate).</p>

	<p>There is no restriction on the number of constraint schema document sets that an IEPD or EIEM can employ.  As in other advanced situations, developers must clearly document their intentions for and use of multiple constraint schema document sets.</p>

	<p>In general, constraint schema documents have far fewer requirements than other classes of NIEM schema documents.  Since they work in tandem with NIEM normative schema documents, constraint schema documents are allowed to use the XML Schema Definition language in any way necessary to express business rules.  This means that to constrain instance XML documents, constraint schema documents can employ XML Schema constructs that are not allowed in other classes of NIEM schema documents.</p>

	<p>BIECs in particular may have additional business rules in constraint schema documents.  A normative NIEM BIEC Specification (not available at the time of the publication of this MPD Specification), will supplement or obviate constraint schema documents with consistent and formal techniques for representing business rules within NIEM components.  However, as already mentioned, the MPD Specification does not prohibit or restrict the application of formal business rule techniques to MPDs now.</p>

	<p>Finally, within an MPD, constraint schema documents and document sets are completely distinct from and not a part of the base schema document set.  In the future, NIEM will adopt business rules over constraint schema documents as the preferred method for further constraining a base schema document set.</p>

</section>



<section id="Classes-of-MPDs-vs.-Classes-of-Schemas">
	<title>Classes of MPDs vs. Classes of Schema Documents</title>

	<p>The chart in <ref idref="classes-mpds-xsds"/> summarizes which types of schema documents are contained in which classes of MPDs and where they are not applicable (NA = Not Applicable; U = unbounded).</p>

	<p>Notice that only NIEM releases, core updates, and domain updates contain reference schema document sets, while only IEPDs and EIEMs contain the user-developed schema document sets.  The pluses (+) indicate that a NIEM-conformant IEPD or EIEM must have at least one schema document that is either a NIEM reference schema document or a NIEM subset schema document derived from a NIEM reference schema document (See <ref idref="r-mpd-ref-sub"/>).</p>

<table id="classes-mpds-xsds">
	<title>Schema document classes vs. MPD classes</title>
        <theadr>
            <th>Schema Document Classes</th>
	    <th>Release </th>
	    <th>CU </th>
	    <th>DU </th>
	    <th>IEPD </th>
	    <th>EIEM </th>
        </theadr>
	<tr>
            <td>Reference </td>
	    <td> 1,U </td>
	    <td> 1,U </td>
	    <td> 1,U </td>
	    <td> 0<strong>+</strong>,U </td>
	    <td> 0<strong>+</strong>,U </td>
	</tr>
	<tr>
            <td>Subset </td>
	    <td> 0,0 </td>
	    <td> 0,0 </td>
	    <td> 0,0 </td>
	    <td> 0<strong>+</strong>,U </td>
	    <td> 0<strong>+</strong>,U </td>
	</tr>
	<tr>
            <td>Constraint </td>
	    <td> 0,0 </td>
	    <td> 0,0 </td>
	    <td> 0,0 </td>
	    <td> 0,U </td>
	    <td> 0,U </td>
	</tr>
	<tr>
            <td>Extension </td>
	    <td> 0,0 </td>
	    <td> 0,0 </td>
	    <td> 0,0 </td>
	    <td> 0,U </td>
	    <td> 0,U </td>
    	</tr>
    	<tr>
            <td>External </td>
	    <td> 0,U </td>
	    <td> 0,U </td>
	    <td> 0,U </td>
	    <td> 0,U </td>
	    <td> 0,U </td>
    	</tr>
	<tr>
            <td>Exchange </td>
	    <td> 0,0 </td>
	    <td> 0,0 </td>
	    <td> 0,0 </td>
	    <td> 0,U </td>
	    <td> 0,0 </td>
    	</tr>
</table>

	<rule id="r-mpd-ref-sub">
		<p>A NIEM-conformant IEPD or EIEM MUST contain at least one schema document that is either a NIEM reference schema document or a subset schema document derived from a NIEM reference schema document.</p>
</rule>

</section>
</section>


<section id="MPD-Documentation-Artifacts">
	<title>MPD Documentation Artifacts</title>
	
	<p>XML schema documents (and the schemas that result from them) are the essence of a NIEM MPD.  All other artifacts are considered documentation.</p>

	<p>A variety of documentation files may be incorporated into a NIEM MPD.  However, in addition to XML schema documents, there are only two mandatory documentation artifacts required by every MPD:  the <em>mpd-catalog</em> and the <em>change log</em>.  An mpd-catalog (<code>mpd-catalog.xml</code>) contains basic metadata, relationship and lineage data, and validation information.  The change log provides a history of modifications.</p>

	<p>A <em>master document</em> is mandatory for IEPDs and EIEMs.  These MPD classes are built by different developers, and may be registered into a repository for reuse by many other users, developers, and implementers; therefore, a minimal form of documentation is absolutely necessary.  An IEPD or EIEM master document is the primary source and starting point for human readable documentation (similar to a <code>readme</code> file), and should reference (and describe) any other separate documentation artifacts.  This requirement ensures that baseline documentation is consistently rooted in a clearly visible artifact within each IEPD and EIEM.</p>

	<p>The following subsections will address these artifacts and the concepts, metadata, and content each supports.</p>



<section id="MPD-Catalog">
	<title>NIEM MPD Catalog</title>

	<p>Every NIEM MPD describes itself through a mandatory <em>mpd-catalog</em> artifact.  An mpd-catalog is a multi-purpose XML file containing metadata that describes an MPD's</p>
	<ul>
		<li><p>Unique identification</p></li>
		<li><p>Basic descriptive characteristics</p></li>
		<li><p>Key directory structure and key artifacts</p></li>
		<li><p>Lineage and relationships to other MPDs</p></li>
	</ul>
	
	<p>This metadata is designed to be the minimal required that will facilitate human understanding, tool support, and machine processing.  The MPD uses and functions that the mpd-catalog is designed to support include (but are not limited to):</p>
	<ul>
		<li><p>Identification of key artifacts</p></li>
		<li><p>Conformance and validation</p></li>
		<li><p>Generation of a hyperlinked display using XSLT</p></li>
		<li><p>Browsing and understanding of artifacts and their content</p></li>
		<li><p>Automatic registration in a registry/repository</p></li>
		<li><p>Search, discovery, retrieval of MPDs (through metadata)</p></li>
		<li><p>Reuse of MPDs and their artifacts</p></li>
		<li><p>Reuse of BIECs and associated EIEMs</p></li>
		<li><p>Tracing and analysis of MPD lineage</p></li>
	</ul>

	<rule id="r-mpd-catalog">
		<p>An MPD MUST contain an XML mpd-catalog artifact that (1) validates with the NIEM MPD catalog schema (XSD) <ref idref="MPD-Catalog-XSD"/>, and (2) resides in the root directory of the MPD archive, and (3) bears the file name <code>mpd-catalog.xml</code>.</p>
</rule>

<p>The mpd-catalog identifies basic metadata, key artifacts, and MPD and artifact relationships.  When needed, it also provides specific information for how to qualify and validate a candidate IEP for the given IEPD.  The mpd-catalog is important for generating a table of contents display, registration, search and discovery, and MPD and artifact lineage.  <ref idref="MPD-Catalog-XSD"/> defines the structure and semantics for a NIEM <code>mpd-catalog.xml</code> file.</p>



<section id="MPD-Catalog-TOC">
	<title>MPD Catalog as a Table of Contents</title>

	<p>A NIEM mpd-catalog is not required to identify or record every artifact in the MPD.  The MPD author decides which artifacts (files and sets) are important enough to include in the mpd-catalog.  The author may choose to include all artifacts, some artifacts, or no artifacts.</p> 

	<p>The mpd-catalog is designed to identify, classify, and describe any artifact, its path name, dependencies, and lineage.  Employing XSLT, an mpd-catalog can be transformed into an <code>index.html</code> artifact that displays a hyperlinke MPD table of contents and metadata summary for human review in a browser.</p>

</section>
</section>


<section id="Metadata-Concepts">
	<title>Metadata Concepts</title>

	<p>The mpd-catalog also contains both required and optional metadata for the MPD and its artifacts.  The following subsections specify the syntax, formats, and semantics for that metadata.</p>



<section id="Version-Numbering-Scheme">
	<title>Version Numbering Scheme</title>

	<p>Published MPDs will be periodically revised and updated; therefore, versioning is required to clearly indicate changes have occurred.  A version number is actually part of the unique identification for an MPD (to be discussed in <ref idref="URI-Scheme-for-MPDs"/>).  For this reason:</p>

	<rule id="r-mpd-version">
		<p>Every MPD MUST be assigned a version number.</p>
	</rule>

	<p>In order to maintain some consistency while allowing reasonable flexibility to authors, this specification establishes a simple version numbering scheme that is consistent with most common practices.  This is the same version numbering scheme that is used for NIEM releases.</p>

	<rule id="r-mpd-vers-syntax">
		<p>All NIEM version numbers adhere to the regular expression:</p>
	<pre>	version ::= digit+ ('.' digit+)* (status digit+)?
	Where:	
		digit   ::= [0-9]
		status  ::= 'alpha' | 'beta' | 'rc' | 'rev'
		'alpha' indicates early development
		'beta' indicates late development; but changing 
			or incomplete
		'rc' indicates release candidate; complete but 
			not approved as operational
		'rev' indicates very minor revision that does 
			not impact schema validation</pre>
	<p>(The regular expression notation used above is from <ref idref="W3-XML"/> <link href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation">#sec-notation</link>)</p>
</rule>

<p>The regular expression in <ref idref="r-mpd-vers-syntax"/> allows the following example version numbers:</p>
	<ul>
		<li><p><code>1</code></p></li>
		<li><p><code>1.2</code></p></li>
		<li><p><code>1.3.1.0</code></p></li>
		<li><p><code>1.2alpha13</code></p></li>
		<li><p><code>199.88.15rev6</code></p></li>
	</ul>

	<p>There are two implications in <ref idref="r-mpd-vers-syntax"/>.  The first is that in some cases this version scheme implies and confirms a chronology of releases.  For example, a given product labeled version 2.3 must have been released before the same product labeled 2.3.1.  Therefore, version 2.3.1 is more current than version 2.3.</p>

	<p>However, this is a multi-series version scheme, and chronological relationships exist only within a given series.  So, for example, nothing can be said about a chronological relationship between versions 2.2.4 and 2.3.  This is because version 2.2.4 is in a different series (i.e., 2.2) and could actually have been released after 2.3.  <ref idref="version-sys"/> illustrates a system of versions that uses the numbering scheme of <ref idref="r-mpd-vers-syntax"/>.</p>

<figure id="version-sys">
	<title>Example versioning system</title>
	<image src="img/version-sys.png"/>
</figure>

	<p><ref idref="version-sys"/> illustrates eight different version series.  Within this illustration these are the only sequences that have chronological relationships that can be identified through version numbers.</p>
	<ul>
		<li><p>Series 2 is {2.2, 2.3, 2.4}</p></li>
		<li><p>Series 3 is {3.0, 3.1, 3.2}</p></li>
		<li><p>Series 2.2 is {2.2(.0), 2.2.1, 2.2.2, 2.2.3, 2.2.4}</p></li>
		<li><p>Series 2.3 is {2.3(.0), 2.3.1}</p></li>
		<li><p>Series 2.4 is {2.4(.0), 2.4.1}</p></li>
		<li><p>Series 3.0 is {3.0(.0), 3.0.1, 3.0.2}</p></li>
		<li><p>Series 3.1 is {3.1(.0), 3.1.1}</p></li>
		<li><p>Series 3.2 is {3.2(.0), 3.2.1, 3.2.2}</p></li>
	</ul>

	<p>The second implication of <ref idref="r-mpd-vers-syntax"/> is that pre-releases are easily identified by the strings <code>alpha</code>, <code>beta</code>, and <code>rc</code>.  These strings are simple visible indicators of MPD status or stage of development.</p>

	<p>This specification places no further restrictions or meaning (implied or otherwise) on a version number.  Authors have the option to use integers between dots to indicate degree of compatibility or other relationships between versions as needed.  For example, for a given MPD, the author may declare that if an instance validates to version 4.2.3, then it will also validate to version 4.2.  Such a claim is acceptable.  However, this specification does not imply any such relationships.  Any meaning assigned to version sequence by an authoritative source should be unambiguously documented within the MPD.</p>

	<rule id="r-vers-compatability">
		<p>MPD version numbers within a version series do NOT imply compatibility between versions.  Compatibility between or among MPD versions MUST be explicitly stated in documentation.</p>
	</rule>

	<p>Note that an author who updates an existing MPD to a new version may choose the version number based on its previous version number or not, as long as it follows the version number syntax. </p>

	<p>Version number syntax applies to MPDs only; there is no mandate to apply this syntax to artifact versioning.  To do so is optional.</p>  

</section>



<section id="URI-Scheme-for-MPDs">
	<title>URI Scheme for MPDs</title>

	<p>To facilitate MPD sharing and reuse the assignment of a URI (Uniform Resource Identifier) to each MPD is essential.</p>

	<rule id="r-mpd-URI">
		<p>Every MPD MUST be assigned a valid <code>http</code> URI.</p>
	</rule>

	<p>This specification follows <ref idref="RFC3986-URI"/> which defines the syntax and format for a URI.  However, this specification also restricts an MPD URI to a URL and does not allow a URN (Uniform Resource Name) to be assigned to an MPD.</p>

	<p>Here is a typical example of an http URI:  <code>http://www.abc.org/niem-iepd/order/2.1.2rev3/</code></p>

	<p>Note that <ref idref="r-mpd-URI"/> explicitly states that a URI assigned to an MPD must be valid.  This means that the person or organization assigning the URI either is the registrant of the domain name, or has authority from the registrant to assign this URL as an MPD URI.  In the example above, <code>www.abc.org</code> is the domain name (between the second and third "/").  There is no requirement for a URL assigned to an MPD to resolve to any particular Internet resource or to resolve at all.  However, it is always good practice for such a URL to resolve to the resource it represents, the directory it resides in, or to documentation for that resource.  See <link>http://www.w3.org/Provider/Style/URI.html</link></p>

	<p>The MPD version number is essential to its unique identification.  Incorporation of the version number within the MPD URI provides a simple visual (as well as machine readable) means of identifying one of the most fundamental relationships between MPDs, i.e., that one is a different version of another.  Another advantage to this technique is that different versions of an MPD will generally group together in a standard sorted ordering.</p>

	<rule id="r-mpd-uri-vers">
		<p>The URI for an MPD MUST end in its version number.</p>
	</rule>

	<p>And finally, note that <code>mpd-catalog.xsd</code> defines a mandatory attribute for both the <code>mpdURI</code> and the <code>mpdVersionID</code>.  Since the ending string of an MPD URI must be its version ID, then the mpd-catalog duplicates the MPD version ID in two locations.  This is by design.  You will discover in <ref idref="MPD-File-Name-Syntax"/> that MPD file name syntax intentionally duplicates both the mpd-catalog <code>mpdName</code> and <code>mpdVersionID</code>.  There are two reasons for this design.  First, software tools are expected to build and process mpd-catalogs.  Instead of forcing tool developers to parse the URI just to retrieve name and version, the mpd-catalog provides a separate <code>mpdName</code> and <code>mpdVersionID</code> attribute.  Second, duplication of that key metadata in both the URI and the file name facilitates faster visual recognition of an MPD, rather than requiring that a user open the archive, open its <code>mpd-catalog.xml</code>, and scan its content just to locate <code>mpdName</code> or <code>mpdVersionID</code>.</p>

</section>

<section id="URI-Scheme-for-MPD-Artifacts">
	<title>URI Scheme for MPD Artifacts</title>

	<p>Given the URI for an MPD, a URI also exists for each artifact in that MPD.  Again, this specification follows <ref idref="RFC3986-URI"/> and employs a fragment identifier to designate an artifact URI.  Each file artifact or set (directory) artifact is uniquely identified by its path name relative to the root directory of the MPD archive.  The URI for an MPD artifact is the concatenatation of (1) the MPD URI, (2) the "#" character, and (3) the path name of the artifact.</p>

	<rule id="r-mpd-uri-syntax">
		<p>The URI reference to an individual MPD artifact from another resource is the concatenation of</p>
		<ul>
			<li><p>The URI of the MPD that contains the artifact.</p></li>
			<li><p>The crosshatch or pound character ("#").</p></li>
			<li><p>A fragment identifier that is the locally unique path name (string) of the artifact relative to the root directory of the MPD archive.</p></li>
		</ul>
	</rule>

	<p>Thus, each MPD artifact (file or set) has a globally unique URI that can be referenced from other external resources as needed.  Example artifact URIs include:</p>

	<ul>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0/#subset/niem-core.xsd</code></p></li>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0beta2/#extension/ext-1.1.xsd</code></p></li>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0/#documentation/user-manual.docx</code></p></li>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0/#application-info/</code> (a set artifact)</p></li>
		<li><p><code>http://example.gov/niem-iepd/pmix/3.0/#iep-sample/query/</code> (a set artifact)</p></li>
		<li><p><code>http://www.abc.org/niem-iepd/order/2.1.2rev3/#exchange/request4.xsd</code></p></li>
	</ul>

	<p>Here is one scenario for use of an artifact URI within the mpd-catalog.  Consider two different IEPDs with the following URIs:  (1) <code>http://example.gov/niem-iepd/pmix/3.0/</code> and (2) <code>http://www.abc.org/niem-iepd/order/2.1.2rev3/</code>.  The author of IEPD #1 has decided to reuse (as-is) the <code>exchange/request1.xsd</code> artifact in IEPD #2.  He/she can optionally create an mpd-catalog <code>Exchange</code> entry for this artifact (since it is an exchange schema document), and add the following attribute:  <code>externalURI="http://www.abc.org/niem-iepd/order/2.1.2rev3/#exchange/request4.xsd"</code>.  Additional <code>externalURI</code> attributes can be optionally added to this entry if the author knows of other uses of this same artifact in other MPDs and wishes to acknowledge them.</p> 

	<p>Note that a URI does not have the same meaning as namespace.  Do not rely on namespaces for artifact URIs.  Recall that the namespaces used in a schema document subset derived from a NIEM release are identical to the namespaces of the release itself.  Furthermore, an IEPD or an EIEM may contain multiple subsets.  The non-uniqueness of NIEM namespaces implies that they cannot be used as URIs for MPD artifacts.</p>

	<rule id="r-mpd-no-ns-uris">
		<p>NIEM namespaces MUST NOT be used as URIs for MPD artifacts.</p>
	</rule>

	<p>Later in <ref idref="OASIS-XML-Catalogs"/> we will describe the use of OASIS XML Catalogs to correlate and resolve namespaces to their corresponding local URIs.</p>

</section>



<section id="MPD-Artifact-Lineage">
	<title>MPD Artifact Lineage</title>

	<p>An important MPD business requirement is transparency of lineage.  MPDs internally facilitate identification of the relationships that may exist among their artifacts, families, versions, adaptations, specializations, generalizations, etc.  The URI scheme for MPDs and artifacts as well as the mpd-catalog make this possible.</p>

	<p>The mpd-catalog provides a <code>Relationship</code> element with three attributes (<code>resourceURI</code>, <code>relationshipCode</code>, and <code>descriptionText</code>) to identify the pedigree of an MPD.  There are many ways that one MPD may relate to another.  This makes it extremely difficult to specify a fixed set of values that can objectively define an exact relationship between a pair of MPDs.  Therefore, the optional <code>descriptionText</code> attribute is provided to further explain the nature of any of the eight <code>relationshipCode</code> values available {<code>version_of</code>, <code>specializes</code>, <code>generalizes</code>, <code>deprecates</code>, <code>supersedes</code>, <code>adapts</code>, <code>conforms_to</code>, <code>updates</code>}.  In some cases, the value of <code>relationshipCode</code> may be generic enough to require a more detailed explanation in <code>descriptionText</code> (for example, if its value is <code>adapts</code>).</p>

	<p>The mpd-catalog also enables an author to record a fine-grained pedigree between MPDs when reusing artifacts from other MPDs.  By default each artifact identified in an mpd-catalog has a globally unique URI (using a fragment reference) that can refer to it.  An MPD author signifies reuse of a given artifact by entering the URI for that artifact in the optional <code>externalURI</code> attribute within the appropriate <code>FileType</code> or <code>FileSetType</code> elements.</p>

	<p>Some MPDs are designed for more extensive reuse than others.  For example, families of IEPDs are expected to reuse a given EIEM.  In such cases, the mpd-catalogs for these IEPDs and the corresponding EIEM may overlap in or duplicate a large number of metadata and references.  This is expected.  The mpd-catalog can contain many references to and semantics for artifacts and MPDs.  Correct and consistent use of these references and semantics will create networks of related MPDs so that tools can locate, parse, and process them as needed and when available in shared repositories.</p>

</section>
</section>



<section id="Change-Log">
	<title>Change Log</title>


<section id="Change-Log-Releases-Core-Domain-Updates">
	<title>Change Log for Releases and Core/Domain Updates</title>

	<p>Although the version identifier is useful for a fast visual indication of the state of an MPD, it only provides a general indication that the MPD has changed.  There is no indication of the volume, complexity, or impact of changes applied since a previous version.  A change log provides a more specific accounting of changes from one version to another.</p>

	<p>Once published, NIEM releases always exist.  This ensures that IEPDs and EIEMs built from a given release will always be usable, and may be updated to a new NIEM release only when convenient or absolutely necessary to take advantage of new or modified data components.  Though not encouraged, nothing prohibits a developer from building an IEPD based on a NIEM release that is older than the most current version.  There may be potential disadvantages related to interoperability levels achievable with others developing to the latest release.  Nonetheless, an older version might meet the business needs of a particular organization quite well.</p>

	<p>In spite of this built-in stability, the NIEM architecture is designed to evolve as requirements change.  New versions of reference schema document sets such as NIEM releases, core updates, and domain updates can have significant impacts on future IEPDs and EIEMs.  Developers must understand in detail how changes will affect their IEPD and EIEM products and the tools used to build them.  To work effectively, tools for domain content development, impact analysis, migration between releases, etc. must be able to digest formal change logs.  A formal change log is also essential to efficiently process and integrate new and changed content into NIEM for new releases, and to simultaneously maintain multiple versions of NIEM for users.  All of the foregoing reasons dictate that NIEM require a normative change log for reference schema document sets.</p>

	<rule id="r-mpd-ref-changelog">
		<p>Every MPD that is a reference schema set (i.e., NIEM releases, core updates, and domain updates) MUST contain an XML change log artifact that:</p>
		<ul>
			<li><p>Validates with the NIEM change log schemas <code>mpd-changelog.xsd</code> and <code>niem-model.xsd</code>.  (Note these are base filenames; actual filenames also contain a version number; for example, <code>mpd-changelog-1.0.xsd</code>.)</p></li>
			<li><p>Records changes to previous reference schema documents that this MPD represents.</p></li>
			<li><p>Bears the file name <code>changelog.xml</code>.</p></li>
			<li><p>Resides in the root directory of the MPD archive.</p></li>
		</ul>
	</rule>
	
	<p>The current version of <code>mpd-changelog.xsd</code> is here:</p>
	<p><char name="nbsp"/><char name="nbsp"/><char name="nbsp"/><char name="nbsp"/><char name="nbsp"/>
		<link>http://reference.niem.gov/niem/resource/mpd/changelog/</link></p>
	<p>The current version of <code>niem-model.xsd</code> which describes the NIEM conceptual model is here:</p>
	<p><char name="nbsp"/><char name="nbsp"/><char name="nbsp"/><char name="nbsp"/><char name="nbsp"/>
		<link>http://reference.niem.gov/niem/resource/model/</link></p>

	<p>Since the schemas are the authority for a release or update and because almost all tool support depends on the schemas, the change log is only designed to audit transactional changes to the reference schema documents.  There is no provision for logging changes to support documentation or other non-schema artifacts.  Non-schema changes are generally handled non-normatively in the form of release notes.</p>

</section>



<section id="Change-Log-IEPDs-EIEMs">
	<title>Change Log for IEPDs and EIEMs</title>

	<p>IEPD and EIEM change log requirements are less strict and are not required to conform to the naming and XML schema specifications in <ref idref="r-mpd-ref-changelog"/>.  However, a change log is still required.</p>

	<rule id="r-mpd-change-log">
		<p>Every MPD that is an IEPD or EIEM MUST contain a change log artifact that:</p>
		<ul>
			<li><p>Records changes to previous IEPD or EIEM schemas that this MPD represents.</p></li>
			<li><p>Has a file name that begins with the substring "changelog".</p></li>
			<li><p>Resides in the root directory of the MPD archive.</p></li>
		</ul>
	</rule>

<p>This rule does not specify the format for an IEPD or EIEM change log.  This is left to the discretion of the author.  While use of <code>mpd-changelog.xsd</code> is encouraged for IEPD and EIEM schemas, it is not required.  Relaxing the change log format encourages and facilitates easier and more rapid development.  IEPDs and EIEMs are developed by a variety of NIEM domains, organizations, and users; and they are intended to specify implementable exchanges.  As a result, IEPDs and EIEMs may contain both documentation artifacts and machine readable application artifacts in a large variety of formats.  A consistent standard change log would be very difficult to specify.</p>

	<p>The initial version of an IEPD or EIEM would not normally require a change log.  However, for consistency of validation and to help facilitate automatic processing of IEPDs and EIEMs by tools:</p>

	<rule id="r-mpd-initial-changelog">
		<p>The initial version of an IEPD or EIEM MUST contain a change log artifact with at least one entry for its creation date.</p>
	</rule>

<p>Finally, if the <code>mpd-changelog.xsd</code> specification is used for IEPD/EIEM schema changes, then it is potentially possible that such an MPD will need a second change log if the author wants to accommodate documentation or other changes not related to schemas (since <code>mpd-changelog.xsd</code> cannot be extended to accommodate such changes).  If this is the case, then the following rule applies:</p>

	<rule id="r-mpd-substring-changelog">
		<p>If an IEPD or EIEM contains more than one change log artifact, then each change log artifact MUST:</p>
		<ul>
			<li><p>Have a file name that begins with the substring <code>changelog</code>.</p></li>
			<li><p>Reside in the root directory of the MPD archive.</p></li>
		</ul>
	</rule>

</section>
</section>



<section id="Master-Document">
	<title>Master Document</title>

	<p>The <em>master document</em> is similar to a <code>readme</code> file.  It is only required for IEPDs and EIEMs since these MPDs are allowed the greatest design flexibility, can be developed and implemented different ways, and are not centrally managed.  On the other hand, releases and domain updates have fairly restrictive rules to obey, standard documentation for how to use them, and are centrally managed.</p>

	<rule id="r-mpd-master">
		<p>An IEPD or an EIEM MUST contain a master document located in the MPD root directory whose filename begins with the substring <code>master-document</code>.</p>
	</rule>

	<p>The master document may replicate some of the metadata in the mpd-catalog.  However, the mpd-catalog is intentionally designed to be efficient, easily to parse, and minimal.  It is intended for search, discovery, registration, and Web page generation, and not to support various types of detailed technical prose often required for human understanding.</p>

	<p>The primary purposes of the master document include:</p>
		<ul>
		<li><p>To help facilitate understanding and reuse of IEPDs and EIEMs.</p></li>
		<li><p>To ensure that fundamental and detailed business-level information about an IEPD or EIEM are documented for human understanding.</p></li>
		<li><p>To ensure the IEPD or EIEM author has considered and conveys such fundamental information.</p></li>
		<li><p>To provide an initial source within an IEPD or EIEM for human consumable documentation (similar to a <code>readme</code> file) and/or references to other business or technical documentation needed for understanding.</p></li>
		</ul>

		<p>The master document is not intended to be the only source of written documentation for an MPD (though it can be).  It is expected to be the initial resource that references and coordinates all others whether physically present in the MPD or linked by reference.  Many organizations have their own customized formats and operating procedures for documenting their work and products.  This specification does not attempt to standardize master document format or layout.  Only the file name and relative path within the MPD archive are strictly specified.  The following section will generally describe minimal content that should be in the master document.  This guidance is non-normative, so adherence is a subjective judgment by the author.
</p>



<section id="Master-Document-Content">
	<title>Master Document Content</title>

	<p>This section is neither a cookbook nor a normative specification for a master document.  It simply suggests typical topics that a master document should or might address, and provides some non-normative guidance.</p>

	<p>The master document should help another user or developer to understand the content and use of an IEPD or EIEM, as well as determine potential for reuse or adaptation.  It should describe what implementers need to understand and what the author considers is important to understanding an IEPD or EIEM.  There is no limit or constraint on its content.</p>

	<p>At a minimum, the master document should contain several fundamental elements of information about the MPD:</p>
	<ul>
	<li><p>Purpose of this MPD.</p></li>
	<li><p>Scope of its deployment, usage, and information content.</p></li>
	<li><p>Business value and rationale for developing it.</p></li>
	<li><p>Type of information it is intended to exchange (in business terms).</p></li>
	<li><p>Identification of senders and receivers (or the types of senders and receivers).</p></li>
	<li><p>Typical interactions between senders, receivers, and systems.</p></li>
	<li><p>References to other documentation within the MPD, and links to external documents that may be needed to understand and implement it.</p></li>
	</ul>

	<p>Many document formats (e.g., Microsoft Word) can display hot links to local files within the MPD archive as well as URLs to files on the Internet.  Employing such a format is highly recommended but not mandatory.</p> 

	<rule id="r-mpd-master-purpose">
		<p>A NIEM IEPD or EIEM master document SHOULD (at a minimum) describe the MPD purpose, scope, business value, exchange information, typical senders/receivers, interactions, and references to other documentation.</p>
	</rule>

	<p>MPD documentation types and formats will vary with the methodologies and tools used to develop them.  Most of this documentation will likely be typical of that generated for data-oriented software projects.  Some documentation may only require sections in the master document.  Other documentation may be more suitable as separate artifacts that are referenced and explained by a section in the master document (such as diagrams, large tables, data dictionaries, test results/reports, etc.).  The following are some common examples of sections in or separate artifacts associated with the master document:</p>

<ul>
	<li><p>Executive summary (especially for lengthy master documents></p></li>
	<li><p>Use cases</p></li>
	<li><p>Business processes</p></li>
	<li><p>Business requirements</p></li>
	<li><p>Business rules</p></li>
	<li><p>Metadata security considerations</p></li>
	<li><p>Domain model design specifications and documentation and/or diagrams</p></li>
	<li><p>Data dictionary</p></li>
	<li><p>Testing and conformance</p></li>
	<li><p>Development tools and methodologies used</p></li>
	<li><p>Implementation guidance (particularly important for a complex IEPD with multiple subsets or IEP root elements)</p></li>
	<li><p>Security considerations</p></li>
	<li><p>Privacy considerations (e.g., Personal Identifiable Information)</p></li>
	<li><p>Types of implementations</p></li>
	<li><p>If an IEPD employs multiple subsets:</p>
	<ul>
		<li><p>When, where, and how these are used</p></li>
		<li><p>How these are coordinated in the implementation</p></li>
		<li><p>Caveats regarding duplicate data components (which can occur with multiple subsets)</p></li>
	</ul></li>
	<li><p>If an IEPD employs multiple exchange schemas and/or exchange schemas with multiple root elements:</p>
	<ul>
		<li><p>Purpose of each (exchange and root) and when it should be used</p></li>			
		<li><p>How these are coordinated during the runtime preparation and transmission of IEPs</p></li>
	</ul></li>
</ul>

</section>
</section>



<section id="OASIS-XML-Catalogs">
	<title>OASIS XML Catalogs</title>

	<p>This section is applicable to all MPDs.  However, it is of particular importance to IEPDs and IEP validation (to be covered in more detail in <ref idref="Information-Exchange-Packages"/>.</p> 

	<p><ref idref="OASIS-XML-Catalogs"/> are XML documents that describe a mapping between external entity references and locally-cached equivalents.  They are used to resolve XML schema document target namespaces to local URIs.  This is especially useful when assembling an XML schema from an XML schema document set.  Some validators (e.g., <link href="http://xerces.apache.org/xerces2-j/faq-xcatalogs.html">Xerces</link>) and other tools utilize xml-catalogs for this purpose.</p>

	<p>The <ref idref="NIEM-SSGT"/> (for NIEM 3.0) automatically adds an <code>xml-catalog.xml</code> artifact to each schema document subset it generates.  The NIEM 3.0 release also includes an <code>xml-catalog.xml</code> artifact.  These xml-catalogs are provided simply for user convenience in the case these schema document sets must be assembled into a schema.</p>

	<p>IEPD authors must employ xml-catalogs within IEPDs to facilitate validation of IEPs.</p>

	<p>Assembling a schema or building an xml-catalog from the XML schema documents of non-conformant external standards that contain <code>xs:include</code> statements can be problematic.  Be aware that if an xml-catalog (resulting from processing a set of external XML schema documents) contains any two <code>uri</code> element entries with identical namespaces, then that xml-catalog cannot be used for XML validation.  It will have to be modified to ensure that each namespace resolves to one and only one unique xml-catalog <code>uri</code> attribute value.</p>

	<p>In order to support schema assembly for the purpose of XML validation, the following rule requires that the namespaces of all XML schema documents used within an IEPD resolve to a locally-unique artifact:</p>

	<rule id="r-resolution">
		<p>An IEPD MUST resolve each namespace it uses to a locally-unique URI through one or more <ref idref="OASIS-XML-Catalogs"/>.</p>
	</rule>

	<p>This rule implies that <code>NextCatalog</code> elements may be used within xml-catalogs to connect them and control their parsing sequence.  An IEPD must contain at least one xml-catalog because it is the only MPD that can specify an IEP <ref idref="IEP"/> and provide validation instructions that would require schema assembly from schema documents.  <ref idref="Information-Exchange-Packages"/> provides more specifics about using xml-catalogs in IEPDs.</p>

</section>


<!-- ======================================================================================= -->


<section id="Information-Exchange-Packages">
	<title>Information Exchange Packages</title>

	<p>This section only applies to IEPDs.  An IEPD is the only MPD that defines IEPs <ref idref="IEP"/>.  An IEPD does this by declaring (either implicitly or explicitly) one or more <em>IEP Conformance Targets</em>.</p>

	<definition term="IEP Conformance Target" id="iep-conformance-target">
		<p>A class or category of IEPs which has a set of one or more validity constraints and a unique identifier.  Every IEP is an instance of one or more IEP Conformance Targets.</p>
	</definition>

	<p>This definition requires that a IEP conformance target be associated with a unique identifier, a <em>Conformance Target URI</em> that distinguishes it from all other IEP conformance targets.  Similar to a URI for an MPD artifact, construct a <em>conformance target URI</em> by concatenating the IEPD's http URI, the pound character (<code>#</code>), and a locally unique (within the IEPD) <link href="http://www.w3.org/TR/xmlschema-2/#NCName">NCName</link> <ref idref="W3-XML-Schema-Structures"/>.</p>

	<definition term="IEP Conformance Target URI" id="iep-conformance-target-uri">
		<p>A globally unique identifier for an IEP conformance target declared in an IEPD, formed by concatenating:</p>
		<ol>
			<li><p>the IEPD URI</p></li>
			<li><p>the pound character (<code>#</code>) and</p></li>
			<li><p>a locally unique <link href="http://www.w3.org/TR/xmlschema-2/#NCName">NCName</link> per <ref idref="W3-XML-Schema-Structures"/></p></li>
		</ol>
	</definition>	

	<p>An IEPD defines an IEP conformance target through one of two methods.  A simple IEPD may rely on convention, while a more complex IEPD explicitly and formally declares IEP conformance targets in its mpd-catalog.  The subsections that follow describe the concepts, artifacts, and procedures for declaring and identifying IEP Conformance Targets in IEPDs.</p>




<!-- ======================================================================= -->

<section id="Schema-Validation">
	<title>Schema Validation</title>

	<p>NIEM employs the W3C XML Schema Definition (XSD) Language (<ref id="W3-XML-Schema-Structures"/> and <ref id="W3-XML-Schema-Datatypes"/>), one of several XML schema definition languages designed to define an instance XML document and enable its validation.  In general, an instance XML document is valid against a particular XML schema if it obeys or conforms to the constraints imposed by that schema (<ref id="W3-XML-Schema-Structures"/> <link href="http://www.w3.org/TR/xmlschema11-1/#sec-schema-validity-and-docs">2.5 Schema-validity and documents</link>).</p>
	<p>So, a NIEM IEPD is an MPD that contains a set of XML schema documents, that are assembled into an XML schema (after processing xml-catalogs to resolve <code>xs:import</code> statements and similar XML Schema constructs).  In turn, the resulting XML schema can be used to validate one or more instance XML documents, i.e., NIEM IEPs <ref id="IEP"/>).  In some cases, how to validate an IEP with an IEPD may be fairly obvious -- driven by simple conventions.  In more complex cases, it may be necessary to provide explicit conformance targets and validation directives.</p>

	<p>To be clear, in the following subsections references to "validation" will refer to "XML Schema validation".


<section id="Convention">
	<title>Validation by Convention (implicit)</title>

	<p>A simple conventional approach will ensure an IEPD contains particular artifacts organized in a standard way.  This will enable a user or a process to identify the artifacts and execute schema validation on a candidate IEP.</p>

	<definition term="candidate IEP" id="candidate-iep">
		<p>An instance XML document that requires validation with schema definitions specified in an IEPD.</p>
	</definition>

	<definition term="valid IEP" id="valid-iep">
		<p>An IEP (an instance XML document) that validates with an XML schema assembled from the IEPD base schema document set.</p>
	</definition>

	<p>For completeness and consistency, this is an appropriate time to define a <em>valid IEP</em>.</p>

	<p>Recall (in <ref idref="Exchange-Schema-Documents"/>) that all IEPD element declarations within NIEM schema documents are potentially IEP root elements because they all have global scope.  By convention, in the absence of any explicit declarations of author intent, all elements declared in exchange schema documents are considered IEP root IEP elements.  So, for simple conventional IEPDs ensure that only IEP root elements are declared in exchange schema documents.  This will constitute IEP root intent.</p>

	<p>To summarize the conventional (implicit) IEPD approach:</p>

</section>



<section id="Configuration">
	<title>Validation by Configuration (explicit)</title>

	<p></p>

</section>






</section>





<!-- UNFINISHED ... used to be "Sample IEP" section

	<p>Sample IEPs are valuable artifacts to include with an IEPD.  As representations of the actual exchange data, an IEP can: 
		Help an IEPD implementer to understand the original intent of the IEPD author.
		Be used by an implementer as a data point for validation with the IEPD base schema document set or a constraint schema document set.  
		Be an indicator of IEPD quality.</p>

-->
	<definition term="valid IEP" id="valid-iep">
		<p>An IEP that validates to the IEPD base schema document set.</p>
	</definition>

<!-- ==========================
	
	<rule id="r-iep-sample">
		<p>A NIEM IEPD MUST contain at least one valid IEP artifact for each IEP root element.</p>
	</rule>

	<p>The intent of the foregoing rule is not to provide a test for all permutations of IEPs that might be possible given the schema definitions and declarations.  Its purpose is to ensure IEPD authors have tested their own designs, and to provide implementers with examples for additional understanding, guidance, and testing.  IEPD authors should strive to include sample IEPs that (1) capture real world business cases of data exchanges (if possible), and (2) exercise as many data component definitions and declarations in the schemas as possible.  While both of these goals may not be achievable in a single IEP, authors have the option to include multiple IEPs; however, only one per intended IEP root element is mandatory.</p>

	<p>Note that each sample IEP illustrates one view of the data based on a chosen set of conditions.  Other views based on different conditions likely exist.  An implementer will still need to review the business rules and other documentation in an IEPD to ensure understanding of all potential conditions.  Do not rely exclusively on sample IEPs, since they will not likely account for all possible permutations.</p>

	<p>This specification encourages but does not mandate the inclusion of sample IEPs in EIEMs and domain updates.  However, IEPs may provide valuable insight into the intent and usage of new, extended, or changed data components.</p>

-->

</section>
</section>


<!-- ======================================================================= -->


<section id="Declaration-of-IEP-Root-Elements">
	<title>Declaration of IEP Root Elements and Other Validation Targets</title>

	<p>However, some IEPDs may require a more explicit means of identifying intended IEP root elements.  This can be done through the mpd-catalog schema <ref idref="MPD-Catalog-XSD"/> <code>IEP</code> element.  Use of <code>IEP</code> elements in the mpd-catalog takes precedence over the convention mentioned above for simple IEPDs.</p>

	<p>Refer to <ref idref="MPD-Catalog-XSD"/>.  The <code>IEPType</code> contains an abstract <code>ValidityConstraint</code> element.  In most common cases, this target will be an IEP root element candidate within an exchange schema.  However, the target could be any element in a NIEM-conformant schema.  For example, a <code>testXPath</code> value could identify the root element of an NDEx payload <ref idref="FBI-NDEX"/> that resides within a LEXS message <ref idref="LEXS"/>.</p>

	<p>In place of <code>Validation</code> a developer substitutes <code>XMLSchemaValidation</code> or <code>SchematronValidation</code> elements.  These elements contain the <code>xmlCatalogURI</code> attribute or the <code>schematronSchemaURI</code> attribute respectively.  The attribute values identify the location of the XML schema document(s) with which to execute a particular validation.  At present, only XML Schema and Schematron validation are available.  However, in the future, other kinds of validation may be added to the <code>Validation</code> substitution group.</p>

</section>



<section id="Validation-Candidate-IEPs">
	<title>Validation of Candidate IEPs</title>

	<p>In order to conform to this specification for inclusion within an IEPD, an IEP must be valid <ref idref="valid-iep"/>.  An IEP is a <em>candidate IEP</em> until it has been validated against its IEPD schemas.</p>  

	<p>The procedure for validating a candidate IEP within an IEPD is an algorithm.  Given a candidate IEP:</p>
	<pre>

	IF a c:IEP element exists in the mpd-catalog.xml artifact,
	THEN
	    Validate the candidate IEP according to the instructions defined by that element.
	ELSE
	    Assemble a base schema and validate the candidate IEP against it.
	    Identify all Schematron documents and validate the candidate IEP against each.
	    Identify all exchange root IEP elements and validate:
	    Set $L = list of elements declared by XML schema documents in subdirectory name matching "exchange*"
		IF $L is non-empty, THEN verify the candidate IEP document element is in L.
		FOR EACH constraint schema $D in subdirectory name matching "constraint*"
			Assemble an XML schema for $D
			Validate the candidate IEP against $D
	</pre>
	<p>Note that the use of mpd-catalog <code>IEP</code> elements takes precedence over the more conventional procedure that requires looking for standard directory names <ref idref="Normative-Guidance-Directories"/>.  This is why the conventional method is only useful for very simple IEPDs.  Also, note that use of the mpd-catalog <code>IEP</code> element references, and therefore, requires xml-catalogs.</p>


<!-- ========================== UNFINISHED =========================

Declaring Validity Constraints


Extending an MPD Catalog for additional validity constraints

Valid vs Complete

Requirements for IEP samples

	<definition term="Valid IEPD">
		<p></p>
	</definition>

	<definition term="Complete IEPD">
		<p></p>
	</definition>

	<definition term="Valid MPD">
		<p></p>
	</definition>

	<definition term="Complete MPD">
		<p></p>
	</definition>

-->



</section>


<section id="Optional-MPD-Artifacts">
	<title>Optional MPD Artifacts</title>
	
	<p>Aside from the required artifacts, MPD content is relatively flexible.  A variety of other optional documentation files may be incorporated into an MPD.  When applicable, these may include (but are not limited to) files that describe or explain:</p> 
<ul>
	<li><p>Implementation details (hardware, software, configuration, etc.)</p></li>
	<li><p>Use of multiple root elements</p></li>
	<li><p>Use of multiple subsets or mixed releases</p></li>
	<li><p>How to use/reuse an MPD for various purposes (such as Web Services)</p></li>
	<li><p>Rationales and/or business purposes</p></li>
</ul>

	<p>In addition to documentation artifacts, a variety of other optional files can be added to an MPD to facilitate tool support and make reuse, adaptation, and/or implementation easier.  These are often files that are inputs to or outputs from software tools.  Examples include content diagrams, content models in tool-specific formats, and business rules (either formal or informal representations).</p>

	<p>Another optional artifact that is encouraged, especially for IEPDs, is a conformance report or other evidence of quality.  In the future, as NIEM processes and tools mature, conformance and quality reports and a corresponding certificate may become required artifacts.  For now, inclusion of a conformance report is at the discretion of the author or sponsor.  Though clearly, such reports can only increase confidence in MPDs that contain them.</p>

	<p>An MPD author may include any files believed to be useful to understand, implement, reuse, and/or adapt an MPD.</p>

	<p>An MPD of relatively simple content and scope may only need to contain the minimum mandatory artifacts required by this specification in order to understand and implement it.  (See <ref idref="MPD-Artifacts"/> for a listing of the mandatory and common optional artifacts for each type of MPD.)</p>

	<p>Files vary widely in format and are often specific to the tools an author uses to parse, consume, or output them.  Therefore, if tool-specific files are included in an MPD, it is also a good practice to include copies of those files in formats that display with standard Web browsers or other cost-free, publicly available viewing tools (e.g., ASCII text, PDF, CSV, HTML, JPG, GIF, PNG).  This guidance is intended to encourage and facilitate maximal sharing and distribution of MPDs; it does not prohibit and is not intended to discourage the inclusion of other file formats.</p>

	<p>In particular, this specification does not discourage use of Microsoft file formats for documentation and other optional artifacts.  Microsoft Office products are in common use, and free viewers are available for many of them (See <link>http://office.microsoft.com/en-us/downloads/office-online-file-converters-and-viewers-HA001044981.aspx</link>).</p>



<section id="Wantlists">
	<title>Wantlists</title>

	<p>A NIEM schema document subset is often associated with a NIEM <em>wantlist</em>.  A <em>wantlist</em> is an abbreviated XML representation of a NIEM schema document subset, and identifies only the data components a user selected (as requirements) to build a schema document subset.  To reconstruct the complete schema document subset there are usually a number of additional data components that the user selections depend upon.  These must be computed from the appropriate NIEM reference model and added to reconstruct the complete schema document subset.  For example, a user may select <code>nc:Person</code> for the subset.  In this case, the wantlist will only contain that component, but the associated full subset must contain both <code>nc:Person</code> and <code>nc:PersonType</code>.  A software tool that understands how to process NIEM wantlists and schema document subsets (such as the NIEM Schema Subset Generator Tool <ref idref="NIEM-SSGT"/>) can rebuild an accurate schema document subset from a wantlist (and the reverse).</p>

	<definition term="wantlist">
		<p>An XML document that represents a complete NIEM schema document subset.</p>
	</definition>

	<p>A NIEM wantlist identifies the data component requirements declared by the subset author; it does not identify the data component dependencies required to reconstitute the complete subset.  The complete subset can be computed with the reference schema document set from which the subset was derived.</p>

	<p>A wantlist is always associated with a schema document subset.  A wantlist may also be associated with a constraint schema document set, because constraint schema documents are often built from a schema document subset.  For a simple IEPD, it can sometimes be trivial to identify a single schema document subset.  However, this MPD Specification does not prohibit building complex IEPDs that contain:  (1) a base schema document set supported by multiple schema document subsets and associated wantlists, and (2) multiple constraint schema document sets, each supported by a different wantlist.  As with other complex cases, the IEPD author is responsible to clearly document the associations between wantlists and schema document sets.  In order to maintain a minimal degree of consistency for placement of a wantlist within an IEPD or EIEM:</p>
	
	<rule id="r-wantlist-base">
		<p>A wantlist MUST be a member of the base or constraint schema document set directory it is associated with.  This means it MUST reside with and at the root of the subdirectory that groups and defines its target schema document set.</p>
	</rule>

</section>
</section>


<section id="Directory-Organization-Packaging-Other-Criteria">
	<title>Directory Organization, Packaging, and Other Criteria</title>
	
	<p>An MPD is a logical set of electronic files aggregated and organized to fulfill a specific purpose in NIEM.  Directory organization and packaging of an MPD should be designed around major themes in NIEM:  reuse, sharing, interoperability, and efficiency.</p>

	<p>This rule is also applicable to all MPDs:</p>

 	<rule id="r-mpd-archive">
		<p>An MPD is packaged as a single compressed archive of files that represents a sub-tree of a file system in standard <ref idref="PKZIP"/> format.  This archive MUST preserve and store the logical directory structure intended by its author.</p>
	</rule>

	<p>MPD NIEM schema artifacts must be valid for both XML Schema and NIEM:</p>

	<rule id="r-mpd-conform-tgts">
		<p>Within an MPD archive, all XSD and XML artifacts MUST be valid against and follow all rules for their respective <ref idref="NIEM-NDR"/> conformance targets; this includes being well-formed and valid XML Schema documents.</p>
	</rule>

<p>NIEM releases, core updates, and domain updates maintain a relatively consistent directory organization <ref idref="NIEM-DomainUpdate"/>.  But there are many ways to organize IEPD and EIEM directories that may depend on a number of factors including (not limited to) business purpose and complexity.  For this reason, strict rules for IEPD and EIEM directory structure are difficult to establish.  Therefore, IEPD and EIEM authors may create their own logical directory structures subject to the rules of this section.</p>

	<definition term="MPD root directory">
	<p>The top level file directory relative to all MPD artifacts and subdirectories.</p>
</definition>

	<rule id="r-mpd-archive-one-root">
		<p>An MPD archive MUST uncompress (unzip) to a one and only one MPD root directory.</p>
	</rule>

	<p>The foregoing rule ensures that:</p>
	<ul>
		<li><p>Unpacking an MPD archive will not scatter its contents on a storage device.</p></li>
		<li><p>A common starting point always exists to explore or use any MPD.</p></li>
		<li><p>mpd-catalog and change log artifacts will always be found in the MPD root directory (as a result of <ref idref="r-mpd-catalog"/> and <ref idref="r-mpd-ref-changelog"/>).</p></li>
	</ul>

<section id="MPD-File-Name-Syntax">
	<title>MPD File Name Syntax</title>

	<p>As previously stated, the MPD Specification is intended to help facilitate tool support for processing MPDs.  Given a tool must process an MPD, providing it basic information about the MPD as early as possible will help to reduce processing time and complexity.  So, if the MPD class and version can be easily identified by its file name, then a tool would not have to open the archive and parse the mpd-catalog just to determine this information.  Of course, ultimately, to do anything useful, a tool will have to open the MPD archive.  However, a standard file name syntax would allow a tool to search through a set of MPDs to find a particular MPD name, version, or class without having to open each.  The following rules apply:</p>

	<rule id="r-name-syntax">
		<p>An MPD archive file MUST use file name syntax defined by the regular expression:</p>
	<pre>
	mpd-filename ::= name '-' version '.' class '.zip'       
	Where: 
		name     ::= alphanum ((alphanum | special)* alphanum)?
		alphanum ::= [a-zA-Z0-9]
		special  ::= '.' | '-' | '_'
		version  ::= digit+ ('.' digit+)* (status digit+)?
		digit    ::= [0-9]
		status   ::= 'alpha' | 'beta' | 'rc' | 'rev'
		class    ::= 'rel' | 'cu' | 'du' | 'iepd' | 'eiem'</pre>
	<p>All alpha characters SHOULD be lower case to reduce the risk of complications across various file systems.  See <ref idref="r-mpd-vers-syntax"/> for an explanation of the status options.</p>
	<p>(The regular expression notation used above is from <ref idref="W3-XML"/> <link href="http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation">#sec-notation</link>.)</p>
	</rule>

	<p>The class values correspond to <ref idref="r-mpd-class-code"/>.  A valid IEPD file name corresponding to the example in <ref idref="MPD-Instance"/> would be:  <code>Planning_Order-1.0.3rev2.iepd.zip</code></p>

	<p>Checking this Appendix you will find that this example obeys the following two rules:</p>

	<rule id="r-mpd-match">
		<p>Within an MPD, the <code>name</code> and <code>version</code> substrings in the file name MUST match exactly the values for attributes <code>mpdName</code> and <code>mpdVersionID</code> within its <code>mpd-catalog.xml</code> artifact.</p>
	</rule>

	<rule id="r-mpd-class-code"><p>Within an MPD, the <code>class</code> substring in the file name MUST equal the <code>mpdClassCode</code> attribute value within the mpd-catalog.  Values are:</p>
<pre>	rel	= release
	cu	= core update
	du	= domain update
	iepd	= information exchange package documentation
	eiem	= enterprise information exchange model</pre>
	</rule>

	<p>In HTTP-based Web Services environments, the MIME type designation of a MPD archive is important to facilitate processing by service consumers.</p>

	<rule id="r-mpd-mime">
		<p>When represented on the Internet, an MPD archive SHOULD use the following MIME Type:</p>
<pre>	application/zip+[class]
		where [class] is one member from the value set 
		{rel, cu, du, iepd, eiem}.</pre>
		<p>Use of the generic zip MIME type <code>application/zip</code> is allowed, but discouraged.  No other MIME types are allowed when representing MPD archives.</p>
	</rule>

</section>



<section id="Artifact-Links-to-Other-Resources">
	<title>Artifact Links to Other Resources</title>

	<p>The <ref idref="NIEM-NDR"/> requires that all namespace references within schema documents can be resolved to the correct local schema document.  Recall that there are several approaches to this that may incorporate the mpd-catalog, xml-catalogs, and/or <code>xs:import schemaLocation</code> attributes.  It is important to understand that the URI scheme <ref idref="URI-Scheme-for-MPD-Artifacts"/> can only be used only to identify relationships among and provide source links to external schemas being reused.  It is not sufficient to allow references or links to such schemas stand in for a physical copy.  Thus, all schema artifacts necessary to define, validate, and use an MPD must be physically present within that MPD.  In accordance with the <ref idref="NIEM-NDR"/>, if MPD schemas are moved to an operational environment for implementation, validation, or other purposes, then absolute references may replace relative path references when needed.  When absolute references to Internet resources are required:</p>

	<rule id="r-mpd-protocol">
		<p>Absolute references to Internet resources MUST use a well-known transfer protocol (http, https, ftp, ftps) and MUST resolve (If applicable, documentation that describes how to resolve with security, account, and/or password issues MUST be included).</p>
	</rule>

	<p>Releases, core updates, and domain updates must adhere to packaging rules primarily to enable development tools to process them consistently and efficiently.  The NIEM PMO controls the format and documentation for these MPDs and publishes them at <link>http://release.niem.gov/niem/</link>.  However, many different organizations author IEPDs and EIEMs.  As such, they may be distributed, published in repositories (possibly to a limited community), and reused by others.  Furthermore, EIEMs are the basis for families of IEPDs.  Therefore, it is important that both of these MPD classes are well documented for understanding and use.</p>

	<rule id="r-mpd-documents">
		<p>A published IEPD MUST contain all documents necessary to understand it and facilitate its correct implementation.</p>
	</rule>

	<rule id="r-mpd-link-eiem">
		<p>A published IEPD MUST link (through its mpd-catalog) to any EIEM it is based on.</p>
	</rule>

	<p>Refer to <ref idref="r-mpd-mime"/> for Internet representation of IEPDs or EIEMs.</p>

	<p>The <ref idref="NIEM-NDR"/> explains how NIEM employs adapter types to encapsulate and use other standards (e.g., geospatial and emergency management standards) in their native forms that are not NIEM-conformant.  Other standards may use <code>xs:import</code> without requiring <code>schemaLocation</code> attributes (instead, relying only on the namespace value).  These standards may also use <code>xs:include</code> which is disallowed by NIEM.  When standards external to NIEM are required within MPDs, the following rule applies:</p>

	<rule id="r-mpd-other-stds">
		<p>Within an MPD, if non-conformant external schema documents are used, then any references from these schema documents to other namespaces MUST resolve to local URIs.  <code>schemaLocation</code> attributes or XML catalogs can be used to ensure resolution.</p>
	</rule>

	<p>For the case of non-NIEM-conformant schemas, this rule ensures that all schemas (or corresponding artifacts and namespaces) from external standards required for definition, validation, and use of the MPD are present within the archive.</p>

	<p>XML schemas are the heart of MPDs since they formally specify normative structure and semantics for data components.  However, in general, an MPD is a closed set of artifacts.  This means that all hyperlink references within artifacts should resolve to the appropriate artifact.</p>

	<rule id="r-mpd-resources">
		<p>Within any artifact of an MPD archive, any direct reference to another resource (i.e., another artifact such as an image, schema, stylesheet, etc.) that is required to process or display an artifact SHOULD exist within the archive at the location specified by that reference.</p>
	</rule>

	<p>This means that MPD artifacts, including documentation artifacts, should be complete.  For example, if an HTML document contains a hyperlink reference (<code>href</code>) to a schema (xsd) or stylesheet (xsl) that is part of the MPD, then the schema file associated with that hyperlink should be present within the MPD; likewise for a sourced (<code>src</code>) image.  Authors should exercise good judgment with this rule.  For example, it does not require an MPD to contain copies of all cited documents from a table of references if it contains hyperlinks to those documents.  The key operating words in this rule are:  "another resource is required to process or display an artifact SHOULD exist within the archive."</p>

</section>


<section id="Duplication-of-Artifacts">
	<title>Duplication of Artifacts</title>

	<p>Within an MPD, the replication of files or entire file sets should be avoided.  However, replication is allowed if a reasonable rationale exists.  In some cases, file replication may make it easier to use, validate, implement, or automatically process an MPD.  For example, multiple subsets may overlap with many identical schemas.  Yet, it may be easier or even necessary to allow this form of duplication to accommodate a validation tool, rather than removing duplicate schemas, and forcing the tool to search for them.  Use xml-catalogs whenever possible.</p> 

</section>


<section id="Normative-Guidance-Directories">
	<title>Normative Guidance for Directory Structures</title>

	<p>Guidance for directory structuring may be useful to authors for a relatively simple IEPD or EIEM with a single schema document subset, a few extension, exchange, and external schema documents.  The following general guidance has been common practice for IEPD directories:</p>
<ul>
	<li><p>Create a root directory for the IEPD from the name and version identifier of the IEPD.  For example <code>my_iepd-3.2rev4</code>.</p></li>
	<li><p>Per <ref idref="r-mpd-catalog"/> and <ref idref="r-mpd-ref-changelog"/>, the mpd-catalog and the change log must reside in the root directory.</p></li>
	<li><p>Maintain each subset organized as generated by the Schema Subset Generation Tool (SSGT).  The reasons are that for a schema document subset the SSGT (1) correctly correlates all <code>xs:import schemaLocation</code> attribute values (relative path names) with the directory structure, and (2) outputs an equivalent xml-catalog.</p></li>
	<li><p>If derived from a schema subset, maintain the constraint schema set grouped as the subset from which it was derived (for the same reason as above).</p></li>
	<li><p>Establish a subdirectory of the MPD root directory with the name <code>xsd-base</code>.  Within this subdirectory:</p>
		<ul>
		<li><p>Maintain each schema document subset in a subdirectory with a name that begins with the substring <code>subset</code>.</p></li>
		<li><p>Maintain a wantlist with the subset it represents.</p></li> 
		<li><p>Maintain each constraint schema document set (or all constraint schema documents if appropriate) in a subdirectory with a name that begins with the substring <code>constraint</code>.</p></li>
		<li><p>Maintain extension schema documents in a subdirectory with a name that begins with the substring <code>extension</code>.</p></li>
		<li><p>Maintain exchange schema documents in a subdirectory with a name that begins with the substring <code>exchange</code>.</p></li>
		<li><p>Maintain all external standard schema documents in a subdirectory with a name that begins with the substring <code>external</code>.</p></li>
		<li><p>Maintain all Schematron schema documents in a subdirectory with a name that begins with the substring <code>schematron</code>.</p></li>
		</ul>
	</li>
	<li><p>Maintain all sample IEPs in a subdirectory with a name that begins with the substring <code>iep-sample</code>.  This subdirectory should also contain any XML stylesheets (XSL) used with the sample instances.</p></li>
	<li><p>Maintain all documentation in a subdirectory with a name that begins with the substring <code>documentation</code>.  Create additional documentation subdirectories inside this one as needed.</p></li>
	<li><p>Maintain tool-specific artifacts (inputs, outputs, imports, exports, etc.) in a subdirectory with a name that begins with the substring <code>application-info</code>.</p></li>
</ul>

<p>The guidance above results in an IEPD directory structure that appears below.  Filenames within the <code>extension</code>, <code>external</code>, <code>exchange</code>, <code>schematron</code>, and <code>iep-sample</code> subdirectories are non-normative examples.  Authors are free to assign names for such files according to their own requirements (as long as they do not violate the rules in this specification for other files such as <code>xml-catalog.xml</code> or <code>mpd-catalog.xml</code>).  Obviously, there are many other ways to organize for more complex business requirements in which multiple releases, subsets, constraint sets, core updates, and domain updates are employed in a single IEPD.  When the standard conventions will not work for an IEPD, the author should configure the IEPD using the mpd-catalog <code>IEP</code> element and xml-catalogs.</p>	
<pre>
	/my_iepd-3.2rev4		(root directory of IEPD archive)
		changelog.*
		master-document.*
		mpd-catalog.xml
		xml-catalog.xml
		/xsd-base
			/subset
				/niem
					/niem-core
					/domains
					/structures
					...
				wantlist.xml
			/extension
				extension1.xsd
				extension2.xsd
				...
			/external
				/gml
				/icism
				...
			/exchange
				query.xsd
				request.xsd
				...
			/constraint
				/niem
					/niem-core
					/domains
					/structures
					...
			/schematron
				business-rules1.sch
				business-rules2.sch
				...
		/iep-sample
			query.xml
			request.xml
			...
		/application-info
			... (reserved for tool inputs, outputs, etc.)
		/documentation
			... (reserved for human readable documentation)			
	</pre>

</section>
</section>



<section id="MPD-Catalog-XSD" isAppendix="true">
	<title>XML Schema Document for MPD Catalog</title>
	<pre><include-text href="xsd/mpd-catalog-3.0.xsd"/></pre>
</section>


<section id="MPD-Instance" isAppendix="true">
	<title>Example Instance XML Document Catalog</title>
	<p>IGNORE FOR NOW - NOT A COMPLETE EXAMPLE</p>
	<pre><include-text href="xsd/sample.1/mpd-catalog.xml"/></pre>
</section>


<section id="MPD-Artifacts" isAppendix="true">
	<title>MPD Artifacts</title>
	<p>(MPD artifacts)</p>
</section>


<section id="Acronyms-and-Abbreviations" isAppendix="true">
	<title>Acronyms and Abbreviations</title>
	
<pre>
API		Application Programming Interface
BIEC		Business Information Exchange Component
CSV		Comma Separated Value (file format)
CU		Core update
DU		Domain update
EIEM		Enterprise Information Exchange Model
FBI		Federal Bureau of Investigation
GIF		Graphic Interchange Format
GML		Geospatial Markup Language
HLTA		High-Level Tool Architecture
HLVA		High-Level Version Architecture
HTML		Hyper Text Markup Language
IEP		Information Exchange Package
IEPD		Information Exchange Package Documentation
JPG/JPEG 	Joint Photographic (Experts) Group
LEXS		Logical Entity Exchage Specifications
MPD		Model Package Description
NA		Not Applicable
NDEx		National Data Exchange
NDR		Naming and Design Rules
NIEM		National Information Exchange Model
NTAC		NIEM Technical Architecture Committee
PDF		Portable Document Format
PMO		Program Management Office
PNG		Portable Network Graphic
PPI		Personal Identifiable Information
RAR		Roshal Archive; a compressed archive file format named after its developer, Eugene Roshal
RDF		Resource Description Framework
SSGT		Schema Subset Generation Tool
SVG		Scalable Vector Graphics
UML		Unified Modeling Language
UPA		Unique Particle Attribution
URI		Uniform Resource Identifier
URL		Uniform Resource Locator 
URN		Uniform Resource Name
W3C		World Wide Web Consortium
WSDL		Web Services Description Language
XHTML		Extensible Hyper Text Markup Language
XMI		XML Metadata Interchange
XML		Extensible Markup Language
XSD		XML Schema Definition
XSL		Extensible Stylesheet Language
XSLT		Extensible Stylesheet Language Transformation
</pre>

</section>


<section id="Glossary-of-Terms" isAppendix="true">
	<title>Glossary of Terms</title>

	<p>The following terms are defined in the context of NIEM.</p>

<pre>
artifact - A single file with a defined purpose or a set of files logically grouped for a defined purpose.  An MPD is a collection of artifacts, the purpose for which is to define and document the intended use of the MPD.

base schema document set - A NIEM MPD artifact that is the set of all NIEM-conformant and external non-conformant XML schemas that together specify an information exchange or information model for an MPD.  A base schema document set may incorporate reference, subset, extension, and exchange schema documents, as well as external schema documents from authoritative sources outside of NIEM.

Business Information Exchange Component (BIEC) - A NIEM-conformant XML schema data component definition or declaration (for a type, element, attribute, or other XML construct) reused, subsetted, extended, and/or created from NIEM that meets a particular recurring business requirement for an information sharing enterprise.

constraint schema document - A schema document which imposes additional constraints on NIEM-conformant instances.  A constraint schema document or a constraint schema document set validates additional constraints imposed on an instance XML document only after it is known to be NIEM-conformant (i.e., has been validated to reference schema documents, subset schema documents, extension schema documents, and/or exchange schema documents).  Constraint schema validation is a second-pass validation that occurs independently of and after conformance validation.  A constraint schema need not validate constraints that are applied by other schemas.  See also constraint schema document set.

constraint schema document set - A set of related constraint schema documents that work together, such as a constraint schema document set built by adding constraints to a schema document subset.  See also constraint schema document.

core update - An MPD that applies changes to a given NIEM core schema document or document set.  It never replaces a NIEM core; instead, it is used to add new schema documents, new data components, new code values, etc. to a particular NIEM core.  In some cases, a core update can make minor modifications to existing core data components.

data component - An XML Schema type or attribute group definition; or an XML Schema element or attribute declaration.

domain update - A MPD that contains a reference schema document or document set issued by one or more domains that constitutes new content or an update to content that was previously included in a NIEM release.  A domain update may define and declare new versions of content for NIEM releases or other published content.  The issuing body vets each update before publishing, but the update is not subject to review by other NIEM bodies.  A domain update must be NIEM-conformant, but otherwise it has fewer constraints on quality than does a NIEM release.  Domain update schema documents contain proposed future changes to NIEM that have not been published in a numbered release and have not been vetted by NIEM governance bodies (except by the domain or domains involved).  Domain updates are published to the NIEM Publication Area at http://publication.niem.gov/ and available for immediate use within IEPDs. 

Enterprise Information Exchange Model (EIEM) - An MPD that contains a NIEM-conformant schema document set that defines and declares data components to be consistently reused in the IEPDs of an enterprise.  An EIEM is a collection of BIECs organized into a schema document subset and one or more extension schema documents.  Constraint schema documents and non-NIEM-conformant external standards schema documents with type adapters are optional in an EIEM.

exchange schema document - A NIEM-conformant schema document that declares an XML document element (top-level) for a particular information exchange.

extension schema document - A NIEM-conformant schema document that adds domain or application specific content to the base NIEM model.

external schema document - Any XML schema document that is not a NIEM-supporting schema and that is not NIEM-conformant.

harmonization - Given a data model, harmonization is the process of reviewing its existing data definitions and declarations; reviewing how it structures and represents data; integrating new data components; and refactoring data components as necessary to remove (or reduce to the maximum extent) semantic duplication and/or semantic overlap among all data structures and definitions resulting in representational quality improvements.

IEP root element - The single top-level element in an IEP (instance XML document).  In the absence of any other XML wrapping of an IEP, a root element declared in an exchange schema document is an IEP document element.

Information Exchange Package (IEP) - An XML document that is a valid instantiation of a NIEM IEPD, and therefore, validates with the schema document set of that IEPD.

Information Exchange Package Documentation (IEPD) - An MPD that defines one or more (generally recurring) XML data exchanges.

Information Sharing Enterprise - A group of organizations with business interactions that agree to exchange information, often using multiple types of information exchanges.  The member organizations have similar business definitions for objects used in an information exchange and can usually agree on their common BIEC names and definitions.

major release - A NIEM release in which the NIEM Core reference schema document has changed since previous releases.  The first integer of the version number indicates the major release series; for example, versions 1.0, 2.0, and 3.0 are different major releases.

micro release - A NIEM release in which neither the NIEM Core nor the domain reference schema documents have changed from the previous major or minor release, but one or more new reference schema documents have been added (without impact to domain or Core schemas).  A third digit greater than zero in the version number indicates a micro release (for example, v2.1.1  note that this release does not exist as of this date).

minor release - A NIEM release in which the NIEM Core has not changed from previous releases in the series, but at least one or more domain reference schema documents have changed. - A second digit greater than zero in the version number indicates a minor release (for example, v2.1). - Note also that major v2.0 and minor v2.1 are in the same series (i.e., series 2) and contain the same NIEM Core schema document.

Model Package Description (MPD) - A set of related W3C XML Schema documents and other supporting files organized as one of the five classes of NIEM schema sets:
          Release (major, minor, or micro).
          Domain update (to a release).
          Core update (to a release).
          Information Exchange Package Documentation (IEPD). 
          Enterprise Information Exchange Model (EIEM).
	  An MPD is self-documenting and provides sufficient normative and non-normative information to allow technical personnel to understand how to use or implement it.  An MPD is packaged as a ZIP <ref idref="PKZIP"/> file.

MPD root directory - The top level file directory relative to all MPD artifacts and subdirectories.

reference schema document - An XML Schema document that meets all of the following criteria:
     It is a conformant schema document.
     It is explicitly designated as a reference schema document.  This may be declared by an MPD catalog or by a tool-specific mechanism outside the schema document. 
     It provides the broadest, most fundamental definitions of components in its namespace. 
     It provides the authoritative definition of business semantics for components in its namespace. 
     It is intended to serve as the basis for components in IEPD and EIEM schema documents, including subset, constraint, extension, and exchange schema documents. 
See also reference schema document set.

reference schema document set - A set of related reference schema documents, such as a NIEM release.  See also reference schema document.

release - A reference schema document set published by the NIEM Program Management Office (PMO) at http://release.niem.gov/ and assigned a unique version number.  Each schema defines data components for use in NIEM information exchanges.  Each release is independent of other releases, although a schema document may occur in multiple releases.  A release is of high quality, and has been vetted by NIEM governance bodies.  A numbered release may be a major, minor, or micro release.

schema document set coherence - A schema document set is coherent when it has the following properties:  (1) the set does not refer to a schema document outside the set (i.e., the set is closed), and (2) the set does not include two different versions of the same component in an incompatible way.

schema document subset - An XML schema document set built from a reference schema document set by applying subset operations to that reference schema documents in that set.  See also subset schema document.

subset schema document - An XML schema document that meets all of the following criteria: 
    It is built from a referenc schema document set where one or more reference schema documents has been substituted by a its corresponding subset schema document.   
    It is built from a reference schema document by applying subset operations to the XML schema statements in a reference schema document.
    It is explicitly designated as a subset schema document.  This may be declared by an MPD catalog or by a tool-specific mechanism outside the subset schema document. 
    It has a target namespace previously defined by a reference schema document.  That is, it does not provide original definitions and declarations for schema components, but instead provides an alternate schema representation of components that are defined by a reference schema document. 
    It does not alter the business semantics of components in its namespace.  The reference schema document defines these business semantics.
    It is intended to express the limited vocabulary necessary for an IEPD or EIEM and to support XML Schema validation for an IEPD.
See also schema document subset.

wantlist - An XML document that represents a NIEM schema document subset.  A NIEM wantlist identifies the data component requirements declared by the author of a subset; it does not identify the data component dependencies required to reconstitute the complete schema document subset.  The complete schema document subset can be computed from the reference schema document or document set from which the subset was derived.
</pre>

</section>


<section id="References" isAppendix="true">
	<title>References</title>

<reference id="FBI-NDEX" label="FBI National Data Exchange">
	<p><em>National Data Exchange (NDEx)</em>, Version 2.1.2, March 2013.  Available from <link>https://it.ojp.gov/default.aspx?area=implementationAssistance&amp;page=1017&amp;standard=520</link>.  Additional information from <link>http://www.fbi.gov/about-us/cjis/n-dex/</link>.</p>
</reference>

<reference id="FEA-DRM" label="FEA Data Reference Model">
	<p><em>The Federal Enterprise Architecture Data Reference Model</em>, Version 1.0, September 2004.  Available from <link>http://xml.gov/documents/completed/DRMv1.pdf</link>.  A more recent DRM Version 2.0, 17 November 2005 is available from <link>http://www.whitehouse.gov/omb/assets/egov_docs/DRM_2_0_Final.pdf</link></p>
</reference>

<reference id="GJXDM-IEPD" label="GJXDM IEPD Guidelines">
	<p><em>GJXDM Information Exchange Package Documentation Guidelines</em>, Version 1.1, Global XML Structure Task Force (GXSTF), 2 March 2005.  Available from <link>http://it.ojp.gov/documents/global_jxdm_IEPD_guidelines_v1_1.pdf</link></p>
</reference>

<reference id="ISO-Schematron" label="ISO Schematron">
	<p><em>Schema Definition Languages (DSDL)</em>, <q>Part 3: Rule-based validation : Schematron</q>, ISO/IEC 19757-3:2006(E), First edition, 1 June 2006.  Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c040833_ISO_IEC_19757-3_2006(E).zip</link>.</p>
</reference>

<reference id="LEXS" label="Logical Entity Exchange Specifications">
	<p><em>Logical Entity Exchange Specifications</em>, Version 4.0, 27 July 2011.	Available from <link>http://130.207.211.107/content/downloads</link>.</p>
</reference>

<reference id="NIEM-BIEC" label="NIEM BIEC">
	<p><em>Business Information Exchange Components (BIEC)</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), March 2011.  Available from <link>http://reference.niem.gov/niem/guidance/business-information-exchange-components/1.0/</link>.</p>
</reference>

<reference id="NIEM-Conformance" label="NIEM Conformance">
	<p><em>NIEM Conformance</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), 15 September 2008.  Available from <link>http://reference.niem.gov/niem/specification/conformance/1.0/</link>.</p>
</reference>

<reference id="NIEM-Conformance-Target-Specification" label="NIEM Conformance Target Specification">
	<p><em>NIEM Conformance Target Specification</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), 15 January 2013.  Available from <link>http://reference.niem.gov/niem/specification/conformance-target/1.0/</link>.</p>
</reference>

<reference id="NIEM-ConOps" label="NIEM Concept of Operations">
	<p><em>NIEM Concept of Operations</em>, Version 0.5, NIEM Program Management Office, 9 January 2007.  Available from <link>http://reference.niem.gov/niem/guidance/concept-of-operations/</link>.</p>
</reference>

<reference id="NIEM-DomainUpdate" label="NIEM Domain Update Specification">
	<p><em>NIEM Domain Update Specification</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), 5 November 2010.  Available from <link>http://reference.niem.gov/niem/specification/domain-update/1.0/</link>.</p>
</reference>

<reference id="NIEM-HLTA" label="NIEM High-Level Tool Architecture">
	<p><em>NIEM High-Level Tool Architecture</em>, Version 1.1, NIEM Technical Architecture Committee, 1 December 2008.  Available from <link>http://reference.niem.gov/niem/specification/high-level-tool-architecture/1.1/</link>.</p>
</reference>

<reference id="NIEM-HLVA" label="NIEM High-Level Version Architecture"><p><em>NIEM High Level Version Architecture (HLVA)</em>, Version 1.0, NIEM Technical Architecture Committee, 2008.  Available from <link>http://reference.niem.gov/niem/specification/high-level-version-architecture/1.0/</link>.</p>
</reference>

<reference id="NIEM-IEPD" label="NIEM IEPD Requirements">
	<p><em>Requirements for a National Information Exchange Model (NIEM) Information Exchange Package Documentation (IEPD) Specification</em>, Version 2.1, June 2006.  Available from <link>http://reference.niem.gov/niem/guidance/iepd-requirements/2.1/</link>.</p>
</reference>

<reference id="NIEM-Implementation" label="NIEM Implementation Guidance">
	<p><q>NIEM Implementation Guide</q>, NIEM Program Management Office.  Available from <link>https://www.niem.gov/program-managers/Pages/implementation-guide.aspx</link>.</p>
</reference>

<reference id="NIEM-Intro" label="NIEM Introduction">
	<p><em>Introduction to the National Information Exchange Model (NIEM)</em>, Version 0.3, NIEM Program Management Office, 12 February 2007.  Available from <link>http://reference.niem.gov/niem/guidance/introduction/</link>.</p>
</reference>

<reference id="NIEM-NDR" label="NIEM NDR">
	<p><em>NIEM Naming and Design Rules (NDR)</em>, Version 3.0, NIEM Technical Architecture Committee (NTAC), 31 October 2008.  Available from <link>http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0/</link>.</p>
</reference>

<reference id="NIEM-SSGT" label="NIEM SSGT">
	<p>NIEM Schema Subset Generation Tool (SSGT).  Available from <link>http://tools.niem.gov/niemtools/ssgt/index.iepd</link>.</p>
</reference>

<reference id="NIEM-UserGuide" label="NIEM User Guide">
	<p><em>NIEM User Guide</em>, Volume 1, U.S. Department of Justice, Office of Justice Programs, (date unknown).  Available from <link>http://reference.niem.gov/niem/guidance/user-guide/vol1/</link>.</p>
</reference>

<reference id="OASIS-XML-Cats" label="OASIS XML Catalogs">
	<p><em>XML Catalogs</em>, Organization for the Advancement of Structured Information Standards (OASIS) Standard v1.1, 7 October 2005.  Available from <link>https://www.oasis-open.org/committees/download.php/14809/std-entity-xml-catalogs-1.1.html</link>.</p>
</reference>

<reference id="RAR" label="RAR">
	<p><link>http://win-rar.com</link></p>
</reference>

<reference id="RFC2119-KeyWords" label="RFC2119 Key Words">
	<p>Bradner, S., <em>Key words for use in RFCs to Indicate Requirement Levels</em>, IETF RFC 2119, March 1997.  Available from <link>http://www.ietf.org/rfc/rfc2119.txt</link>.</p>
</reference>

<reference id="RFC3986-URI" label="RFC3986 URI">
	<p>Berners-Lee, T., et al., <em>Uniform Resource Identifier (URI): Generic Syntax</em>, Request for Comments 3986, Network Working Group, January 2005.  Available from <link>http://tools.ietf.org/html/rfc3986</link>.</p>
</reference>

<reference id="W3-EXI">
	<p><em>Efficient XML Interchange (EXI) Format</em>, Version 1.0, W3C Recommendation, 10 March 2011.  Available from <link>http://www.w3.org/TR/2011/REC-exi-20110310/</link>.</p>
</reference>

<reference id="W3-OWL">
	<p><em>OWL Web Ontology Language Reference</em>, W3C Recommendation 10 February 2004.  Available from <link>http://www.w3.org/TR/2004/REC-owl-ref-20040210/</link>.</p>
</reference>

<reference id="W3-RDF">
	<p><em>Resource Description Framework (RDF): Concepts and Abstract Syntax</em>, W3C Recommendation 10 February 2004.  Available from <link>http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/</link>.</p>
</reference>

<reference id="W3-XML">
	<p><em>Extensible Markup Language (XML)</em>, Version 1.0, Fifth Edition, W3C Recommendation 26 November 2008.  Available from <link>http://www.w3.org/TR/2008/REC-xml-20081126/</link>.</p>
</reference>

<reference id="W3-XML-InfoSet">
	<p><em>XML Information Set</em>, Second Edition, W3C Recommendation 4 February 2004.  Available from <link>http://www.w3.org/TR/2004/REC-xml-infoset-20040204/</link>.</p>
</reference>

<reference id="W3-XML-Namespaces">
	<p><em>Namespaces in XML</em>, Second Edition, World Wide Web Consortium 16 August 2006.  Available from <link>http://www.w3.org/TR/2006/REC-xml-names-20060816/</link>.</p>
</reference>

<reference id="W3-XML-Schema-Datatypes" label="W3C XML Schema Datatypes">
	<p><em>XML Schema Part 2: Datatypes</em>, Second Edition, W3C Recommendation 28 October 2004.  Available from <link>http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/</link>.</p>
</reference>

<reference id="W3-XML-Schema-Structures" label="W3C XML Schema Structures">
	<p><em>XML Schema Part 1: Structures</em>, Second Edition, W3C Recommendation 28 October 2004.  Available from <link>http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/</link>.</p>
</reference>

<reference id="W3-XSLT" label="XSLT v1.0">
	<p><em>XSL Transformations (XSLT)</em>, Version 1.0, W3C Recommendation 16 November 1999.  Available from <link>http://www.w3.org/TR/1999/REC-xslt-19991116</link>.</p>
</reference>

<reference id="W3-XSLT2" label="XSLT v2.0">
	<p><em>XSL Transformations (XSLT)</em>, Version 2.0, W3C Recommendation 23 January 2007.  Available from <link>http://www.w3.org/TR/2007/REC-xslt20-20070123/</link>.</p>
</reference>

<reference id="PKZIP">
	<p><em>APPNOTE.TXT - .ZIP File Format Specification</em>, Version: 6.3.2, Revised: 28 September 2007, Copyright (c) 1989 - 2007 PKWare Inc.  Available from <link>http://www.pkware.com/documents/casestudies/APPNOTE.TXT</link>.</p>
</reference>

</section>

</document>

