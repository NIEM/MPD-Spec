<?xml version="1.0" encoding="US-ASCII"?>
<document
   xmlns="https://iead.ittl.gtri.org/wr24/doc/2011-09-30-2258"
   xmlns:ct="http://release.niem.gov/niem/conformanceTargets/3.0/"
   xmlns:html="http://www.w3.org/1999/xhtml"
   xmlns:appinfo="http://release.niem.gov/niem/appinfo/3.0/"
   xmlns:doc="https://iead.ittl.gtri.org/wr24/doc/2011-09-30-2258"
   xmlns:j="http://release.niem.gov/niem/domains/jxdm/5.0/"
   xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
   xmlns:sch="http://purl.oclc.org/dsdl/schematron"
   xmlns:structures="http://release.niem.gov/niem/structures/3.0/"
   xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:er="urn:oasis:names:tc:entity:xmlns:xml:catalog"
   xmlns:c="http://reference.niem.gov/niem/resource/mpd/catalog/3.0/">
 
   <title>National Information Exchange Model <char name="mdash"/> High-Level Version Architecture</title>
   <version>3.0alpha1</version>
   <date>2014-06-24</date>
   <author>NIEM Technical Architecture Committee (NTAC)</author>
 
  <subsection>
  	<title>Contents</title>
  	<tableOfContents/>
  </subsection>
  
  <subsection>
	<title>Abstract</title>
	<p>This document specifies the National Information Exchange Model (NIEM) version architecture.  This specification identifies the processes, artifacts, responsibilities and how they interact to produce new releases of and updates to the NIEM model.  This latest draft establishes a regular schedule for major and minor releases per the new 2014 Release Optimization Strategy.</p>
  </subsection>



<subsection>
    	<title>Status</title>
    	<p>This document is a draft that represents the design for versioning that evolved from the collaborative work of the NIEM Technical Architecture Committee (NTAC), and subsequent work of the NIEM Business Architecture Committee (NBAC).  The 2014 Release Optimization Strategy is a recommendation to the Executive Steering Council (ESC) to allow a regular annual NIEM release annually if needed.  In June 2014 the ESC approved the recommendation.  This version supersedes Version 1.0 dated 31 July 2008.</p>
    	<p>This specification is a product of the NIEM Program Management Office (PMO).</p>
    	<p>Email comments on this specification to <link href="mailto:niem-comments%40lists.gatech.edu?subject=NIEM%20MPD%20Specification%20Version%203.0">niem-comments@lists.gatech.edu</link>.</p>
</subsection>


<subsection>
	<title>Initial draft Alpha1</title>
	<ol>
		<li><p>.</p></li>
	</ol>
</subsection>


<subsection>
	<title>Remaining work</title>
	<ol>
		<li><p>TBDs: pub dates on new specs <ref idref="References"/>.</p></li>
		<li><p>Final QA: typos, spell, punctuation, acronyms, abbreviations, format, missing refs or termRefs, etc.</p></li>
	</ol>
</subsection>



<section id="Introduction">
	<title>Introduction</title>

	<p>This document describes the NIEM version architecture at a high level.  It describes the approach and the major artifacts involved, without specifying them at a detailed level.  This documented is intended to frame further discussion and specification efforts, leading to a precise specification in the future.</p>

	<p>The version architecture discusses issues that have inherently conflicting tradeoffs.  It seeks a balance of concepts drawn from previous NTAC discussions and ideas.  Major tradeoffs include:</p>

<ul>
	<li><p>Timeliness versus Stability</p></li>
	<li><p>Autonomy versus Interoperability</p></li>
	<li><p>Ease for IEPD developer versus ease for Domain developer</p></li>
</ul>



<section id="Scope">
	<title>Scope</title>
	
	<p>The high-level version architecture describes how NIEM governance bodies update the data components and schemas that make up NIEM.  This document is a high-level, abstract form of the eventual specification.  It describes, at a high level, topics that will eventually be specified by a complete version architecture.</p> 
			
	<p>This document assumes that the reader is familiar with NIEM and its artifacts.  Readers needing additional background on NIEM should refer to documents on the NIEM website at <link>http://niem.gov/</link>.</p>

</section>



<section id="Background">
	<title>Background</title>

	<p>The National Information Exchange Model (NIEM) is represented as a set of XML Schema documents (schemas) that define data components.  Implementers of information exchanges use these data components to build information exchange packages.  The goal of NIEM is to define common data components that are highly reusable, to improve the economy of implementing information exchanges, to increase comprehension of those exchanges, and to reduce errors in exchanges.</p>

	<p>The NIEM Technical Architecture Committee (NTAC) and the NIEM Business Architecture Committee (NBAC) govern NIEM.  The NIEM Program Management Office (PMO) is the executive body that oversees the development and maintenance of NIEM.  The NBAC and NTAC may appoint standing subcommittees and transitory tiger teams who take responsibility for specific issues.  Together, these bodies are referred to as the NIEM governance bodies.</p>

	<definition term="domain">
		<p>An organization or body that uses NIEM and works with NIEM governance to manage data component definitions for some community of interest (COI) or agency.</p>
	</definition>

	<p>A NIEM domain has an organization independent of NIEM, and may have its own rules, procedures, schedule, and priorities.  The data components that make up NIEM are published as a set of NIEM releases.  Each NIEM release is composed of a set of schemas.  Within a NIEM release, the NIEM Core schema contains the content of the release that is common or universal.  Additional schemas within NIEM releases include domain schemas and code table schemas.  Each domain or code table schema has a body that is responsible for its content and maintains its own timeline for update and publication.  For this document, the term "domain" applies to both domain working groups and to code table working groups.</p>

	<p>For more information on what is included in the NIEM Core, what domains and code table schemas have been defined, and what is included in these domain and code table schemas, see <link>http://niem.gov</link>.</p>

</section>
</section>



<section id="Objectives">
	<title>Objectives</title>

	<p>The architecture described by this document should achieve to the following objectives:</p>

	<ul>
		<li><p>	Each domain may publish updates on its own timeline.  This publication is not delayed by waiting for the NBAC review.</p></li>		
		<li><p>Domain updates are quickly available for use by IEPDs (Information Exchange Package Documentation). A domain may accommodate IEPDs for its domain as well as cross-domain IEPDs.  Updates may be used by IEPDs without being delayed by an update/synchronization/harmonization process.</p></li>
		<li><p>Domain updates are incorporated into the next NIEM release.</p></li>		
		<li><p>IEPD developers are provided with a NIEM release, which is an updated schema set that is coherent, for increased usability.</p></li>
		<li><p>IEPDs have the flexibility to use NIEM components as required to satisfy their business requirements.  An IEPD may reference components from one or more NIEM releases, as well as other published content.</p></li>		
		<li><p>There is a specific, concrete path for domains to provide input to the NBAC's update/synchronization/harmonization processes, for inclusion in future NIEM releases.</p></li>
		<li><p>There is a reliable schedule for (1) domain reconciliation activities, (2) the minor releases produced by domain reconciliation, (3) Core synchronization activities, (4) the NIEM major releases produced by Core synchronization.  Providing schedules ensures that participants in the activities know when their input is due and timelines for required work.  It also ensures that users of the releases can plan for release dates.</p></li>		
		<li><p>All changes are visible:  Each namespace URI is used for exactly one version of a schema, so any change results in a new namespace URI.  In addition, change logs support descriptions of changes made to namespaces.</p></li>
	</ul>



<section id="Not Objectives"/>
	<title>Not Objectives</title>

	<p>The following were not objectives of the NIEM High Level Version Architecture:</p>

	<ul>
		<li><p>Reuse of a single schema target namespace Uniform Resource Identifier (URI) for multiple versions of a schema.  The methods of the HLVA create new schemas with new URIs for changed, modified, and otherwise updated components.</p></li>
		<li><p>Definition of backwards compatibility or forwards compatibility between XML Schema documents.  The concept of compatibility between schema definitions is difficult to maintain without sacrificing precise schema validation.  The HLVA selected methods that allow for easy migration between schema versions, while maintaining precise schema validation based on specific schema definitions.</p></li>
		<li><p>Description of specific criteria for harmonization and best practices for design of the contents of schemas.  These will be addressed in other NIEM documents.</p></li>
		<li><p>Description of candidate releases and prereleases.  The NIEM HLVA is concerned only with schemas and supporting artifacts that are durable, and for which there must be long-term support.  The use of candidate releases and prereleases will be addressed by recommendations on domain governance and release strategy, which will the subject of other NIEM documents.  Additional methods and functionality within the collaboration area to support prereleases will be described by the final version architecture specification.</p></li>	
	</ul>

</section>
</section>



<section id="Overview">
	<title>Overview</title>

	<p>The high level version architecture provides a framework for changes to be performed, in a systematic way, on a set of artifacts.  These are outlined in subparts of this section.  The activities that lead to changes in the schemas and other artifacts are driven by a desire to improve the model.  Improvements include correcting errors, meeting previously unforeseen requirements, and adapting to new needs and new uses of the model.  One concern is how we define improvement to the model.  A common term for improving systems is <em>harmonization</em>, a term which we adopt for this effort.</p> 

	<definition term="harmonization">
		<p><em>Harmonization</em> (of a schema or set of schemas) is the process of modifying a schema set in an incremental fashion for the purpose of improving the quality of the schema set with respect to some criteria. For example, a schema set may be harmonized to reduce semantic overlap of its components.  Or, a schema set may be harmonized to ensure uniformity of the vocabulary used in definitions of its components.</p> 
	</definition>

	<p>Harmonization may be conducted within a single schema, or may be conducted across multiple schemas of a schema set.</p>

	<p>The version architecture does not anticipate that NIEM will ever be completely harmonized (a theoretical perfect state for a schema set, in which all components perfectly meet all criteria).  In practice, a fully harmonized state is never reached, and the goal of harmonization is incremental improvement, rather than perfection.</p>

	<p>This section outlines the basic structure of the architecture.  Many details are in later sections.</p>



<section id="Classes-of-Information">
	<title>Classes of Information</title>

	<p>There are several classes of information that are employed by the version architecture.  These include:</p>

	<ol>
		<li><p><strong>NIEM releases</strong>.  A NIEM release is a set of schemas that is published by NIEM.  Each of these schemas defines data components for use in information exchanges.  A release should be easy to use, and should define each concept in a coherent way.  Each release is independent of other releases, although a schema may occur in two releases.  A release is of high quality, and has been vetted by NIEM governance bodies.</p></li>

		<li><p><strong>Published updates</strong>.  A published update is a schema or set of schemas that is issued by a domain or by a NIEM subcommittee or tiger team.  An update may be new content or may be an update of content that was previously included in a NIEM release.  A published update may define new versions of content from NIEM releases or other published content.  The issuing body vets each update before its publication, but the update is not subject to review by other NIEM bodies.  A published update must be conformant, but otherwise it has fewer constraints on quality than does a NIEM release.</p></li> 

		<li><p><strong>Issues</strong>.  Users of NIEM schemas and components will find problems that should be addressed.  These will include erroneous syntax or definitions, inconsistencies between different parts of the model, and new requirements that are not yet satisfied.  An issue is a record of one of these problems.  An issue's record may include discussion of the problem and possible solutions, as well as changes made to the model to solve the problem.</p></li>
</ol>

</section>



<section id="Data-Stores">
<title>Data Stores</title>

<p>There are several data stores in the architecture.  General terms are used here, to avoid introducing any requirements or restrictions associated with an existing tool, such as a registry, repository, or specific web software such as Bugzilla and Sharepoint.  This description seeks only to describe requirements and functionality for these data stores.</p>

<ol>
	<li><p><strong>Release area</strong>:  The release area stores NIEM releases, and makes them publicly available.</p></li>
	<li><p><strong>Publication area</strong>:  The publication area stores and makes publicly available domain updates and artifacts published by tiger teams.</p></li>
	<li><p><strong>Issue tracking area</strong>:  The issue tracking area supports registration, modification, and discussion of issues pertaining to NIEM artifacts.  This may be or include the NCCT (NIEM Configuration and Control Tool).</p></li>
	<li><p><strong>Collaboration area</strong>:  The collaboration area supports cooperative editing of artifacts, as well as discussion by domains and other NIEM working groups.  Each domain or working group receives its own partition within the collaboration area.  These partitions are private, as access to each partition is restricted to the members of the appropriate working group.</p></li>
</ol>

</section>



<section id="Activities">
	<title>Activities</title>

	<p>There are 4 major activities involved in managing versions of NIEM.  These are the processes in which the domain managers and NBAC and NTAC chairs are engaged, as they improve and extend NIEM.</p>

	<ol>
		<li><p><strong>Domain update</strong>:  A domain may publish updates to its schemas.   A domain update is published to the publication area.  A domain update proposes updates to future NIEM releases.</p></li>

		<li><p><strong>Domain reconciliation</strong>:  The NBAC will resolve conflicts between domain updates, through a process called domain reconciliation.  This process results in a reconciled, coherent schema set.  This schema set is published as a minor NIEM release.</p></li>

		<li><p><strong>Cross-domain harmonization</strong>:  The NBAC will initiate tiger teams and working groups to resolve inconsistencies, overlaps, and other semantic issues between the domains, and between the domains and Core.  The results of these efforts will go into the publication area, to be included in the next major or minor NIEM release, as appropriate.</p></li>

		<li><p><strong>Core synchronization</strong>:  The results of cross-domain harmonization are merged into a new release of the NIEM Core namespace, with domains synchronized to the new NIEM Core.  Together, these form a major release.</p></li>
	</ol>

</section>



<section id="Walkthrough-Versioning">
	<title>A Walkthrough of Versioning</title>

	<p>The NIEM versioning process contains several activities, performed by various parties.  This section walks through these activities, and highlights the inputs and outputs of each.  Each activity and artifact is discussed in more detail in later sections.  Figure 1: Activity flow for the NIEM versioning processes.</p>

	<p>Here is a brief high-level walkthrough of versioning, describing the processes:</p>

	<ol>
		<li><p>NIEM releases and domain updates are available for use in IEPDs and other use.</p></li>
		<li><p>Through use and analysis of NIEM releases and published content, domain users will identify problems and new requirements for domain content and Core content.  Users include developers of IEPDs, as well as implementers and users of exchanges.</p></li>
		<li><p>These problems and requirements will be entered and tracked as issues in the issue tracking area.</p></li>
		<li><p>NIEM domains use issues as the basis for incremental improvements, extensions, and proposed changes to NIEM releases.  This process is called domain update.  Domains may work together via a partition of the collaboration area.</p></li>
		<li><p>Domains publish their domain updates in three ways:  (1) Issues are updated and new issues are entered in the issue tracking area.  (2) Domain schemas are updated in the publication area.  (3) Optionally, domains may release coherent schema changes via a NIEM micro release, published in the release area.  A minor release is often domain specific, and has a 3-digit version ID, such as 3.10.2.</p></li>
		<li><p>Periodically, the NBAC reconciles domain updates into a new NIEM minor release.  The goals of this process are (1) to resolve the conflicts and inconsistencies that are created by new and modified domain content, (2) to produce a coherent set of reference schemas for the domains, and (3) to perform some incremental harmonization on that schema set.  This process is called domain reconciliation, and is repeated approximately every 6 months.    In this process, the NBAC examines issues, published updates, and releases, and reconciles changes to domains into a single coherent domain schema set.  The NBAC ensures that all domains reference each other in a consistent way.</p></li>
		<li><p>The result of this reconciliation process is published as the next NIEM minor release.  This release is coherent.  This release has a version ID.  This release is called a NIEM minor release, and it contains no modification to the NIEM Core namespace.  It may contain some additional Core content (in a new namespace), but will not modify the NIEM Core namespace.  This is published approximately every 6 months, as the result of domain reconciliation.  A NIEM minor release has a 2-digit version ID that does not end in "0", such as "4.2".  For those issues that are not resolved via domain reconciliation, issues in the issue tracking area are updated, created, and closed, as appropriate.</p></li>
		<li><p>At any time, asynchronously with other processes, NBAC or NTAC may initiate a tiger team to conduct cross-domain harmonization.  A tiger team is a small working group of subject matter experts (SMEs) formed to solve a specific set of problems.  A tiger team exists only for a short time; it is disbanded once it has served its purpose.</p></li>
		<li><p>A tiger team that is formed by the NBAC or NTAC will solve some set of problems with the NIEM model.  For example, it may resolve a set of major harmonization issues between the domains and Core.  Or, it may address a new requirement that requires thought and experience.  Or, it may identify, within the domains, components with semantic overlap, and will pull them up into Core for common definition and use.  This process is called cross-domain harmonization.</p></li>
		<li><p>The results of tiger teams will be made available in a partition of the publication area.  This partition may hold schemas that contain additions to and extensions of the NIEM Core namespace.  Each schema is published with a unique namespace, distinct from the NIEM Core namespace.  The domains may use these schemas in domain updates, and IEPDs may use these schemas, as well.  The contents of these partitions of the publication area will be considered during the domain reconciliation process (step 6, above), and a supporting schema containing additional Core content may be published with the periodic minor release.</p></li>
		<li><p>Approximately every 18-24 months, the results of cross-domain harmonization and domain reconciliation are brought together into a new NIEM major release.  This process is called Core synchronization.  The NIEM Core namespace is updated with help from issues in the issue tracking area, as well as the published updates from the domains and tiger teams.  Domain definitions that were dependent on the previous NIEM Core are harmonized with the updated NIEM Core namespace.</p></li>
		<li><p>Core synchronization results in a new NIEM major release, with an updated NIEM Core namespace.  A NIEM major release has a 2-digit version ID that ends in "0", such as "4.0".</p></li>
	</ol>

</section>
</section>



<section id="Activities">
	<title>Activities</title>

	<p>This section contains further discussion and details of the major activities of the NIEM version architecture.</p>



<section id="Domain-Reconciliation">
	<title>Domain Reconciliation</title>

	<p>Once a NIEM release is published, updates and requests for changes accumulate.  Users post issues (in the issue tracking area) describing problems with and unmet requirements of NIEM schemas.</p>

	<p>In response to these issues, domains publish updates to their namespaces.  They identify and define new content that they require.  They define and update code tables that they require.  These updates are published in the domain partitions of the publication area.</p>

	<p>Approximately every 6 months, the NIEM Business Architecture Committee (NBAC) reconciles these requests with the latest published release, in order to produce a coherent NIEM schema set.  This reconciliation will result in a schema set that is easily used by IEPD developers.</p>

	<p>The NBAC makes decisions on how to accommodate changes.  In the publication areas, domains publish updates prior to NBAC approval, ensuring autonomy of the domains.  The NBAC determines how best to migrate these updates into the next NIEM minor release.  The NBAC conducts domain reconciliation approximately every 6 months.</p>

	<p>This reconciliation process will consist of the following stages:</p>

	<ol>
		<li><p>Gather and prepare input to the reconciliation process.</p>
			<p>This input will come from open issues in the issue tracking area, and from domain partitions of the publication area.  The content of the publication area will be evaluated for impacts.  Sample reports that will be prepared may include:</p>

		<ul>
			<li><p>Reports describing the impacts of proposed changes on other domain namespaces.</p></li>
			<li><p>Reports assembling the comments that other domains have made about proposed changes.</p></li>
			<li><p>Reports containing technical metrics that quantify the (1) consistency of harmonization on the input schema set, and (2) the impacts of proposed changes.</p></li>
			<li><p>NTAC recommendations on technical methods and techniques for handling domain requests.</p></li>
			<li><p>Conformance and quality checks (Reference NIEM NDR and NIEM Quality Assurance Strategy and Plan).  Conformance and quality checks are performed prior to publication of schemas to the publication area, but additional reports on quality and conformance may be made available to the NBAC for reconciliation.</p></li>
		</ul></li>

		<li><p>Reconcile proposed domain updates.</p></li>

	<p>Starting with the previous NIEM release, the NBAC will review and apply the changes that were requested by the domains.  For each proposed domain update, approve the update, or modify it as required to maintain high quality across all NIEM schemas.</p>

	<p>When a change is applied, make modifications in other domains, as required, to keep the schema set coherent.  Where domain updates introduce integrity issues, modify the schema set to eliminate those problems.  Propagate domain updates through impacted namespaces, as appropriate.</p>

	<p>Note that there is no requirement or implication that any harmonization will be done by tools, or automatically in any way.  The goal of this architecture is to ensure that the responsible party has the authority, schedule, goal, and ability to do what is needed to ensure that domain changes result in a coherent set of domain schemas that can easily be used in IEPDs.</p>



<section id="NBAC-Decisions">
	<title>NBAC Decisions</title>

	<p>Through the process of domain reconciliation, the NBAC will resolve many issues of cross-domain conflict.  This may include changes to one domain that affect another domain, or overlaps of content between domains.  Through the reconciliation process, the NBAC will make adjustments as-needed to ensure that domain updates do not harm the quality of the NIEM release as a whole.</p>

	<p>During its periodic domain reconciliation, the NBAC may conduct additional harmonization.  Issues addressed may be "low hanging fruit", such as particularly easy or notable problems.  Or, the NBAC may try to resolve one or more aspects of harmonization across the NIEM model, such as vocabulary consistency.  During reconciliation, it is likely that time will be short, and the level of effort will be limited.  So, during reconciliation, extremely broad changes would be avoided, as would changes that required significant consideration by subject matter experts.  Such issues would be handled by tiger teams and small groups in a separate process, cross-domain harmonization.</p>

	<p>The NBAC, as the designated body for harmonization, may make any decision that they deem prudent to integrate domain updates with the previous NIEM release.  This may include the modification of dependent namespaces to accommodate domain changes, the creation of new elements for indirect (substitution) methods, and the modification of definitions and component names.</p>

	<p>The NBAC may also choose to reject, in whole or in part, any domain update.  Of course, the NBAC should have valid reasons for such action.  However, the NBAC is given the responsibility of acting in the best interest of the NIEM community, rather than in the interest of a single domain.  Note that no change the NBAC makes will affect any content that is published by the domains in the publication area, nor will any content from the release area be affected.  That content stands as it is, without change.  Barring a valid objection against a domain update, the NBAC would adopt the update for the next version of the NIEM domain schema, and would propagate that change into dependent schemas, as required.  This may require that the NBAC exercise judgment.</p>

</section>  <!-- end 4.1.1 -->



<section id="Coherence">
	<title>Coherence</title>

	<p>This document uses the term coherence to describe whether components of a schema set refer to each other in a consistent manner:</p>

	<p>A schema set is coherent when it has the properties that (1) the schema set does not refer to a schema outside the set, and (2) the set does not include two different versions of the same component in an incompatible way.</p>

	<p>The coherence of a NIEM distribution is best described by showing a schema set that is not coherent.  In this schema set, a Justice 4.1 version is based on Justice 4.0, with a new element ("NewElement") added to ArrestType.  The latest schemas are outlined in the rounded boxes below.  The schema set that is composed of these schemas is not coherent.</p>

	<p>Figure 2: Schema set that is not coherent</p>

	<p>Why is this not coherent?  An IEPD would not be able to use the newest schemas (Screening and Justice-4.1) together as designed.  Instead, the IEPD would require a substantial amount of work to make these two schemas work together.  For example, the developer of an IEPD might duplicate NewElement within its extension namespace.  Or, it might create an extension of the 4.0 ArrestType that uses the 4.1 NewElement.   Such changes would be required for each incompatibility between versions.  In an environment where many domains are updating frequently, this presents IEPD developers with a substantial problem.</p>

	<p>However, the NBAC could reconcile the request from the domain (adding "NewElement") with other requests from other domains.  It could then produce the reconciled schema set, which would look like the following:</p>

	<p>Figure 3: Coherent schema set</p>

	<p>This schema set could be easily used by an IEPD developer.  It would not require IEPD developers to develop custom extensions to fix problems in the schema set.  The new Screening namespace (1.1) is integrated with the new Justice namespace.  The final version architecture specification will address the structure of version identifiers in the domain schemas.  Specifically, it may be desirable for version identifiers for "bumped" namespaces to be easily distinguished from version identifiers for domain-initiated changes.  The specific rules that apply to version identifiers of schemas will be defined by the version architecture specification.</p>

</section>  <!-- end 4.1.2 -->
</section>  <!-- end 4.1 -->



<section id="Micro-Releases">
	<title>NIEM Micro Releases</title>

	<p>When a domain has created its updated content, it may determine that the content should be released as a coherent NIEM release.  This will be verified by tools that check conformance and coherence of the resulting schema set.  Once these checks are complete, a domain may elect to publish their update directly as a NIEM micro release in the release area, rather than as a published update in the publication area.</p>

	<p>Schemas published in this manner may be more durable than schemas published to the publication area.  That is, schemas so published may work better with more versions of NIEM.  NIEM releases will not refer to schemas in the publication area; schemas from the publication area are reconciled and modified before their release, and they get new target namespace URIs.  Schemas published directly to releases avoid reconciliation.  They also will not have to be modified as they go from the publication area to the release area, as they avoid the first step.  A prime candidate, and simple example, of this method is a code table.  By defining a code element such that it is substitutable for an element from a NIEM release, multiple versions of a schema set may be usable at the same time.  A new version of such a code table may be released as part of a NIEM micro release without requiring rework of other schemas.  NIEM micro releases require tools for validation and verification.  They also require a commitment to frequent NIEM releases, with limited vetting.</p>

</section>  <!-- end 4.2 -->



<section id="Cross-Domain-Harmonization">
	<title>Cross-Domain Harmonization</title>

	<p>Larger and deeper issues of semantic consistency and modeling will be addressed by tiger teams and small groups of subject matter experts, as determined by the NBAC.  The tasks undertaken by these teams will, in many cases, not require the entire NBAC to weigh in.  The use of such teams will enable parallel harmonization efforts.  This will result in greater scalability, as the number of domains increase.</p>

	<p>The products of cross-domain harmonization will include (1) recommendations on domain updates in future minor releases, and (2) additional Core content provided via extensions and augmentations in new schemas within the publication area.  The additions to NIEM Core that appear within the publication area may be immediately used by IEPDs, and domains may base published updates on those schemas.</p>

</section>  <!-- end 4.3 -->



<section id="Core-Synchronization">
	<title>Core Synchronization</title>

	<p>Periodically, these products will be synchronized with domain content, to produce a new major release.  A major release will contain a new NIEM Core namespace.  A major release provides an opportunity to execute destructive changes, such as component deletions.  At the time of a major release, other major changes to the NIEM release schema set may be considered by the NBAC, such as changes to structures and appinfo, which are schemas that are part of the infrastructure of NIEM.  For more information on structures and appinfo, see the NIEM Naming and Design Rules and other documents on the NIEM website.</p>

	<p>NIEM Core synchronizations will occur approximately every 18-24 months.  However, a NIEM Core synchronization may be held back over a longer period if changes to be released do not meet a certain threshold, such as a certain number of changes, or changes of a certain severity.   The NBAC will have to balance the need for regular scheduled releases with the set of components that must be harmonized across domains for inclusion into the Core.</p>

	<p>In between updates to NIEM Core, the NBAC may add Core content via additional components in additional schemas in minor releases of NIEM, without updating the NIEM Core schema.  These would be additive changes only, and would not modify the original NIEM Core schema in any way.</p>

</section> <!-- end of 4.4 -->
</section> <!-- end of 4 -->



<section id="Releases">
	<title>NIEM Releases</title>

	<p>The NBAC domain reconciliation activity results in a NIEM minor release.</p>



<section id="Properties-of-Release">
	<title>Properties of a NIEM Release</title>

	<p>A NIEM release has the following properties:</p>

	<ul>
		<li><p>The release is coherent.  That is, it contains only a single version of each domain namespace.</p></li>
		<li><p>The release integrates the latest input from the domains, with accommodations made by the NBAC to make them work together.</p></li>
		<li><p>The release contains new versions of only those namespaces that require update.  Schemas that require no update will be part of the release without modification.</p></li>
		<li><p>If required, a namespace will be updated to accommodate changes in other namespaces.  This is determined by the NBAC during the reconciliation process.</p></li>

</section>



<section id="Status-of-Release">
	<title>Status of a NIEM Release</title>

	<p>Two types of harmonization/reconciliation:  (1) between the domains (domain reconciliation), and (2) with NIEM Core and the domains (Core synchronization).  This gives the opportunity to distinguish between the subsequent releases.  Reconciliation of domains results in a minor release, while reconciliation of NIEM Core results in a major release.</p>

</section>



<section id="Version-Identifiers-for-Releases">
	<title>Version Identifiers for NIEM Releases</title>

	<p>Domain-synchronized NIEM releases are given minor release version numbers.  NIEM Core-synchronized NIEM releases are given major release version numbers.  Direct releases due to domain updates are given micro release numbers.</p>

	<p>When Core synchronization occurs, the results are published as a NIEM major release.  These releases will be given IDs like 2.0, 3.0, and 4.0.  These releases will yield a NIEM Core namespace that has the same version ID as the NIEM release.</p>

	<p>When domain reconciliation occurs, without update of the NIEM Core namespace, the results are published as a NIEM minor release.  These releases have IDs like 2.1, 2.2, 2.3, 3.1, 3.2, and 3.3.  When domain update occurs, without reconciliation, and the domain causes to be published a new release that incorporates that update, the results are published as a NIEM micro release.  These releases have IDs like 2.1.1, 2.1.2, 2.2.1, and 2.2.2.</p>

	<p>For NIEM release identifiers, major releases have two numbers (like 2.0).  The major digit (2), and the minor digit (.0).  The minor release following 2.0 is 2.1.  The micro release following 2.1 is 2.1.1.  There is no version 2.1.0.</p>

	<p>For NIEM release identifiers, the value following 2.9 is 2.10.  Each number (major, minor, or micro) is a field storing an integer; it is not a single digit.</p>

	<p>The version IDs for released domain schemas (in the release area) and published schemas (in the publication area) are not described by this high-level version architecture.  Constraints on these identifiers have not yet been determined, and will be specified fully in the final version architecture specification.</p>

</section>
</section>  <!-- end of 5 -->



<section id="Data-Stores">
	<title>Data Stores</title>

	<p>The version architecture defines several areas in which artifacts of NIEM are stored.  Each may be implemented using new or existing tools.  The goal of this document is to describe the areas, what information they contain, and what functionality is needed to support activities that use these areas.</p>

	<p>The specific software and tools that make up these data stores is not specified by this document.  Such specification will be made by later documents.</p>



<section id="Release-Area">
	<title>6.1 The Release Area</title>

	<p>All releases of NIEM are published to the release area.</p>

	<p>All schemas published to the release are persistent, and are available for immediate use by IEPD developers and other users.</p>

	<p>A single schema may be a part of multiple releases.  For example, a single release of the NIEM Core namespace will be a part of several minor releases.  The release area will provide metadata to make clear exactly which schemas are associated with which releases.  This metadata is referred to as the release manifest.  The format of this metadata is yet to be determined.  This release area may be the current niem.gov website, but this is yet to be determined.</p>

</section>



<section id="Collaboration-Area">
	<title>6.2 The Collaboration Area</title>

	<p>The collaboration area supports cooperative editing of artifacts, as well as discussion by domains and other NIEM working groups.  Each domain or working group receives its own partition within the collaboration area.</p>

	<p>These partitions are private, as access to each partition is restricted to the members of the appropriate working group.</p>

	<p>The precise mechanics and content of the collaboration area is to be determined.</p>

</section>


<section id="Publication-Area">
	<title>6.3 The Publication Area</title>

	<p>The publication area is a well-known location for domains and other working groups to publish schemas and other artifacts for NIEM.  This has two major purposes:</p>

	<ol>
		<li><p>It allows published content to be immediately used.</p></li>
		<li><p>It provides a concrete method for changes to be expressed for domain reconciliation and Core synchronization.</p></li>
	</ol>
	
	<p>All content of the publication area is persistent.  That is, it never goes away once it is published.  It also is never modified.  Revised versions of published content may also be published, however, no artifact is removed or revised.  This ensures that all content of the publication area may be freely used by any development effort, without fear of it changing or disappearing.  All content of the publication area is available for use by IEPD developers, as well as developers of other schemas and applications.</p> 


	<section id="Parititions-of-PA">
		<title>6.3.1 Partitions of the Publication Area</title>

		<p>Each domain and working group controls a partition of the publication area.  This partition is the publication site for products of the working group.  The domain may place any number of schemas into its publication area.</p>

	</section>



	<section id="Use-of-PA">
		<title>6.3.2 Use of the Publication Area</title>

		<p>Schemas within the publication area may provide additional content, or describe other changes to a NIEM release.  Here is how the publication area is used:</p>

		<ul>
			<li><p>After a NIEM release is published, it becomes available for use by IEPDs.  Through use and analysis of that NIEM release, domain users will identify problems and new requirements for domain content and Core content.  These will be conveyed via the issue tracking area.</p></li>
			<li><p>The domain, under its own governance, determines what changes it believes should be made to the latest NIEM distribution.  It expresses these changes by publishing schemas and supporting metadata in its partition of the publication area.  Requests by the domain for changes to other domains and Core will be made through the issue tracking area and the NCCT.</p></li>
			<li><p>Schemas published to the publication area are immediately available for use by IEPDs.  Both domain IEPDs and cross-domain IEPDs may use any schemas in the publication areas, as they require.</p></li>
			<li><p>The schemas, supporting metadata, and issues (in the issue tracking area) describe changes the domain makes to the domain and requests for changes to Core content.   The requested changes are considered by the NBAC, and are reconciled with the last release, and with changes requested by other domains.</p></li>
			<li><p>The result of the NBAC reconciliation is published as the next NIEM release.  Some details on how the publication area works:</p></li>
			<li><p>Schemas in the domain partition of the publication area may extend components within NIEM releases, instead of superseding namespaces within NIEM releases.</p></li>
		</ul>

		<p>The schemas in NIEM 2.0 contained schemas that superseded the schemas in NIEM 1.0.  Schemas in the domain publication areas are not required to supersede older schemas in this manner.  Instead, schemas in the publication area may extend schemas in previous NIEM distributions.  This may make domain updates easier to use by IEPDs.</p>

		<p>For example, suppose domain <code>JXDM</code> wishes to add an element <code>ArrestSubject</code> to the type <code>ArrestType</code> that occurred in <code>JXDM-4.0</code>.  It may publish a schema in its publication area that extends the <code>JXDM 4.0 ArrestType</code>.  This extension may then add <code>ArrestSubject</code> to the <code>ArrestType</code>.  A substitutable element may be made to provide for the new <code>ArrestType</code> to be used in IEPDs.</p>

		<p>Extensions made in this manner may be easier for IEPDs to use than replacement components.  When a domain publishes an update as an extension of the latest release, that update may be easier for an IEPD to use than if it was published as a replacement of the latest release.</p>

		<p>The specific method used in a domain update will be left up to the domain to determine.  Some domains may choose to replace components, while other domains may extend components.  It is expected that best practices will be determined over time.  Best practices may vary from domain to domain, as some domains may prefer to use common extensions, while others may prefer that each IEPD do its own integration work.</p>

	</section>



	<section id="Namespaces-for-PA-Content">
		<title>6.3.3 Namespaces for Content of the Publication Area</title>

		<p>Each schema that is posted to the publication area will have a namespace that meets several criteria.  (1) It is unique to the posted schema.  There will not be two schemas posted to the publication area that have the same namespace URI.  (2) It clearly identifies that it is a namespace from the publication area.  (3) It clearly identifies the domain or working group that is responsible for it.  (4) It clearly identifies a version of the schema namespace.  An example is <code>http://niem.gov/pub/domains/jxdm/4.2</code>, where the namespace is as in NIEM releases, but with <code>/pub</code> instead of <code>/niem</code>.</p>

	</section>



	<section id="Additional-Requirements-of-PA">
		<title>6.3.4 Additional Requirements of the Publication Area</title>

		<p>Each schema in the publication area has a target namespace that is distinct from that of all other schemas.  There won't be two different schemas in the publication area with the same namespace, nor will there be a schema in the publication area with the same namespace as a schema in a NIEM distribution.</p>

		<p>Each schema in the publication area is persistent.  Like the schemas in the NIEM distributions, once published, the schemas will not go away.  These schemas will remain available for use by IEPDs.</p>

		<p>Schemas in the publication area will be accompanied by change logs, which give comprehensible descriptions of the changes that were made to schemas.  The change log is discussed in Section 7.2, Change Log.</p>

	</section>

</section>  <!-- end 6.3 -->



<section id="Issue-Tracking-Area">
	<title>6.4 The Issue Tracking Area</title>

	<p>NIEM currently conducts issue tracking using the NIEM Configuration Control Tool (NCCT).  This is an issue tracking system with forums for the NTAC, NBAC, and domains.  This document uses the more general terminology "issue tracking area" rather than referring directly to the NCCT, as whether the version architecture will use the NCCT in its current form is yet to be determined.</p>

	<p>The purpose of the issue tracking area is to capture and track requirements and problems from end users, developers, domains, and other people and bodies associated with NIEM.  Although issues come from users, whether or not users will directly interact with the issue tracking area is yet to be determined.  Issues may be entered by a helpdesk, in order to ensure that duplicates are not entered, and that issues are specified fully and clearly, so that additional work is not created downstream.</p>

	<p>The issue tracking area may include a conventional issue tracking system as well as forums/bulletin boards for discussing issues.  Each domain and working group may be given a partition of the issue tracking area, as needed.  These groups will have control over their issues, and may dispatch them and resolve them as desired.</p>

	<p>To be determined is whether a domain may also have issue tracking systems and methods outside the NIEM-provided issue tracking area.  This will reduce transparency, and may impair cooperation between working groups.  It may also increase error when moving issues from one body to another.</p>

	<p>One group may delegate an issue to another group, when the alternate group is better able to address the issue.</p>

</section>  <!-- end 6.4-->

</section>  <!-- end 6 -->



<section id="Additional-Artifacts">
	<title>Additional Artifacts</title>



	<section id="Release-Manifest">
		<title>7.1 Release Manifest</title>

		<p>The release area contains many schemas, each of which may be a part of multiple releases.  The release manifest expresses (1) what are the releases in the release area, and (2) what schemas are parts of each release.</p>

		<p>The mechanics and format of the release manifest are to be determined.  There may be a single manifest for all contents of the release area.  There may also be an individual manifest for each release.</p>

	</section>


	<section id="Change-Log">
		<title>7.2 Change Log</title>

		<p>The publication area will publish domain updates.  These updates are provided as XML Schema documents, and will be accompanied by a change log.</p>

		<p>The change log is able express a single big change that is composed of a set of small changes.  For example, the renaming of an element may include changes to many types that used that element.</p>

		<p>Without a change log, changes made between versions of a schema would not include an expression of what the changes to the schema might mean.  Although the revised schema may be fully formed and well defined, it may be unclear what impact the change might have on other schemas.</p>

		<p>For example, upon renaming an element (from an old name to a new name), the change is represented in XML schema by the original element (with the old name) not appearing in the revised schema, and a new element (with the new name) appearing in the revised schema.</p>

		<p>A type in another domain may be impacted by this change.  If the type used the original element with the old name, it would be unclear what changes should be made to the type to accommodate the renaming.</p>

		<p>In order to describe changes to schemas with enough detail to enable reconciliation, schema definitions are accompanied by metadata that describes changes.  This metadata will include a list of changes, without restating the details that occur in the schemas that are in the publication area.</p>

		<p>The mechanics and format of the change log are to be determined.  The format will be in XML, and may include XPath expressions for relating change log entries to updated schemas.  The change log XML file may describe the following about each change made by a domain:</p>

		<ul>
			<li><p>A description of the change, which says what was done and, perhaps, why it was done.</p></li>
			<li><p>A list of the components that were added as a result of the change.  It may include the location of each new component, via XPath locations.  It may also describe the location (in the sequence of the original component) where an element may be inserted into a type.</p></li>
			<li><p>A list of the components that were deleted as a result of the change.  (Note that no change actually deletes anything as all schemas are persistent, but deleted components will not exist in future schemas)</p></li>
			<li><p>A list of modifications, each modification giving the location of the original definition and the location of the new definition.</p></li>
		</ul>

		<p>Users will be able to audit change logs against schema updates to look for (1) changes and updates that are inadequately described by the change log, and (2) changes in the change log that is not correlated by updated content.  Such a change log may be audited when uploaded, before publication of the schemas and change log to the publication area.</p>

		<p>Descriptions of the changes made are provided to the NBAC during the reconciliation process, and would help them to determine the contents of the next NIEM release.</p>

	</section>



	<section id="Namespace-URI-Directive">
		<title>7.3 Namespace URI Directive</title>

		<p>Through the NBAC's domain reconciliation process, it may be determined that some namespaces must be adjusted to accommodate changes to other namespaces.  That is, although the domain has no new updates for its namespace, the NBAC must change the domain namespace to accommodate the changes in other domains.  In this situation, we say that the domain namespace was bumped.</p>

		<p>The version architecture does not allow for changes to be made to a published namespace.  A changed schema must be given a new target namespace URI.  So, when a domain namespace is bumped, it must be given a new namespace URI.  The Namespace URI Directive file will specify that URI, the target namespace URI of the new schema.</p>

		<p>The exact mechanics of how a namespace URI directive is published is to be determined.  One option is for it to be an XML file that is published in the publication area, within the domain's partition.</p>

		<p>There are several goals for the namespace URI directive: (1) provide clear direction to those building NIEM releases regarding how to construct namespaces for domain schemas, (2) enable domains to maintain control of their namespace URIs, and the progression of those URIs from version to version.  It is expected that a domain may wish to exert strong control over the version identifiers for its schemas.</p>

		<p>The namespace URI directive allows the domain to express the structure of its target namespace URIs, and the sequence of version identifiers.  The domain will be able to specify how namespace URIs are incremented when the namespace is updated or bumped.</p>

	</section>

</section> <!-- end of 7 -->



<section id="Summary">
	<title>Summary</title>

	<p>Under the NIEM version architecture, domains are free to publish updates on their own timelines, without being required to wait for other bodies or participants to act.  The architecture ensures that all such updates are available for use in IEPDs or other uses of NIEM schemas.  The architecture ensures that NIEM releases will be made available to developers at regularly scheduled intervals, and that those releases will be easy to use, and free of structural inconsistency.</p>

	<p>The version architecture also ensures that domain changes are made available in a concrete form that may be incorporated into the next NIEM release.  It also ensures that NIEM releases are scheduled in a way that they may incorporate recent domain changes.  NIEM bodies have authority to make required modifications in order to ensure consistency between the domains and Core.</p>

	<p>This document described the NIEM version architecture at a high level.  The high level description will be expanded and refined into a specification.  The specification will detail the processes, activities and artifacts that are required to maintain high-quality and transparent change management for NIEM.</p>

</section>

<!-- ############## Appendices Begin ############## -->


<section id="MPD-Schematron-Rules" isAppendix="true">
	<title>Schematron Rules for MPDs</title>

	<p><strong>Apply to XML catalog document in a well-formed MPD:</strong></p>

	<pre><include-text href="schematron-rules/xml-catalog-wf-mpd.sch"/></pre>

	<p> <char name="nbsp"/> </p>
</section>



<section id="MPD-Artifacts" isAppendix="true">
	<title>Common MPD Artifacts</title>

	<p>Notes:</p>
	<ul>
		<li><p>(R) in artifact name indicates a required artifact for every MPD.</p></li>
		<li><p>(ref) in definition indicates name is hotlinked to a definition in specification text.</p></li>
		<li><p>* in filename syntax indicates wildcard.</p></li>
	</ul>

<table id="mpd-artifacts">
        <theadr>
		<th>Artifact name</th>
		<th>Filename syntax</th>
		<th>Definition</th>
	</theadr>
	<tr><td>(R) <termRef>MPD catalog document</termRef></td><td>mpd-catalog.xml</td><td>(ref)</td></tr>
	<tr><td>(R) <termRef>read-me artifact</termRef></td><td>read-me.*</td><td>(ref)</td></tr>
	<tr><td>(R) <termRef>change log</termRef></td><td>changelog.*</td><td>(ref)</td></tr>
</table>

	<p> <char name="nbsp"/> </p>
</section>



<section id="Acronyms-and-Abbreviations" isAppendix="true">
	<title>Acronyms and Abbreviations</title>

<table id="acronyms-abbreviations">

        <theadr>
		<th>Acronym / Abbreviation</th>
		<th>Literal or Definition</th>
	</theadr>

	<tr><td>ASCII</td><td>American Standard Code for Information Interchange</td></tr>
	<tr><td>BIEC </td><td>Business Information Exchange Component</td></tr>
	<tr><td>CSV  </td><td>Comma Separated Value (file format)</td></tr>
	<tr><td>CU   </td><td>Core update</td></tr>
	<tr><td>CUI  </td><td>Controlled Unclassified Information</td></tr>
	<tr><td>DU   </td><td>Domain update</td></tr>
	<tr><td>EBV  </td><td>Effective Boolean Value</td></tr>
	<tr><td>EIEM </td><td>Enterprise Information Exchange Model</td></tr>
	<tr><td>GIF  </td><td>Graphic Interchange Format</td></tr>
	<tr><td>GML  </td><td>Geospatial Markup Language</td></tr>
	<tr><td>HTML </td><td>Hyper Text Markup Language</td></tr>
	<tr><td>IEP  </td><td>Information Exchange Package</td></tr>
	<tr><td>IEPD </td><td>Information Exchange Package Documentation</td></tr>
	<tr><td>IRI  </td><td>Internationalized Resource Identifier</td></tr>
	<tr><td>JPG  </td><td>Joint Photographic (Experts) Group</td></tr>
	<tr><td>LEXS </td><td>Logical Entity Exchange Specifications</td></tr>
	<tr><td>MPD  </td><td>Model Package Description</td></tr>
	<tr><td>NCName</td><td>Non-colonized Name (in XML Schema: unqualified; no colon characters)</td></tr>
	<tr><td>NDR  </td><td>Naming and Design Rules</td></tr>
	<tr><td>NIEM </td><td>National Information Exchange Model</td></tr>
	<tr><td>NTAC </td><td>NIEM Technical Architecture Committee</td></tr>
	<tr><td>PDF  </td><td>Portable Document Format</td></tr>
	<tr><td>PMO  </td><td>Program Management Office</td></tr>
	<tr><td>PNG  </td><td>Portable Network Graphic</td></tr>
	<tr><td>QName</td><td>Qualified Name (in XML Schema: qualified by a namespace prefix and colon character)</td></tr>
	<tr><td>RAR  </td><td>Roshal Archive; a compressed archive file format named for its developer, Eugene Roshal</td></tr>
	<tr><td>Rel  </td><td>Release (NIEM)</td></tr>
	<tr><td>RFC  </td><td>Request for Comment</td></tr>
	<tr><td>SSGT </td><td>Schema Subset Generation Tool</td></tr>
	<tr><td>UML  </td><td>Unified Modeling Language</td></tr>
	<tr><td>UPA  </td><td>Unique Particle Attribution</td></tr>
	<tr><td>URI  </td><td>Uniform Resource Identifier</td></tr>
	<tr><td>URL  </td><td>Uniform Resource Locator </td></tr>
	<tr><td>URN  </td><td>Uniform Resource Name</td></tr>
	<tr><td>W3C  </td><td>World Wide Web Consortium</td></tr>
	<tr><td>XMI  </td><td>XML Metadata Interchange</td></tr>
	<tr><td>XML  </td><td>Extensible Markup Language</td></tr>
	<tr><td>XS   </td><td>XML Schema (namespace prefix)</td></tr>
	<tr><td>XSD  </td><td>XML Schema Definition</td></tr>
	<tr><td>XSI  </td><td>XML Schema Instance (namespace prefix)</td></tr>
	<tr><td>XSLT </td><td>Extensible Stylesheet Language Transformation</td></tr>
</table>

	<p> <char name="nbsp"/> </p>
</section>



<section id="References" isAppendix="true">
	<title>References</title>

<reference id="FEA-DRM" label="FEA Data Reference Model">
	<p><em>The Federal Enterprise Architecture Data Reference Model</em>, Version 1.0, September 2004.  Available from <link>http://xml.gov/documents/completed/DRMv1.pdf</link>.  A more recent DRM Version 2.0, 17 November 2005 is available from <link>http://www.whitehouse.gov/omb/assets/egov_docs/DRM_2_0_Final.pdf</link></p>
</reference>

<reference id="GJXDM-IEPD" label="GJXDM IEPD Guidelines">
	<p><em>GJXDM Information Exchange Package Documentation Guidelines</em>, Version 1.1, Global XML Structure Task Force (GXSTF), 2 March 2005.  Available from <link>http://it.ojp.gov/documents/global_jxdm_IEPD_guidelines_v1_1.pdf</link></p>
</reference>

<reference id="ISO-11179-4" label="ISO 11179-4">
	<p><em>ISO/IEC 11179-4 Information Technology <char name="mdash"/> Metadata Registries (MDR) <char name="mdash"/> Part 4: Formulation of Data Definitions Second Edition,</em> 15 July 2004. Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c035346_ISO_IEC_11179-4_2004(E).zip</link>.</p>
</reference>

<reference id="ISO-11179-5" label="ISO 11179-5">
	<p><em>ISO/IEC 11179-5:2005, Information technology <char name="mdash"/> Metadata registries (MDR) <char name="mdash"/> Part 5: Naming and identification principles</em>. Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c035347_ISO_IEC_11179-5_2005(E).zip</link>.</p>
</reference>

<reference id="ISO-RelaxNG" label="ISO RelaxNG">
	<p><em>Document Schema Definition Language (DSDL) <char name="mdash"/> Part 2: Regular-grammar-based validation <char name="mdash"/> RELAX NG</em>, ISO/IEC 19757-2:2008, Second Edition, 15 December 2008.  Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c052348_ISO_IEC_19757-2_2008(E).zip</link>.  See also <link>http://relaxng.org</link>.</p>
</reference>

<reference id="ISO-Schematron" label="ISO Schematron">
	<p><em>Schema Definition Languages (DSDL) <char name="mdash"/> Part 3: Rule-based validation <char name="mdash"/> Schematron</em>, ISO/IEC 19757-3:2006(E), First Edition, 1 June 2006.  Available from <link>http://standards.iso.org/ittf/PubliclyAvailableStandards/c040833_ISO_IEC_19757-3_2006(E).zip</link>.</p>
</reference>

<reference id="LEXS" label="Logical Entity Exchange Specifications">
	<p><em>Logical Entity Exchange Specifications</em>, Version 4.0, 27 July 2011.	Available from <link>http://130.207.211.107/content/downloads</link>.</p>
</reference>

<reference id="NIEM-BIEC" label="NIEM BIEC">
	<p><em>Business Information Exchange Components (BIEC)</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), March 2011.  Available from <link>http://reference.niem.gov/niem/guidance/business-information-exchange-components/1.0/</link>.</p>
</reference>

<reference id="NIEM-Conformance" label="NIEM Conformance">
	<p><em>NIEM Conformance</em>, Version 3.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://reference.niem.gov/niem/specification/conformance/3.0/</link>.</p>
</reference>

<reference id="NIEM-CTAS" label="NIEM Conformance Target Attribute Specification">
	<p><em>NIEM Conformance Target Attribute Specification</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://reference.niem.gov/niem/specification/conformance-target-attribute/1.0/</link>.</p>
</reference>

<reference id="NIEM-ConOps" label="NIEM Concept of Operations">
	<p><em>NIEM Concept of Operations</em>, Version 0.5, NIEM Program Management Office, 9 January 2007.  Available from <link>http://reference.niem.gov/niem/guidance/concept-of-operations/</link>.</p>
</reference>

<reference id="NIEM-DomainUpdate" label="NIEM Domain Update Specification">
	<p><em>NIEM Domain Update Specification</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), 5 November 2010.  Available from <link>http://reference.niem.gov/niem/specification/domain-update/1.0/</link>.</p>
</reference>

<reference id="NIEM-HLTA" label="NIEM High-Level Tool Architecture">
	<p><em>NIEM High-Level Tool Architecture</em>, Version 1.1, NIEM Technical Architecture Committee, 1 December 2008.  Available from <link>http://reference.niem.gov/niem/specification/high-level-tool-architecture/1.1/</link>.</p>
</reference>

<reference id="NIEM-HLVA" label="NIEM High-Level Version Architecture"><p><em>NIEM High Level Version Architecture (HLVA)</em>, Version 1.0, NIEM Technical Architecture Committee, 2008.  Available from <link>http://reference.niem.gov/niem/specification/high-level-version-architecture/1.0/</link>.</p>
</reference>

<reference id="NIEM-IEPD" label="Requirements for a NIEM IEPD">
	<p><em>Requirements for a National Information Exchange Model (NIEM) Information Exchange Package Documentation (IEPD) Specification</em>, Version 2.1, June 2006.  Available from <link>http://reference.niem.gov/niem/guidance/iepd-requirements/2.1/</link>.</p>
</reference>

<reference id="NIEM-Implementation" label="NIEM Implementation Guide">
	<p><q>NIEM Implementation Guide</q>, NIEM Program Management Office.  Available from <link>https://www.niem.gov/aboutniem/grant-funding/Pages/implementation-guide.aspx</link>.</p>
</reference>

<reference id="NIEM-Intro" label="NIEM Introduction">
	<p><em>Introduction to the National Information Exchange Model (NIEM)</em>, Version 0.3, NIEM Program Management Office, 12 February 2007.  Available from <link>http://reference.niem.gov/niem/guidance/introduction/</link>.</p>
</reference>

<reference id="NIEM-MPD-1.0" label="NIEM MPD Specification 1.0">
	<p><em>NIEM Model Package Description (MPD) Specification</em>, Version 1.0, NIEM Technical Architecture Committee (NTAC), 8 August 2011.  Available from <link>http://reference.niem.gov/niem/specification/model-package-description/1.0/</link>.</p>
</reference>

<reference id="NIEM-MPD-1.1" label="NIEM MPD Specification 1.1">
	<p><em>NIEM Model Package Description (MPD) Specification</em>, Version 1.1, NIEM Technical Architecture Committee (NTAC), 1 October 2012.  Available from <link>http://reference.niem.gov/niem/specification/model-package-description/1.1/</link>.</p>
</reference>

<reference id="NIEM-MPD-3.0" label="NIEM MPD Specification 3.0">
	<p><em>NIEM Model Package Description (MPD) Specification</em>, Version 3.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://reference.niem.gov/niem/specification/model-package-description/3.0/</link>.</p>
</reference>

<reference id="NIEM-MPD-Toolkit" label="NIEM MPD Toolkit">
	<p><q>NIEM Model Package Description Toolkit</q>, Version 3.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://referencce.niem.gov/niem/resource/mpd/3.0/</link>.</p>
</reference>

<reference id="NIEM-NDR" label="NIEM NDR">
	<p><em>NIEM Naming and Design Rules (NDR)</em>, Version 3.0, NIEM Technical Architecture Committee (NTAC), [day month TBD] 2014.  Available from <link>http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0/</link>.</p>
</reference>

<reference id="NIEM-SSGT" label="NIEM SSGT">
	<p><q>NIEM Schema Subset Generation Tool</q> (SSGT).  Available from <link>http://tools.niem.gov/niemtools/ssgt/index.iepd</link>.</p>
</reference>

<reference id="NIEM-UserGuide" label="NIEM User Guide">
	<p><em>NIEM User Guide</em>, Volume 1, U.S. Department of Justice, Office of Justice Programs, (date unknown).  Available from <link>http://reference.niem.gov/niem/guidance/user-guide/vol1/</link>.</p>
</reference>

<reference id="OASIS-XML-Catalogs" label="XML Catalogs">
	<p><em>XML Catalogs</em>, Organization for the Advancement of Structured Information Standards (OASIS) Standard v1.1, 7 October 2005.  Available from <link>https://www.oasis-open.org/committees/download.php/14809/std-entity-xml-catalogs-1.1.html</link>.</p>
</reference>

<reference id="Principles-of-Data-Integration" label="Principles of Data Integration">
	<p>Doan, A., Halevy, A., and Ives, X. (2012), <em>Principles of Data Integration</em>, New York, NY: Morgan Kaufmann.</p>
</reference>

<reference id="RAR" label="RAR">
	<p>RARLAB WinRAR, <link>http://win-rar.com</link></p>
</reference>

<reference id="RFC2119-KeyWords" label="RFC 2119 Key Words">
	<p>Bradner, S., <em>Key words for use in RFCs to Indicate Requirement Levels</em>, IETF RFC 2119, March 1997.  Available from <link>http://www.ietf.org/rfc/rfc2119.txt</link>.</p>
</reference>

<reference id="RFC2141-URN-Syntax" label="RFC 2141 URN Syntax">
	<p>Moats, R., <em>URN Syntax</em>, IETF Request For Comment 2141, May 1997.  Available from <link>http://tools.ietf.org/html/rfc2141</link>.</p>
</reference>

<reference id="RFC3986-URI" label="RFC 3986 URI">
	<p>Berners-Lee, T., et al., <em>Uniform Resource Identifier (URI): Generic Syntax</em>, Request for Comment 3986, Network Working Group, January 2005.  Available from <link>http://tools.ietf.org/html/rfc3986</link>.</p>
</reference>

<reference id="RFC3987-IRI" label="RFC 3987 IRI">
	<p>Duerst, M., and Suignard, M., <em>Internationalized Resource Identifiers (IRIs)</em>, Request For Comment 3987, January 2005.  Avalailable from <link>http://tools.ietf.org/html/rfc3987</link>.</p>
</reference>

<reference id="W3-EXI">
	<p><em>Efficient XML Interchange (EXI) Format</em>, Version 1.0, W3C Recommendation, 10 March 2011.  Available from <link>http://www.w3.org/TR/2011/REC-exi-20110310/</link>.</p>
</reference>

<reference id="W3-XML">
	<p><em>Extensible Markup Language (XML)</em>, Version 1.0, Fifth Edition, W3C Recommendation 26 November 2008.  Available from <link>http://www.w3.org/TR/2008/REC-xml-20081126/</link>.</p>
</reference>

<reference id="W3-XML-InfoSet">
	<p><em>XML Information Set</em>, Second Edition, W3C Recommendation 4 February 2004.  Available from <link>http://www.w3.org/TR/2004/REC-xml-infoset-20040204/</link>.</p>
</reference>

<reference id="W3-XML-Namespaces">
	<p><em>Namespaces in XML</em>, Second Edition, World Wide Web Consortium 16 August 2006.  Available from <link>http://www.w3.org/TR/2006/REC-xml-names-20060816/</link>.</p>
</reference>

<reference id="W3-XML-Schema-Datatypes" label="W3C XML Schema Datatypes">
	<p><em>XML Schema Part 2: Datatypes</em>, Second Edition, W3C Recommendation 28 October 2004.  Available from <link>http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/</link>.</p>
</reference>

<reference id="W3-XML-Schema-Structures" label="W3C XML Schema Structures">
	<p><em>XML Schema Part 1: Structures</em>, Second Edition, W3C Recommendation 28 October 2004.  Available from <link>http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/</link>.</p>
</reference>

<reference id="W3-XPath" label="W3C XPath 2.0">
	<p><em>XML Path Language (XPath) 2.0</em>, Second Edition, W3C Recommendation 14 December 2010.  Available from <link>http://www.w3.org/TR/2010/REC-xpath20-20101214/</link>.</p>
</reference>

<reference id="W3-XSLT" label="XSLT v1.0">
	<p><em>XSL Transformations (XSLT)</em>, Version 1.0, W3C Recommendation 16 November 1999.  Available from <link>http://www.w3.org/TR/1999/REC-xslt-19991116</link>.</p>
</reference>

<reference id="W3-XSLT2" label="XSLT v2.0">
	<p><em>XSL Transformations (XSLT)</em>, Version 2.0, W3C Recommendation 23 January 2007.  Available from <link>http://www.w3.org/TR/2007/REC-xslt20-20070123/</link>.</p>
</reference>

<reference id="PKZIP">
	<p><em>APPNOTE.TXT - .ZIP File Format Specification</em>, Version: 6.3.2, Revised: 28 September 2007, Copyright (c) 1989 - 2007 PKWare Inc.  Available from <link>http://www.pkware.com/documents/casestudies/APPNOTE.TXT</link>.</p>
</reference>

</section>


<section><title>Index of Definitions</title>
	<indexOfDefinitions/>
</section>

<section><title>Index of Rules</title>
	<indexOfRules/>
</section>


<section>
	<title>Index</title>
	<pre>
activities, 6
appinfo, 15

bumped, 23

change log, 22
coherence, 13
coherent, 9, 11
definition, 13
collaboration area, 6, 8, 18
Core synchronization, 7, 10, 15
cross-domain harmonization, 
6, 9, 15

data stores, 6, 18
domain, 1
domain reconciliation, 6, 9, 11
domain update, 6, 8

harmonization, 9, 15
definition, 5
harmonized
definition, 5

IEPD, 8
definition, 3
issue, 6, 8
issue tracking area, 6, 8, 9, 20

major release, 7

namespace, 20
namespace URI directive, 23
NBAC, 11, 12
definition, 1
NCCT
definition, 6
NIEM domain, 1
NIEM major release, 10
NIEM micro release, 9, 14
NIEM minor release, 6, 9
NIEM release, 2, 5
NTAC
definition, 1

partition, 19
PMO
definition, 1
publication area, 6, 9, 11, 18
published update, 5

release area, 6, 9, 18
release manifest, 18, 22
reports, 11

scalability, 15
semantic consistency, 15
semantic overlap, 9
SME
definition, 9
structures, 15

tiger team, 6, 15
definition, 9
tradeoffs, 1

URI
definition, 3

version identifiers, 16

walkthrough, 8

	</pre>

</section>


</document>

